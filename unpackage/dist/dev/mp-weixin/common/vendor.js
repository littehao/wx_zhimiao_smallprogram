(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!*********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/wx.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var objectKeys = ['qy', 'env', 'error', 'version', 'lanDebug', 'cloud', 'serviceMarket', 'router', 'worklet'];
var singlePageDisableKey = ['lanDebug', 'router', 'worklet'];
var target = typeof globalThis !== 'undefined' ? globalThis : function () {
  return this;
}();
var key = ['w', 'x'].join('');
var oldWx = target[key];
var launchOption = oldWx.getLaunchOptionsSync ? oldWx.getLaunchOptionsSync() : null;
function isWxKey(key) {
  if (launchOption && launchOption.scene === 1154 && singlePageDisableKey.includes(key)) {
    return false;
  }
  return objectKeys.indexOf(key) > -1 || typeof oldWx[key] === 'function';
}
function initWx() {
  var newWx = {};
  for (var _key in oldWx) {
    if (isWxKey(_key)) {
      // TODO wrapper function
      newWx[_key] = oldWx[_key];
    }
  }
  return newWx;
}
target[key] = initWx();
var _default = target[key];
exports.default = _default;

/***/ }),

/***/ 10:
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 11:
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ 12);
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 12:
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ 13)["default"];
var toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ 14);
function _toPropertyKey(arg) {
  var key = toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 13:
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 14:
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ 13)["default"];
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 15:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/construct.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ 16);
var isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct.js */ 17);
function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct.bind(), module.exports.__esModule = true, module.exports["default"] = module.exports;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
  return _construct.apply(null, arguments);
}
module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 16:
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _setPrototypeOf(o, p);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 17:
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}
module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 18:
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles.js */ 19);
var iterableToArray = __webpack_require__(/*! ./iterableToArray.js */ 20);
var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 8);
var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread.js */ 21);
function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}
module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 19:
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ 9);
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}
module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 2:
/*!************************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(wx, global) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createApp = createApp;
exports.createComponent = createComponent;
exports.createPage = createPage;
exports.createPlugin = createPlugin;
exports.createSubpackageApp = createSubpackageApp;
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ 5));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 11));
var _construct2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/construct */ 15));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ 18));
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ 13));
var _uniI18n = __webpack_require__(/*! @dcloudio/uni-i18n */ 22);
var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 25));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var realAtob;
var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
var b64re = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
if (typeof atob !== 'function') {
  realAtob = function realAtob(str) {
    str = String(str).replace(/[\t\n\f\r ]+/g, '');
    if (!b64re.test(str)) {
      throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
    }

    // Adding the padding if missing, for semplicity
    str += '=='.slice(2 - (str.length & 3));
    var bitmap;
    var result = '';
    var r1;
    var r2;
    var i = 0;
    for (; i < str.length;) {
      bitmap = b64.indexOf(str.charAt(i++)) << 18 | b64.indexOf(str.charAt(i++)) << 12 | (r1 = b64.indexOf(str.charAt(i++))) << 6 | (r2 = b64.indexOf(str.charAt(i++)));
      result += r1 === 64 ? String.fromCharCode(bitmap >> 16 & 255) : r2 === 64 ? String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255) : String.fromCharCode(bitmap >> 16 & 255, bitmap >> 8 & 255, bitmap & 255);
    }
    return result;
  };
} else {
  // 注意atob只能在全局对象上调用，例如：`const Base64 = {atob};Base64.atob('xxxx')`是错误的用法
  realAtob = atob;
}
function b64DecodeUnicode(str) {
  return decodeURIComponent(realAtob(str).split('').map(function (c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
}
function getCurrentUserInfo() {
  var token = wx.getStorageSync('uni_id_token') || '';
  var tokenArr = token.split('.');
  if (!token || tokenArr.length !== 3) {
    return {
      uid: null,
      role: [],
      permission: [],
      tokenExpired: 0
    };
  }
  var userInfo;
  try {
    userInfo = JSON.parse(b64DecodeUnicode(tokenArr[1]));
  } catch (error) {
    throw new Error('获取当前用户信息出错，详细错误信息为：' + error.message);
  }
  userInfo.tokenExpired = userInfo.exp * 1000;
  delete userInfo.exp;
  delete userInfo.iat;
  return userInfo;
}
function uniIdMixin(Vue) {
  Vue.prototype.uniIDHasRole = function (roleId) {
    var _getCurrentUserInfo = getCurrentUserInfo(),
      role = _getCurrentUserInfo.role;
    return role.indexOf(roleId) > -1;
  };
  Vue.prototype.uniIDHasPermission = function (permissionId) {
    var _getCurrentUserInfo2 = getCurrentUserInfo(),
      permission = _getCurrentUserInfo2.permission;
    return this.uniIDHasRole('admin') || permission.indexOf(permissionId) > -1;
  };
  Vue.prototype.uniIDTokenValid = function () {
    var _getCurrentUserInfo3 = getCurrentUserInfo(),
      tokenExpired = _getCurrentUserInfo3.tokenExpired;
    return tokenExpired > Date.now();
  };
}
var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
function isFn(fn) {
  return typeof fn === 'function';
}
function isStr(str) {
  return typeof str === 'string';
}
function isObject(obj) {
  return obj !== null && (0, _typeof2.default)(obj) === 'object';
}
function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
function noop() {}

/**
 * Create a cached version of a pure function.
 */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
function sortObject(obj) {
  var sortObj = {};
  if (isPlainObject(obj)) {
    Object.keys(obj).sort().forEach(function (key) {
      sortObj[key] = obj[key];
    });
  }
  return !Object.keys(sortObj) ? obj : sortObj;
}
var HOOKS = ['invoke', 'success', 'fail', 'complete', 'returnValue'];
var globalInterceptors = {};
var scopedInterceptors = {};
function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res;
}
function removeHook(hooks, hook) {
  var index = hooks.indexOf(hook);
  if (index !== -1) {
    hooks.splice(index, 1);
  }
}
function mergeInterceptorHook(interceptor, option) {
  Object.keys(option).forEach(function (hook) {
    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {
      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);
    }
  });
}
function removeInterceptorHook(interceptor, option) {
  if (!interceptor || !option) {
    return;
  }
  Object.keys(option).forEach(function (hook) {
    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {
      removeHook(interceptor[hook], option[hook]);
    }
  });
}
function addInterceptor(method, option) {
  if (typeof method === 'string' && isPlainObject(option)) {
    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);
  } else if (isPlainObject(method)) {
    mergeInterceptorHook(globalInterceptors, method);
  }
}
function removeInterceptor(method, option) {
  if (typeof method === 'string') {
    if (isPlainObject(option)) {
      removeInterceptorHook(scopedInterceptors[method], option);
    } else {
      delete scopedInterceptors[method];
    }
  } else if (isPlainObject(method)) {
    removeInterceptorHook(globalInterceptors, method);
  }
}
function wrapperHook(hook) {
  return function (data) {
    return hook(data) || data;
  };
}
function isPromise(obj) {
  return !!obj && ((0, _typeof2.default)(obj) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
}
function queue(hooks, data) {
  var promise = false;
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    if (promise) {
      promise = Promise.resolve(wrapperHook(hook));
    } else {
      var res = hook(data);
      if (isPromise(res)) {
        promise = Promise.resolve(res);
      }
      if (res === false) {
        return {
          then: function then() {}
        };
      }
    }
  }
  return promise || {
    then: function then(callback) {
      return callback(data);
    }
  };
}
function wrapperOptions(interceptor) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  ['success', 'fail', 'complete'].forEach(function (name) {
    if (Array.isArray(interceptor[name])) {
      var oldCallback = options[name];
      options[name] = function callbackInterceptor(res) {
        queue(interceptor[name], res).then(function (res) {
          /* eslint-disable no-mixed-operators */
          return isFn(oldCallback) && oldCallback(res) || res;
        });
      };
    }
  });
  return options;
}
function wrapperReturnValue(method, returnValue) {
  var returnValueHooks = [];
  if (Array.isArray(globalInterceptors.returnValue)) {
    returnValueHooks.push.apply(returnValueHooks, (0, _toConsumableArray2.default)(globalInterceptors.returnValue));
  }
  var interceptor = scopedInterceptors[method];
  if (interceptor && Array.isArray(interceptor.returnValue)) {
    returnValueHooks.push.apply(returnValueHooks, (0, _toConsumableArray2.default)(interceptor.returnValue));
  }
  returnValueHooks.forEach(function (hook) {
    returnValue = hook(returnValue) || returnValue;
  });
  return returnValue;
}
function getApiInterceptorHooks(method) {
  var interceptor = Object.create(null);
  Object.keys(globalInterceptors).forEach(function (hook) {
    if (hook !== 'returnValue') {
      interceptor[hook] = globalInterceptors[hook].slice();
    }
  });
  var scopedInterceptor = scopedInterceptors[method];
  if (scopedInterceptor) {
    Object.keys(scopedInterceptor).forEach(function (hook) {
      if (hook !== 'returnValue') {
        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);
      }
    });
  }
  return interceptor;
}
function invokeApi(method, api, options) {
  for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    params[_key - 3] = arguments[_key];
  }
  var interceptor = getApiInterceptorHooks(method);
  if (interceptor && Object.keys(interceptor).length) {
    if (Array.isArray(interceptor.invoke)) {
      var res = queue(interceptor.invoke, options);
      return res.then(function (options) {
        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));
      });
    } else {
      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));
    }
  }
  return api.apply(void 0, [options].concat(params));
}
var promiseInterceptor = {
  returnValue: function returnValue(res) {
    if (!isPromise(res)) {
      return res;
    }
    return new Promise(function (resolve, reject) {
      res.then(function (res) {
        if (res[0]) {
          reject(res[0]);
        } else {
          resolve(res[1]);
        }
      });
    });
  }
};
var SYNC_API_RE = /^\$|Window$|WindowStyle$|sendHostEvent|sendNativeEvent|restoreGlobal|requireGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64|getLocale|setLocale|invokePushCallback|getWindowInfo|getDeviceInfo|getAppBaseInfo|getSystemSetting|getAppAuthorizeSetting|initUTS|requireUTS|registerUTS/;
var CONTEXT_API_RE = /^create|Manager$/;

// Context例外情况
var CONTEXT_API_RE_EXC = ['createBLEConnection'];

// 同步例外情况
var ASYNC_API = ['createBLEConnection', 'createPushMessage'];
var CALLBACK_API_RE = /^on|^off/;
function isContextApi(name) {
  return CONTEXT_API_RE.test(name) && CONTEXT_API_RE_EXC.indexOf(name) === -1;
}
function isSyncApi(name) {
  return SYNC_API_RE.test(name) && ASYNC_API.indexOf(name) === -1;
}
function isCallbackApi(name) {
  return CALLBACK_API_RE.test(name) && name !== 'onPush';
}
function handlePromise(promise) {
  return promise.then(function (data) {
    return [null, data];
  }).catch(function (err) {
    return [err];
  });
}
function shouldPromise(name) {
  if (isContextApi(name) || isSyncApi(name) || isCallbackApi(name)) {
    return false;
  }
  return true;
}

/* eslint-disable no-extend-native */
if (!Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(function (value) {
      return promise.resolve(callback()).then(function () {
        return value;
      });
    }, function (reason) {
      return promise.resolve(callback()).then(function () {
        throw reason;
      });
    });
  };
}
function promisify(name, api) {
  if (!shouldPromise(name) || !isFn(api)) {
    return api;
  }
  return function promiseApi() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      params[_key2 - 1] = arguments[_key2];
    }
    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {
      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));
    }
    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {
      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {
        success: resolve,
        fail: reject
      })].concat(params));
    })));
  };
}
var EPS = 1e-4;
var BASE_DEVICE_WIDTH = 750;
var isIOS = false;
var deviceWidth = 0;
var deviceDPR = 0;
function checkDeviceWidth() {
  var _wx$getSystemInfoSync = wx.getSystemInfoSync(),
    platform = _wx$getSystemInfoSync.platform,
    pixelRatio = _wx$getSystemInfoSync.pixelRatio,
    windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni

  deviceWidth = windowWidth;
  deviceDPR = pixelRatio;
  isIOS = platform === 'ios';
}
function upx2px(number, newDeviceWidth) {
  if (deviceWidth === 0) {
    checkDeviceWidth();
  }
  number = Number(number);
  if (number === 0) {
    return 0;
  }
  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);
  if (result < 0) {
    result = -result;
  }
  result = Math.floor(result + EPS);
  if (result === 0) {
    if (deviceDPR === 1 || !isIOS) {
      result = 1;
    } else {
      result = 0.5;
    }
  }
  return number < 0 ? -result : result;
}
var LOCALE_ZH_HANS = 'zh-Hans';
var LOCALE_ZH_HANT = 'zh-Hant';
var LOCALE_EN = 'en';
var LOCALE_FR = 'fr';
var LOCALE_ES = 'es';
var messages = {};
var locale;
{
  locale = normalizeLocale(wx.getSystemInfoSync().language) || LOCALE_EN;
}
function initI18nMessages() {
  if (!isEnableLocale()) {
    return;
  }
  var localeKeys = Object.keys(__uniConfig.locales);
  if (localeKeys.length) {
    localeKeys.forEach(function (locale) {
      var curMessages = messages[locale];
      var userMessages = __uniConfig.locales[locale];
      if (curMessages) {
        Object.assign(curMessages, userMessages);
      } else {
        messages[locale] = userMessages;
      }
    });
  }
}
initI18nMessages();
var i18n = (0, _uniI18n.initVueI18n)(locale, {});
var t = i18n.t;
var i18nMixin = i18n.mixin = {
  beforeCreate: function beforeCreate() {
    var _this = this;
    var unwatch = i18n.i18n.watchLocale(function () {
      _this.$forceUpdate();
    });
    this.$once('hook:beforeDestroy', function () {
      unwatch();
    });
  },
  methods: {
    $$t: function $$t(key, values) {
      return t(key, values);
    }
  }
};
var setLocale = i18n.setLocale;
var getLocale = i18n.getLocale;
function initAppLocale(Vue, appVm, locale) {
  var state = Vue.observable({
    locale: locale || i18n.getLocale()
  });
  var localeWatchers = [];
  appVm.$watchLocale = function (fn) {
    localeWatchers.push(fn);
  };
  Object.defineProperty(appVm, '$locale', {
    get: function get() {
      return state.locale;
    },
    set: function set(v) {
      state.locale = v;
      localeWatchers.forEach(function (watch) {
        return watch(v);
      });
    }
  });
}
function isEnableLocale() {
  return typeof __uniConfig !== 'undefined' && __uniConfig.locales && !!Object.keys(__uniConfig.locales).length;
}
function include(str, parts) {
  return !!parts.find(function (part) {
    return str.indexOf(part) !== -1;
  });
}
function startsWith(str, parts) {
  return parts.find(function (part) {
    return str.indexOf(part) === 0;
  });
}
function normalizeLocale(locale, messages) {
  if (!locale) {
    return;
  }
  locale = locale.trim().replace(/_/g, '-');
  if (messages && messages[locale]) {
    return locale;
  }
  locale = locale.toLowerCase();
  if (locale === 'chinese') {
    // 支付宝
    return LOCALE_ZH_HANS;
  }
  if (locale.indexOf('zh') === 0) {
    if (locale.indexOf('-hans') > -1) {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf('-hant') > -1) {
      return LOCALE_ZH_HANT;
    }
    if (include(locale, ['-tw', '-hk', '-mo', '-cht'])) {
      return LOCALE_ZH_HANT;
    }
    return LOCALE_ZH_HANS;
  }
  var lang = startsWith(locale, [LOCALE_EN, LOCALE_FR, LOCALE_ES]);
  if (lang) {
    return lang;
  }
}
// export function initI18n() {
//   const localeKeys = Object.keys(__uniConfig.locales || {})
//   if (localeKeys.length) {
//     localeKeys.forEach((locale) =>
//       i18n.add(locale, __uniConfig.locales[locale])
//     )
//   }
// }

function getLocale$1() {
  // 优先使用 $locale
  if (isFn(getApp)) {
    var app = getApp({
      allowDefault: true
    });
    if (app && app.$vm) {
      return app.$vm.$locale;
    }
  }
  return normalizeLocale(wx.getSystemInfoSync().language) || LOCALE_EN;
}
function setLocale$1(locale) {
  var app = isFn(getApp) ? getApp() : false;
  if (!app) {
    return false;
  }
  var oldLocale = app.$vm.$locale;
  if (oldLocale !== locale) {
    app.$vm.$locale = locale;
    onLocaleChangeCallbacks.forEach(function (fn) {
      return fn({
        locale: locale
      });
    });
    return true;
  }
  return false;
}
var onLocaleChangeCallbacks = [];
function onLocaleChange(fn) {
  if (onLocaleChangeCallbacks.indexOf(fn) === -1) {
    onLocaleChangeCallbacks.push(fn);
  }
}
if (typeof global !== 'undefined') {
  global.getLocale = getLocale$1;
}
var interceptors = {
  promiseInterceptor: promiseInterceptor
};
var baseApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  upx2px: upx2px,
  getLocale: getLocale$1,
  setLocale: setLocale$1,
  onLocaleChange: onLocaleChange,
  addInterceptor: addInterceptor,
  removeInterceptor: removeInterceptor,
  interceptors: interceptors
});
function findExistsPageIndex(url) {
  var pages = getCurrentPages();
  var len = pages.length;
  while (len--) {
    var page = pages[len];
    if (page.$page && page.$page.fullPath === url) {
      return len;
    }
  }
  return -1;
}
var redirectTo = {
  name: function name(fromArgs) {
    if (fromArgs.exists === 'back' && fromArgs.delta) {
      return 'navigateBack';
    }
    return 'redirectTo';
  },
  args: function args(fromArgs) {
    if (fromArgs.exists === 'back' && fromArgs.url) {
      var existsPageIndex = findExistsPageIndex(fromArgs.url);
      if (existsPageIndex !== -1) {
        var delta = getCurrentPages().length - 1 - existsPageIndex;
        if (delta > 0) {
          fromArgs.delta = delta;
        }
      }
    }
  }
};
var previewImage = {
  args: function args(fromArgs) {
    var currentIndex = parseInt(fromArgs.current);
    if (isNaN(currentIndex)) {
      return;
    }
    var urls = fromArgs.urls;
    if (!Array.isArray(urls)) {
      return;
    }
    var len = urls.length;
    if (!len) {
      return;
    }
    if (currentIndex < 0) {
      currentIndex = 0;
    } else if (currentIndex >= len) {
      currentIndex = len - 1;
    }
    if (currentIndex > 0) {
      fromArgs.current = urls[currentIndex];
      fromArgs.urls = urls.filter(function (item, index) {
        return index < currentIndex ? item !== urls[currentIndex] : true;
      });
    } else {
      fromArgs.current = urls[0];
    }
    return {
      indicator: false,
      loop: false
    };
  }
};
var UUID_KEY = '__DC_STAT_UUID';
var deviceId;
function useDeviceId(result) {
  deviceId = deviceId || wx.getStorageSync(UUID_KEY);
  if (!deviceId) {
    deviceId = Date.now() + '' + Math.floor(Math.random() * 1e7);
    wx.setStorage({
      key: UUID_KEY,
      data: deviceId
    });
  }
  result.deviceId = deviceId;
}
function addSafeAreaInsets(result) {
  if (result.safeArea) {
    var safeArea = result.safeArea;
    result.safeAreaInsets = {
      top: safeArea.top,
      left: safeArea.left,
      right: result.windowWidth - safeArea.right,
      bottom: result.screenHeight - safeArea.bottom
    };
  }
}
function populateParameters(result) {
  var _result$brand = result.brand,
    brand = _result$brand === void 0 ? '' : _result$brand,
    _result$model = result.model,
    model = _result$model === void 0 ? '' : _result$model,
    _result$system = result.system,
    system = _result$system === void 0 ? '' : _result$system,
    _result$language = result.language,
    language = _result$language === void 0 ? '' : _result$language,
    theme = result.theme,
    version = result.version,
    platform = result.platform,
    fontSizeSetting = result.fontSizeSetting,
    SDKVersion = result.SDKVersion,
    pixelRatio = result.pixelRatio,
    deviceOrientation = result.deviceOrientation;
  // const isQuickApp = "mp-weixin".indexOf('quickapp-webview') !== -1

  var extraParam = {};

  // osName osVersion
  var osName = '';
  var osVersion = '';
  {
    osName = system.split(' ')[0] || '';
    osVersion = system.split(' ')[1] || '';
  }
  var hostVersion = version;

  // deviceType
  var deviceType = getGetDeviceType(result, model);

  // deviceModel
  var deviceBrand = getDeviceBrand(brand);

  // hostName
  var _hostName = getHostName(result);

  // deviceOrientation
  var _deviceOrientation = deviceOrientation; // 仅 微信 百度 支持

  // devicePixelRatio
  var _devicePixelRatio = pixelRatio;

  // SDKVersion
  var _SDKVersion = SDKVersion;

  // hostLanguage
  var hostLanguage = language.replace(/_/g, '-');

  // wx.getAccountInfoSync

  var parameters = {
    appId: "__UNI__3E0DB5F",
    appName: "wx_zhimiao",
    appVersion: "1.0.0",
    appVersionCode: "100",
    appLanguage: getAppLanguage(hostLanguage),
    uniCompileVersion: "3.7.9",
    uniRuntimeVersion: "3.7.9",
    uniPlatform: undefined || "mp-weixin",
    deviceBrand: deviceBrand,
    deviceModel: model,
    deviceType: deviceType,
    devicePixelRatio: _devicePixelRatio,
    deviceOrientation: _deviceOrientation,
    osName: osName.toLocaleLowerCase(),
    osVersion: osVersion,
    hostTheme: theme,
    hostVersion: hostVersion,
    hostLanguage: hostLanguage,
    hostName: _hostName,
    hostSDKVersion: _SDKVersion,
    hostFontSizeSetting: fontSizeSetting,
    windowTop: 0,
    windowBottom: 0,
    // TODO
    osLanguage: undefined,
    osTheme: undefined,
    ua: undefined,
    hostPackageName: undefined,
    browserName: undefined,
    browserVersion: undefined
  };
  Object.assign(result, parameters, extraParam);
}
function getGetDeviceType(result, model) {
  var deviceType = result.deviceType || 'phone';
  {
    var deviceTypeMaps = {
      ipad: 'pad',
      windows: 'pc',
      mac: 'pc'
    };
    var deviceTypeMapsKeys = Object.keys(deviceTypeMaps);
    var _model = model.toLocaleLowerCase();
    for (var index = 0; index < deviceTypeMapsKeys.length; index++) {
      var _m = deviceTypeMapsKeys[index];
      if (_model.indexOf(_m) !== -1) {
        deviceType = deviceTypeMaps[_m];
        break;
      }
    }
  }
  return deviceType;
}
function getDeviceBrand(brand) {
  var deviceBrand = brand;
  if (deviceBrand) {
    deviceBrand = brand.toLocaleLowerCase();
  }
  return deviceBrand;
}
function getAppLanguage(defaultLanguage) {
  return getLocale$1 ? getLocale$1() : defaultLanguage;
}
function getHostName(result) {
  var _platform = 'WeChat';
  var _hostName = result.hostName || _platform; // mp-jd
  {
    if (result.environment) {
      _hostName = result.environment;
    } else if (result.host && result.host.env) {
      _hostName = result.host.env;
    }
  }
  return _hostName;
}
var getSystemInfo = {
  returnValue: function returnValue(result) {
    useDeviceId(result);
    addSafeAreaInsets(result);
    populateParameters(result);
  }
};
var showActionSheet = {
  args: function args(fromArgs) {
    if ((0, _typeof2.default)(fromArgs) === 'object') {
      fromArgs.alertText = fromArgs.title;
    }
  }
};
var getAppBaseInfo = {
  returnValue: function returnValue(result) {
    var _result = result,
      version = _result.version,
      language = _result.language,
      SDKVersion = _result.SDKVersion,
      theme = _result.theme;
    var _hostName = getHostName(result);
    var hostLanguage = language.replace('_', '-');
    result = sortObject(Object.assign(result, {
      appId: "__UNI__3E0DB5F",
      appName: "wx_zhimiao",
      appVersion: "1.0.0",
      appVersionCode: "100",
      appLanguage: getAppLanguage(hostLanguage),
      hostVersion: version,
      hostLanguage: hostLanguage,
      hostName: _hostName,
      hostSDKVersion: SDKVersion,
      hostTheme: theme
    }));
  }
};
var getDeviceInfo = {
  returnValue: function returnValue(result) {
    var _result2 = result,
      brand = _result2.brand,
      model = _result2.model;
    var deviceType = getGetDeviceType(result, model);
    var deviceBrand = getDeviceBrand(brand);
    useDeviceId(result);
    result = sortObject(Object.assign(result, {
      deviceType: deviceType,
      deviceBrand: deviceBrand,
      deviceModel: model
    }));
  }
};
var getWindowInfo = {
  returnValue: function returnValue(result) {
    addSafeAreaInsets(result);
    result = sortObject(Object.assign(result, {
      windowTop: 0,
      windowBottom: 0
    }));
  }
};
var getAppAuthorizeSetting = {
  returnValue: function returnValue(result) {
    var locationReducedAccuracy = result.locationReducedAccuracy;
    result.locationAccuracy = 'unsupported';
    if (locationReducedAccuracy === true) {
      result.locationAccuracy = 'reduced';
    } else if (locationReducedAccuracy === false) {
      result.locationAccuracy = 'full';
    }
  }
};

// import navigateTo from 'uni-helpers/navigate-to'

var compressImage = {
  args: function args(fromArgs) {
    // https://developers.weixin.qq.com/community/develop/doc/000c08940c865011298e0a43256800?highLine=compressHeight
    if (fromArgs.compressedHeight && !fromArgs.compressHeight) {
      fromArgs.compressHeight = fromArgs.compressedHeight;
    }
    if (fromArgs.compressedWidth && !fromArgs.compressWidth) {
      fromArgs.compressWidth = fromArgs.compressedWidth;
    }
  }
};
var protocols = {
  redirectTo: redirectTo,
  // navigateTo,  // 由于在微信开发者工具的页面参数，会显示__id__参数，因此暂时关闭mp-weixin对于navigateTo的AOP
  previewImage: previewImage,
  getSystemInfo: getSystemInfo,
  getSystemInfoSync: getSystemInfo,
  showActionSheet: showActionSheet,
  getAppBaseInfo: getAppBaseInfo,
  getDeviceInfo: getDeviceInfo,
  getWindowInfo: getWindowInfo,
  getAppAuthorizeSetting: getAppAuthorizeSetting,
  compressImage: compressImage
};
var todos = ['vibrate', 'preloadPage', 'unPreloadPage', 'loadSubPackage'];
var canIUses = [];
var CALLBACKS = ['success', 'fail', 'cancel', 'complete'];
function processCallback(methodName, method, returnValue) {
  return function (res) {
    return method(processReturnValue(methodName, res, returnValue));
  };
}
function processArgs(methodName, fromArgs) {
  var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  if (isPlainObject(fromArgs)) {
    // 一般 api 的参数解析
    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值
    if (isFn(argsOption)) {
      argsOption = argsOption(fromArgs, toArgs) || {};
    }
    for (var key in fromArgs) {
      if (hasOwn(argsOption, key)) {
        var keyOption = argsOption[key];
        if (isFn(keyOption)) {
          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);
        }
        if (!keyOption) {
          // 不支持的参数
          console.warn("The '".concat(methodName, "' method of platform '\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F' does not support option '").concat(key, "'"));
        } else if (isStr(keyOption)) {
          // 重写参数 key
          toArgs[keyOption] = fromArgs[key];
        } else if (isPlainObject(keyOption)) {
          // {name:newName,value:value}可重新指定参数 key:value
          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;
        }
      } else if (CALLBACKS.indexOf(key) !== -1) {
        if (isFn(fromArgs[key])) {
          toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);
        }
      } else {
        if (!keepFromArgs) {
          toArgs[key] = fromArgs[key];
        }
      }
    }
    return toArgs;
  } else if (isFn(fromArgs)) {
    fromArgs = processCallback(methodName, fromArgs, returnValue);
  }
  return fromArgs;
}
function processReturnValue(methodName, res, returnValue) {
  var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (isFn(protocols.returnValue)) {
    // 处理通用 returnValue
    res = protocols.returnValue(methodName, res);
  }
  return processArgs(methodName, res, returnValue, {}, keepReturnValue);
}
function wrapper(methodName, method) {
  if (hasOwn(protocols, methodName)) {
    var protocol = protocols[methodName];
    if (!protocol) {
      // 暂不支持的 api
      return function () {
        console.error("Platform '\u5FAE\u4FE1\u5C0F\u7A0B\u5E8F' does not support '".concat(methodName, "'."));
      };
    }
    return function (arg1, arg2) {
      // 目前 api 最多两个参数
      var options = protocol;
      if (isFn(protocol)) {
        options = protocol(arg1);
      }
      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);
      var args = [arg1];
      if (typeof arg2 !== 'undefined') {
        args.push(arg2);
      }
      if (isFn(options.name)) {
        methodName = options.name(arg1);
      } else if (isStr(options.name)) {
        methodName = options.name;
      }
      var returnValue = wx[methodName].apply(wx, args);
      if (isSyncApi(methodName)) {
        // 同步 api
        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));
      }
      return returnValue;
    };
  }
  return method;
}
var todoApis = Object.create(null);
var TODOS = ['onTabBarMidButtonTap', 'subscribePush', 'unsubscribePush', 'onPush', 'offPush', 'share'];
function createTodoApi(name) {
  return function todoApi(_ref) {
    var fail = _ref.fail,
      complete = _ref.complete;
    var res = {
      errMsg: "".concat(name, ":fail method '").concat(name, "' not supported")
    };
    isFn(fail) && fail(res);
    isFn(complete) && complete(res);
  };
}
TODOS.forEach(function (name) {
  todoApis[name] = createTodoApi(name);
});
var providers = {
  oauth: ['weixin'],
  share: ['weixin'],
  payment: ['wxpay'],
  push: ['weixin']
};
function getProvider(_ref2) {
  var service = _ref2.service,
    success = _ref2.success,
    fail = _ref2.fail,
    complete = _ref2.complete;
  var res = false;
  if (providers[service]) {
    res = {
      errMsg: 'getProvider:ok',
      service: service,
      provider: providers[service]
    };
    isFn(success) && success(res);
  } else {
    res = {
      errMsg: 'getProvider:fail service not found'
    };
    isFn(fail) && fail(res);
  }
  isFn(complete) && complete(res);
}
var extraApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getProvider: getProvider
});
var getEmitter = function () {
  var Emitter;
  return function getUniEmitter() {
    if (!Emitter) {
      Emitter = new _vue.default();
    }
    return Emitter;
  };
}();
function apply(ctx, method, args) {
  return ctx[method].apply(ctx, args);
}
function $on() {
  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));
}
function $off() {
  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));
}
function $once() {
  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));
}
function $emit() {
  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));
}
var eventApi = /*#__PURE__*/Object.freeze({
  __proto__: null,
  $on: $on,
  $off: $off,
  $once: $once,
  $emit: $emit
});

/**
 * 框架内 try-catch
 */
/**
 * 开发者 try-catch
 */
function tryCatch(fn) {
  return function () {
    try {
      return fn.apply(fn, arguments);
    } catch (e) {
      // TODO
      console.error(e);
    }
  };
}
function getApiCallbacks(params) {
  var apiCallbacks = {};
  for (var name in params) {
    var param = params[name];
    if (isFn(param)) {
      apiCallbacks[name] = tryCatch(param);
      delete params[name];
    }
  }
  return apiCallbacks;
}
var cid;
var cidErrMsg;
var enabled;
function normalizePushMessage(message) {
  try {
    return JSON.parse(message);
  } catch (e) {}
  return message;
}
function invokePushCallback(args) {
  if (args.type === 'enabled') {
    enabled = true;
  } else if (args.type === 'clientId') {
    cid = args.cid;
    cidErrMsg = args.errMsg;
    invokeGetPushCidCallbacks(cid, args.errMsg);
  } else if (args.type === 'pushMsg') {
    var message = {
      type: 'receive',
      data: normalizePushMessage(args.message)
    };
    for (var i = 0; i < onPushMessageCallbacks.length; i++) {
      var callback = onPushMessageCallbacks[i];
      callback(message);
      // 该消息已被阻止
      if (message.stopped) {
        break;
      }
    }
  } else if (args.type === 'click') {
    onPushMessageCallbacks.forEach(function (callback) {
      callback({
        type: 'click',
        data: normalizePushMessage(args.message)
      });
    });
  }
}
var getPushCidCallbacks = [];
function invokeGetPushCidCallbacks(cid, errMsg) {
  getPushCidCallbacks.forEach(function (callback) {
    callback(cid, errMsg);
  });
  getPushCidCallbacks.length = 0;
}
function getPushClientId(args) {
  if (!isPlainObject(args)) {
    args = {};
  }
  var _getApiCallbacks = getApiCallbacks(args),
    success = _getApiCallbacks.success,
    fail = _getApiCallbacks.fail,
    complete = _getApiCallbacks.complete;
  var hasSuccess = isFn(success);
  var hasFail = isFn(fail);
  var hasComplete = isFn(complete);
  Promise.resolve().then(function () {
    if (typeof enabled === 'undefined') {
      enabled = false;
      cid = '';
      cidErrMsg = 'uniPush is not enabled';
    }
    getPushCidCallbacks.push(function (cid, errMsg) {
      var res;
      if (cid) {
        res = {
          errMsg: 'getPushClientId:ok',
          cid: cid
        };
        hasSuccess && success(res);
      } else {
        res = {
          errMsg: 'getPushClientId:fail' + (errMsg ? ' ' + errMsg : '')
        };
        hasFail && fail(res);
      }
      hasComplete && complete(res);
    });
    if (typeof cid !== 'undefined') {
      invokeGetPushCidCallbacks(cid, cidErrMsg);
    }
  });
}
var onPushMessageCallbacks = [];
// 不使用 defineOnApi 实现，是因为 defineOnApi 依赖 UniServiceJSBridge ，该对象目前在小程序上未提供，故简单实现
var onPushMessage = function onPushMessage(fn) {
  if (onPushMessageCallbacks.indexOf(fn) === -1) {
    onPushMessageCallbacks.push(fn);
  }
};
var offPushMessage = function offPushMessage(fn) {
  if (!fn) {
    onPushMessageCallbacks.length = 0;
  } else {
    var index = onPushMessageCallbacks.indexOf(fn);
    if (index > -1) {
      onPushMessageCallbacks.splice(index, 1);
    }
  }
};
var baseInfo = wx.getAppBaseInfo && wx.getAppBaseInfo();
if (!baseInfo) {
  baseInfo = wx.getSystemInfoSync();
}
var host = baseInfo ? baseInfo.host : null;
var shareVideoMessage = host && host.env === 'SAAASDK' ? wx.miniapp.shareVideoMessage : wx.shareVideoMessage;
var api = /*#__PURE__*/Object.freeze({
  __proto__: null,
  shareVideoMessage: shareVideoMessage,
  getPushClientId: getPushClientId,
  onPushMessage: onPushMessage,
  offPushMessage: offPushMessage,
  invokePushCallback: invokePushCallback
});
var mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];
function findVmByVueId(vm, vuePid) {
  var $children = vm.$children;
  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)
  for (var i = $children.length - 1; i >= 0; i--) {
    var childVm = $children[i];
    if (childVm.$scope._$vueId === vuePid) {
      return childVm;
    }
  }
  // 反向递归查找
  var parentVm;
  for (var _i = $children.length - 1; _i >= 0; _i--) {
    parentVm = findVmByVueId($children[_i], vuePid);
    if (parentVm) {
      return parentVm;
    }
  }
}
function initBehavior(options) {
  return Behavior(options);
}
function isPage() {
  return !!this.route;
}
function initRelation(detail) {
  this.triggerEvent('__l', detail);
}
function selectAllComponents(mpInstance, selector, $refs) {
  var components = mpInstance.selectAllComponents(selector) || [];
  components.forEach(function (component) {
    var ref = component.dataset.ref;
    $refs[ref] = component.$vm || toSkip(component);
    {
      if (component.dataset.vueGeneric === 'scoped') {
        component.selectAllComponents('.scoped-ref').forEach(function (scopedComponent) {
          selectAllComponents(scopedComponent, selector, $refs);
        });
      }
    }
  });
}
function syncRefs(refs, newRefs) {
  var oldKeys = (0, _construct2.default)(Set, (0, _toConsumableArray2.default)(Object.keys(refs)));
  var newKeys = Object.keys(newRefs);
  newKeys.forEach(function (key) {
    var oldValue = refs[key];
    var newValue = newRefs[key];
    if (Array.isArray(oldValue) && Array.isArray(newValue) && oldValue.length === newValue.length && newValue.every(function (value) {
      return oldValue.includes(value);
    })) {
      return;
    }
    refs[key] = newValue;
    oldKeys.delete(key);
  });
  oldKeys.forEach(function (key) {
    delete refs[key];
  });
  return refs;
}
function initRefs(vm) {
  var mpInstance = vm.$scope;
  var refs = {};
  Object.defineProperty(vm, '$refs', {
    get: function get() {
      var $refs = {};
      selectAllComponents(mpInstance, '.vue-ref', $refs);
      // TODO 暂不考虑 for 中的 scoped
      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for') || [];
      forComponents.forEach(function (component) {
        var ref = component.dataset.ref;
        if (!$refs[ref]) {
          $refs[ref] = [];
        }
        $refs[ref].push(component.$vm || toSkip(component));
      });
      return syncRefs(refs, $refs);
    }
  });
}
function handleLink(event) {
  var _ref3 = event.detail || event.value,
    vuePid = _ref3.vuePid,
    vueOptions = _ref3.vueOptions; // detail 是微信,value 是百度(dipatch)

  var parentVm;
  if (vuePid) {
    parentVm = findVmByVueId(this.$vm, vuePid);
  }
  if (!parentVm) {
    parentVm = this.$vm;
  }
  vueOptions.parent = parentVm;
}
function markMPComponent(component) {
  // 在 Vue 中标记为小程序组件
  var IS_MP = '__v_isMPComponent';
  Object.defineProperty(component, IS_MP, {
    configurable: true,
    enumerable: false,
    value: true
  });
  return component;
}
function toSkip(obj) {
  var OB = '__ob__';
  var SKIP = '__v_skip';
  if (isObject(obj) && Object.isExtensible(obj)) {
    // 避免被 @vue/composition-api 观测
    Object.defineProperty(obj, OB, {
      configurable: true,
      enumerable: false,
      value: (0, _defineProperty2.default)({}, SKIP, true)
    });
  }
  return obj;
}
var WORKLET_RE = /_(.*)_worklet_factory_/;
function initWorkletMethods(mpMethods, vueMethods) {
  if (vueMethods) {
    Object.keys(vueMethods).forEach(function (name) {
      var matches = name.match(WORKLET_RE);
      if (matches) {
        var workletName = matches[1];
        mpMethods[name] = vueMethods[name];
        mpMethods[workletName] = vueMethods[workletName];
      }
    });
  }
}
var MPPage = Page;
var MPComponent = Component;
var customizeRE = /:/g;
var customize = cached(function (str) {
  return camelize(str.replace(customizeRE, '-'));
});
function initTriggerEvent(mpInstance) {
  var oldTriggerEvent = mpInstance.triggerEvent;
  var newTriggerEvent = function newTriggerEvent(event) {
    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }
    // 事件名统一转驼峰格式，仅处理：当前组件为 vue 组件、当前组件为 vue 组件子组件
    if (this.$vm || this.dataset && this.dataset.comType) {
      event = customize(event);
    } else {
      // 针对微信/QQ小程序单独补充驼峰格式事件，以兼容历史项目
      var newEvent = customize(event);
      if (newEvent !== event) {
        oldTriggerEvent.apply(this, [newEvent].concat(args));
      }
    }
    return oldTriggerEvent.apply(this, [event].concat(args));
  };
  try {
    // 京东小程序 triggerEvent 为只读
    mpInstance.triggerEvent = newTriggerEvent;
  } catch (error) {
    mpInstance._triggerEvent = newTriggerEvent;
  }
}
function initHook(name, options, isComponent) {
  var oldHook = options[name];
  options[name] = function () {
    markMPComponent(this);
    initTriggerEvent(this);
    if (oldHook) {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return oldHook.apply(this, args);
    }
  };
}
if (!MPPage.__$wrappered) {
  MPPage.__$wrappered = true;
  Page = function Page() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    initHook('onLoad', options);
    return MPPage(options);
  };
  Page.after = MPPage.after;
  Component = function Component() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    initHook('created', options);
    return MPComponent(options);
  };
}
var PAGE_EVENT_HOOKS = ['onPullDownRefresh', 'onReachBottom', 'onAddToFavorites', 'onShareTimeline', 'onShareAppMessage', 'onPageScroll', 'onResize', 'onTabItemTap'];
function initMocks(vm, mocks) {
  var mpInstance = vm.$mp[vm.mpType];
  mocks.forEach(function (mock) {
    if (hasOwn(mpInstance, mock)) {
      vm[mock] = mpInstance[mock];
    }
  });
}
function hasHook(hook, vueOptions) {
  if (!vueOptions) {
    return true;
  }
  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {
    return true;
  }
  vueOptions = vueOptions.default || vueOptions;
  if (isFn(vueOptions)) {
    if (isFn(vueOptions.extendOptions[hook])) {
      return true;
    }
    if (vueOptions.super && vueOptions.super.options && Array.isArray(vueOptions.super.options[hook])) {
      return true;
    }
    return false;
  }
  if (isFn(vueOptions[hook]) || Array.isArray(vueOptions[hook])) {
    return true;
  }
  var mixins = vueOptions.mixins;
  if (Array.isArray(mixins)) {
    return !!mixins.find(function (mixin) {
      return hasHook(hook, mixin);
    });
  }
}
function initHooks(mpOptions, hooks, vueOptions) {
  hooks.forEach(function (hook) {
    if (hasHook(hook, vueOptions)) {
      mpOptions[hook] = function (args) {
        return this.$vm && this.$vm.__call_hook(hook, args);
      };
    }
  });
}
function initUnknownHooks(mpOptions, vueOptions) {
  var excludes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  findHooks(vueOptions).forEach(function (hook) {
    return initHook$1(mpOptions, hook, excludes);
  });
}
function findHooks(vueOptions) {
  var hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  if (vueOptions) {
    Object.keys(vueOptions).forEach(function (name) {
      if (name.indexOf('on') === 0 && isFn(vueOptions[name])) {
        hooks.push(name);
      }
    });
  }
  return hooks;
}
function initHook$1(mpOptions, hook, excludes) {
  if (excludes.indexOf(hook) === -1 && !hasOwn(mpOptions, hook)) {
    mpOptions[hook] = function (args) {
      return this.$vm && this.$vm.__call_hook(hook, args);
    };
  }
}
function initVueComponent(Vue, vueOptions) {
  vueOptions = vueOptions.default || vueOptions;
  var VueComponent;
  if (isFn(vueOptions)) {
    VueComponent = vueOptions;
  } else {
    VueComponent = Vue.extend(vueOptions);
  }
  vueOptions = VueComponent.options;
  return [VueComponent, vueOptions];
}
function initSlots(vm, vueSlots) {
  if (Array.isArray(vueSlots) && vueSlots.length) {
    var $slots = Object.create(null);
    vueSlots.forEach(function (slotName) {
      $slots[slotName] = true;
    });
    vm.$scopedSlots = vm.$slots = $slots;
  }
}
function initVueIds(vueIds, mpInstance) {
  vueIds = (vueIds || '').split(',');
  var len = vueIds.length;
  if (len === 1) {
    mpInstance._$vueId = vueIds[0];
  } else if (len === 2) {
    mpInstance._$vueId = vueIds[0];
    mpInstance._$vuePid = vueIds[1];
  }
}
function initData(vueOptions, context) {
  var data = vueOptions.data || {};
  var methods = vueOptions.methods || {};
  if (typeof data === 'function') {
    try {
      data = data.call(context); // 支持 Vue.prototype 上挂的数据
    } catch (e) {
      if (Object({"NODE_ENV":"development","VUE_APP_DARK_MODE":"false","VUE_APP_NAME":"wx_zhimiao","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);
      }
    }
  } else {
    try {
      // 对 data 格式化
      data = JSON.parse(JSON.stringify(data));
    } catch (e) {}
  }
  if (!isPlainObject(data)) {
    data = {};
  }
  Object.keys(methods).forEach(function (methodName) {
    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {
      data[methodName] = methods[methodName];
    }
  });
  return data;
}
var PROP_TYPES = [String, Number, Boolean, Object, Array, null];
function createObserver(name) {
  return function observer(newVal, oldVal) {
    if (this.$vm) {
      this.$vm[name] = newVal; // 为了触发其他非 render watcher
    }
  };
}

function initBehaviors(vueOptions, initBehavior) {
  var vueBehaviors = vueOptions.behaviors;
  var vueExtends = vueOptions.extends;
  var vueMixins = vueOptions.mixins;
  var vueProps = vueOptions.props;
  if (!vueProps) {
    vueOptions.props = vueProps = [];
  }
  var behaviors = [];
  if (Array.isArray(vueBehaviors)) {
    vueBehaviors.forEach(function (behavior) {
      behaviors.push(behavior.replace('uni://', "wx".concat("://")));
      if (behavior === 'uni://form-field') {
        if (Array.isArray(vueProps)) {
          vueProps.push('name');
          vueProps.push('value');
        } else {
          vueProps.name = {
            type: String,
            default: ''
          };
          vueProps.value = {
            type: [String, Number, Boolean, Array, Object, Date],
            default: ''
          };
        }
      }
    });
  }
  if (isPlainObject(vueExtends) && vueExtends.props) {
    behaviors.push(initBehavior({
      properties: initProperties(vueExtends.props, true)
    }));
  }
  if (Array.isArray(vueMixins)) {
    vueMixins.forEach(function (vueMixin) {
      if (isPlainObject(vueMixin) && vueMixin.props) {
        behaviors.push(initBehavior({
          properties: initProperties(vueMixin.props, true)
        }));
      }
    });
  }
  return behaviors;
}
function parsePropType(key, type, defaultValue, file) {
  // [String]=>String
  if (Array.isArray(type) && type.length === 1) {
    return type[0];
  }
  return type;
}
function initProperties(props) {
  var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var options = arguments.length > 3 ? arguments[3] : undefined;
  var properties = {};
  if (!isBehavior) {
    properties.vueId = {
      type: String,
      value: ''
    };
    {
      if (options.virtualHost) {
        properties.virtualHostStyle = {
          type: null,
          value: ''
        };
        properties.virtualHostClass = {
          type: null,
          value: ''
        };
      }
    }
    // scopedSlotsCompiler auto
    properties.scopedSlotsCompiler = {
      type: String,
      value: ''
    };
    properties.vueSlots = {
      // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots
      type: null,
      value: [],
      observer: function observer(newVal, oldVal) {
        var $slots = Object.create(null);
        newVal.forEach(function (slotName) {
          $slots[slotName] = true;
        });
        this.setData({
          $slots: $slots
        });
      }
    };
  }
  if (Array.isArray(props)) {
    // ['title']
    props.forEach(function (key) {
      properties[key] = {
        type: null,
        observer: createObserver(key)
      };
    });
  } else if (isPlainObject(props)) {
    // {title:{type:String,default:''},content:String}
    Object.keys(props).forEach(function (key) {
      var opts = props[key];
      if (isPlainObject(opts)) {
        // title:{type:String,default:''}
        var value = opts.default;
        if (isFn(value)) {
          value = value();
        }
        opts.type = parsePropType(key, opts.type);
        properties[key] = {
          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,
          value: value,
          observer: createObserver(key)
        };
      } else {
        // content:String
        var type = parsePropType(key, opts);
        properties[key] = {
          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,
          observer: createObserver(key)
        };
      }
    });
  }
  return properties;
}
function wrapper$1(event) {
  // TODO 又得兼容 mpvue 的 mp 对象
  try {
    event.mp = JSON.parse(JSON.stringify(event));
  } catch (e) {}
  event.stopPropagation = noop;
  event.preventDefault = noop;
  event.target = event.target || {};
  if (!hasOwn(event, 'detail')) {
    event.detail = {};
  }
  if (hasOwn(event, 'markerId')) {
    event.detail = (0, _typeof2.default)(event.detail) === 'object' ? event.detail : {};
    event.detail.markerId = event.markerId;
  }
  if (isPlainObject(event.detail)) {
    event.target = Object.assign({}, event.target, event.detail);
  }
  return event;
}
function getExtraValue(vm, dataPathsArray) {
  var context = vm;
  dataPathsArray.forEach(function (dataPathArray) {
    var dataPath = dataPathArray[0];
    var value = dataPathArray[2];
    if (dataPath || typeof value !== 'undefined') {
      // ['','',index,'disable']
      var propPath = dataPathArray[1];
      var valuePath = dataPathArray[3];
      var vFor;
      if (Number.isInteger(dataPath)) {
        vFor = dataPath;
      } else if (!dataPath) {
        vFor = context;
      } else if (typeof dataPath === 'string' && dataPath) {
        if (dataPath.indexOf('#s#') === 0) {
          vFor = dataPath.substr(3);
        } else {
          vFor = vm.__get_value(dataPath, context);
        }
      }
      if (Number.isInteger(vFor)) {
        context = value;
      } else if (!propPath) {
        context = vFor[value];
      } else {
        if (Array.isArray(vFor)) {
          context = vFor.find(function (vForItem) {
            return vm.__get_value(propPath, vForItem) === value;
          });
        } else if (isPlainObject(vFor)) {
          context = Object.keys(vFor).find(function (vForKey) {
            return vm.__get_value(propPath, vFor[vForKey]) === value;
          });
        } else {
          console.error('v-for 暂不支持循环数据：', vFor);
        }
      }
      if (valuePath) {
        context = vm.__get_value(valuePath, context);
      }
    }
  });
  return context;
}
function processEventExtra(vm, extra, event, __args__) {
  var extraObj = {};
  if (Array.isArray(extra) && extra.length) {
    /**
     *[
     *    ['data.items', 'data.id', item.data.id],
     *    ['metas', 'id', meta.id]
     *],
     *[
     *    ['data.items', 'data.id', item.data.id],
     *    ['metas', 'id', meta.id]
     *],
     *'test'
     */
    extra.forEach(function (dataPath, index) {
      if (typeof dataPath === 'string') {
        if (!dataPath) {
          // model,prop.sync
          extraObj['$' + index] = vm;
        } else {
          if (dataPath === '$event') {
            // $event
            extraObj['$' + index] = event;
          } else if (dataPath === 'arguments') {
            extraObj['$' + index] = event.detail ? event.detail.__args__ || __args__ : __args__;
          } else if (dataPath.indexOf('$event.') === 0) {
            // $event.target.value
            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);
          } else {
            extraObj['$' + index] = vm.__get_value(dataPath);
          }
        }
      } else {
        extraObj['$' + index] = getExtraValue(vm, dataPath);
      }
    });
  }
  return extraObj;
}
function getObjByArray(arr) {
  var obj = {};
  for (var i = 1; i < arr.length; i++) {
    var element = arr[i];
    obj[element[0]] = element[1];
  }
  return obj;
}
function processEventArgs(vm, event) {
  var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var isCustom = arguments.length > 4 ? arguments[4] : undefined;
  var methodName = arguments.length > 5 ? arguments[5] : undefined;
  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象

  // fixed 用户直接触发 mpInstance.triggerEvent
  var __args__ = isPlainObject(event.detail) ? event.detail.__args__ || [event.detail] : [event.detail];
  if (isCustom) {
    // 自定义事件
    isCustomMPEvent = event.currentTarget && event.currentTarget.dataset && event.currentTarget.dataset.comType === 'wx';
    if (!args.length) {
      // 无参数，直接传入 event 或 detail 数组
      if (isCustomMPEvent) {
        return [event];
      }
      return __args__;
    }
  }
  var extraObj = processEventExtra(vm, extra, event, __args__);
  var ret = [];
  args.forEach(function (arg) {
    if (arg === '$event') {
      if (methodName === '__set_model' && !isCustom) {
        // input v-model value
        ret.push(event.target.value);
      } else {
        if (isCustom && !isCustomMPEvent) {
          ret.push(__args__[0]);
        } else {
          // wxcomponent 组件或内置组件
          ret.push(event);
        }
      }
    } else {
      if (Array.isArray(arg) && arg[0] === 'o') {
        ret.push(getObjByArray(arg));
      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {
        ret.push(extraObj[arg]);
      } else {
        ret.push(arg);
      }
    }
  });
  return ret;
}
var ONCE = '~';
var CUSTOM = '^';
function isMatchEventType(eventType, optType) {
  return eventType === optType || optType === 'regionchange' && (eventType === 'begin' || eventType === 'end');
}
function getContextVm(vm) {
  var $parent = vm.$parent;
  // 父组件是 scoped slots 或者其他自定义组件时继续查找
  while ($parent && $parent.$parent && ($parent.$options.generic || $parent.$parent.$options.generic || $parent.$scope._$vuePid)) {
    $parent = $parent.$parent;
  }
  return $parent && $parent.$parent;
}
function handleEvent(event) {
  var _this2 = this;
  event = wrapper$1(event);

  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]
  var dataset = (event.currentTarget || event.target).dataset;
  if (!dataset) {
    return console.warn('事件信息不存在');
  }
  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰
  if (!eventOpts) {
    return console.warn('事件信息不存在');
  }

  // [['handle',[1,2,a]],['handle1',[1,2,a]]]
  var eventType = event.type;
  var ret = [];
  eventOpts.forEach(function (eventOpt) {
    var type = eventOpt[0];
    var eventsArray = eventOpt[1];
    var isCustom = type.charAt(0) === CUSTOM;
    type = isCustom ? type.slice(1) : type;
    var isOnce = type.charAt(0) === ONCE;
    type = isOnce ? type.slice(1) : type;
    if (eventsArray && isMatchEventType(eventType, type)) {
      eventsArray.forEach(function (eventArray) {
        var methodName = eventArray[0];
        if (methodName) {
          var handlerCtx = _this2.$vm;
          if (handlerCtx.$options.generic) {
            // mp-weixin,mp-toutiao 抽象节点模拟 scoped slots
            handlerCtx = getContextVm(handlerCtx) || handlerCtx;
          }
          if (methodName === '$emit') {
            handlerCtx.$emit.apply(handlerCtx, processEventArgs(_this2.$vm, event, eventArray[1], eventArray[2], isCustom, methodName));
            return;
          }
          var handler = handlerCtx[methodName];
          if (!isFn(handler)) {
            var _type = _this2.$vm.mpType === 'page' ? 'Page' : 'Component';
            var path = _this2.route || _this2.is;
            throw new Error("".concat(_type, " \"").concat(path, "\" does not have a method \"").concat(methodName, "\""));
          }
          if (isOnce) {
            if (handler.once) {
              return;
            }
            handler.once = true;
          }
          var params = processEventArgs(_this2.$vm, event, eventArray[1], eventArray[2], isCustom, methodName);
          params = Array.isArray(params) ? params : [];
          // 参数尾部增加原始事件对象用于复杂表达式内获取额外数据
          if (/=\s*\S+\.eventParams\s*\|\|\s*\S+\[['"]event-params['"]\]/.test(handler.toString())) {
            // eslint-disable-next-line no-sparse-arrays
            params = params.concat([,,,,,,,,,, event]);
          }
          ret.push(handler.apply(handlerCtx, params));
        }
      });
    }
  });
  if (eventType === 'input' && ret.length === 1 && typeof ret[0] !== 'undefined') {
    return ret[0];
  }
}
var eventChannels = {};
var eventChannelStack = [];
function getEventChannel(id) {
  if (id) {
    var eventChannel = eventChannels[id];
    delete eventChannels[id];
    return eventChannel;
  }
  return eventChannelStack.shift();
}
var hooks = ['onShow', 'onHide', 'onError', 'onPageNotFound', 'onThemeChange', 'onUnhandledRejection'];
function initEventChannel() {
  _vue.default.prototype.getOpenerEventChannel = function () {
    // 微信小程序使用自身getOpenerEventChannel
    {
      return this.$scope.getOpenerEventChannel();
    }
  };
  var callHook = _vue.default.prototype.__call_hook;
  _vue.default.prototype.__call_hook = function (hook, args) {
    if (hook === 'onLoad' && args && args.__id__) {
      this.__eventChannel__ = getEventChannel(args.__id__);
      delete args.__id__;
    }
    return callHook.call(this, hook, args);
  };
}
function initScopedSlotsParams() {
  var center = {};
  var parents = {};
  _vue.default.prototype.$hasScopedSlotsParams = function (vueId) {
    var has = center[vueId];
    if (!has) {
      parents[vueId] = this;
      this.$on('hook:destroyed', function () {
        delete parents[vueId];
      });
    }
    return has;
  };
  _vue.default.prototype.$getScopedSlotsParams = function (vueId, name, key) {
    var data = center[vueId];
    if (data) {
      var object = data[name] || {};
      return key ? object[key] : object;
    } else {
      parents[vueId] = this;
      this.$on('hook:destroyed', function () {
        delete parents[vueId];
      });
    }
  };
  _vue.default.prototype.$setScopedSlotsParams = function (name, value) {
    var vueIds = this.$options.propsData.vueId;
    if (vueIds) {
      var vueId = vueIds.split(',')[0];
      var object = center[vueId] = center[vueId] || {};
      object[name] = value;
      if (parents[vueId]) {
        parents[vueId].$forceUpdate();
      }
    }
  };
  _vue.default.mixin({
    destroyed: function destroyed() {
      var propsData = this.$options.propsData;
      var vueId = propsData && propsData.vueId;
      if (vueId) {
        delete center[vueId];
        delete parents[vueId];
      }
    }
  });
}
function parseBaseApp(vm, _ref4) {
  var mocks = _ref4.mocks,
    initRefs = _ref4.initRefs;
  initEventChannel();
  {
    initScopedSlotsParams();
  }
  if (vm.$options.store) {
    _vue.default.prototype.$store = vm.$options.store;
  }
  uniIdMixin(_vue.default);
  _vue.default.prototype.mpHost = "mp-weixin";
  _vue.default.mixin({
    beforeCreate: function beforeCreate() {
      if (!this.$options.mpType) {
        return;
      }
      this.mpType = this.$options.mpType;
      this.$mp = (0, _defineProperty2.default)({
        data: {}
      }, this.mpType, this.$options.mpInstance);
      this.$scope = this.$options.mpInstance;
      delete this.$options.mpType;
      delete this.$options.mpInstance;
      if (this.mpType === 'page' && typeof getApp === 'function') {
        // hack vue-i18n
        var app = getApp();
        if (app.$vm && app.$vm.$i18n) {
          this._i18n = app.$vm.$i18n;
        }
      }
      if (this.mpType !== 'app') {
        initRefs(this);
        initMocks(this, mocks);
      }
    }
  });
  var appOptions = {
    onLaunch: function onLaunch(args) {
      if (this.$vm) {
        // 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前
        return;
      }
      {
        if (wx.canIUse && !wx.canIUse('nextTick')) {
          // 事实 上2.2.3 即可，简单使用 2.3.0 的 nextTick 判断
          console.error('当前微信基础库版本过低，请将 微信开发者工具-详情-项目设置-调试基础库版本 更换为`2.3.0`以上');
        }
      }
      this.$vm = vm;
      this.$vm.$mp = {
        app: this
      };
      this.$vm.$scope = this;
      // vm 上也挂载 globalData
      this.$vm.globalData = this.globalData;
      this.$vm._isMounted = true;
      this.$vm.__call_hook('mounted', args);
      this.$vm.__call_hook('onLaunch', args);
    }
  };

  // 兼容旧版本 globalData
  appOptions.globalData = vm.$options.globalData || {};
  // 将 methods 中的方法挂在 getApp() 中
  var methods = vm.$options.methods;
  if (methods) {
    Object.keys(methods).forEach(function (name) {
      appOptions[name] = methods[name];
    });
  }
  initAppLocale(_vue.default, vm, normalizeLocale(wx.getSystemInfoSync().language) || LOCALE_EN);
  initHooks(appOptions, hooks);
  initUnknownHooks(appOptions, vm.$options);
  return appOptions;
}
function parseApp(vm) {
  return parseBaseApp(vm, {
    mocks: mocks,
    initRefs: initRefs
  });
}
function createApp(vm) {
  App(parseApp(vm));
  return vm;
}
var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function encodeReserveReplacer(c) {
  return '%' + c.charCodeAt(0).toString(16);
};
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function encode(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};
function stringifyQuery(obj) {
  var encodeStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : encode;
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];
    if (val === undefined) {
      return '';
    }
    if (val === null) {
      return encodeStr(key);
    }
    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }
        if (val2 === null) {
          result.push(encodeStr(key));
        } else {
          result.push(encodeStr(key) + '=' + encodeStr(val2));
        }
      });
      return result.join('&');
    }
    return encodeStr(key) + '=' + encodeStr(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?".concat(res) : '';
}
function parseBaseComponent(vueComponentOptions) {
  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
    isPage = _ref5.isPage,
    initRelation = _ref5.initRelation;
  var needVueOptions = arguments.length > 2 ? arguments[2] : undefined;
  var _initVueComponent = initVueComponent(_vue.default, vueComponentOptions),
    _initVueComponent2 = (0, _slicedToArray2.default)(_initVueComponent, 2),
    VueComponent = _initVueComponent2[0],
    vueOptions = _initVueComponent2[1];
  var options = _objectSpread({
    multipleSlots: true,
    addGlobalClass: true
  }, vueOptions.options || {});
  {
    // 微信 multipleSlots 部分情况有 bug，导致内容顺序错乱 如 u-list，提供覆盖选项
    if (vueOptions['mp-weixin'] && vueOptions['mp-weixin'].options) {
      Object.assign(options, vueOptions['mp-weixin'].options);
    }
  }
  var componentOptions = {
    options: options,
    data: initData(vueOptions, _vue.default.prototype),
    behaviors: initBehaviors(vueOptions, initBehavior),
    properties: initProperties(vueOptions.props, false, vueOptions.__file, options),
    lifetimes: {
      attached: function attached() {
        var properties = this.properties;
        var options = {
          mpType: isPage.call(this) ? 'page' : 'component',
          mpInstance: this,
          propsData: properties
        };
        initVueIds(properties.vueId, this);

        // 处理父子关系
        initRelation.call(this, {
          vuePid: this._$vuePid,
          vueOptions: options
        });

        // 初始化 vue 实例
        this.$vm = new VueComponent(options);

        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）
        initSlots(this.$vm, properties.vueSlots);

        // 触发首次 setData
        this.$vm.$mount();
      },
      ready: function ready() {
        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发
        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800
        if (this.$vm) {
          this.$vm._isMounted = true;
          this.$vm.__call_hook('mounted');
          this.$vm.__call_hook('onReady');
        }
      },
      detached: function detached() {
        this.$vm && this.$vm.$destroy();
      }
    },
    pageLifetimes: {
      show: function show(args) {
        this.$vm && this.$vm.__call_hook('onPageShow', args);
      },
      hide: function hide() {
        this.$vm && this.$vm.__call_hook('onPageHide');
      },
      resize: function resize(size) {
        this.$vm && this.$vm.__call_hook('onPageResize', size);
      }
    },
    methods: {
      __l: handleLink,
      __e: handleEvent
    }
  };
  // externalClasses
  if (vueOptions.externalClasses) {
    componentOptions.externalClasses = vueOptions.externalClasses;
  }
  if (Array.isArray(vueOptions.wxsCallMethods)) {
    vueOptions.wxsCallMethods.forEach(function (callMethod) {
      componentOptions.methods[callMethod] = function (args) {
        return this.$vm[callMethod](args);
      };
    });
  }
  if (needVueOptions) {
    return [componentOptions, vueOptions, VueComponent];
  }
  if (isPage) {
    return componentOptions;
  }
  return [componentOptions, VueComponent];
}
function parseComponent(vueComponentOptions, needVueOptions) {
  return parseBaseComponent(vueComponentOptions, {
    isPage: isPage,
    initRelation: initRelation
  }, needVueOptions);
}
var hooks$1 = ['onShow', 'onHide', 'onUnload'];
hooks$1.push.apply(hooks$1, PAGE_EVENT_HOOKS);
function parseBasePage(vuePageOptions) {
  var _parseComponent = parseComponent(vuePageOptions, true),
    _parseComponent2 = (0, _slicedToArray2.default)(_parseComponent, 2),
    pageOptions = _parseComponent2[0],
    vueOptions = _parseComponent2[1];
  initHooks(pageOptions.methods, hooks$1, vueOptions);
  pageOptions.methods.onLoad = function (query) {
    this.options = query;
    var copyQuery = Object.assign({}, query);
    delete copyQuery.__id__;
    this.$page = {
      fullPath: '/' + (this.route || this.is) + stringifyQuery(copyQuery)
    };
    this.$vm.$mp.query = query; // 兼容 mpvue
    this.$vm.__call_hook('onLoad', query);
  };
  {
    initUnknownHooks(pageOptions.methods, vuePageOptions, ['onReady']);
  }
  {
    initWorkletMethods(pageOptions.methods, vueOptions.methods);
  }
  return pageOptions;
}
function parsePage(vuePageOptions) {
  return parseBasePage(vuePageOptions);
}
function createPage(vuePageOptions) {
  {
    return Component(parsePage(vuePageOptions));
  }
}
function createComponent(vueOptions) {
  {
    return Component(parseComponent(vueOptions));
  }
}
function createSubpackageApp(vm) {
  var appOptions = parseApp(vm);
  var app = getApp({
    allowDefault: true
  });
  vm.$scope = app;
  var globalData = app.globalData;
  if (globalData) {
    Object.keys(appOptions.globalData).forEach(function (name) {
      if (!hasOwn(globalData, name)) {
        globalData[name] = appOptions.globalData[name];
      }
    });
  }
  Object.keys(appOptions).forEach(function (name) {
    if (!hasOwn(app, name)) {
      app[name] = appOptions[name];
    }
  });
  if (isFn(appOptions.onShow) && wx.onAppShow) {
    wx.onAppShow(function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      vm.__call_hook('onShow', args);
    });
  }
  if (isFn(appOptions.onHide) && wx.onAppHide) {
    wx.onAppHide(function () {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      vm.__call_hook('onHide', args);
    });
  }
  if (isFn(appOptions.onLaunch)) {
    var args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();
    vm.__call_hook('onLaunch', args);
  }
  return vm;
}
function createPlugin(vm) {
  var appOptions = parseApp(vm);
  if (isFn(appOptions.onShow) && wx.onAppShow) {
    wx.onAppShow(function () {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      vm.__call_hook('onShow', args);
    });
  }
  if (isFn(appOptions.onHide) && wx.onAppHide) {
    wx.onAppHide(function () {
      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
        args[_key8] = arguments[_key8];
      }
      vm.__call_hook('onHide', args);
    });
  }
  if (isFn(appOptions.onLaunch)) {
    var args = wx.getLaunchOptionsSync && wx.getLaunchOptionsSync();
    vm.__call_hook('onLaunch', args);
  }
  return vm;
}
todos.forEach(function (todoApi) {
  protocols[todoApi] = false;
});
canIUses.forEach(function (canIUseApi) {
  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name : canIUseApi;
  if (!wx.canIUse(apiName)) {
    protocols[canIUseApi] = false;
  }
});
var uni = {};
if (typeof Proxy !== 'undefined' && "mp-weixin" !== 'app-plus') {
  uni = new Proxy({}, {
    get: function get(target, name) {
      if (hasOwn(target, name)) {
        return target[name];
      }
      if (baseApi[name]) {
        return baseApi[name];
      }
      if (api[name]) {
        return promisify(name, api[name]);
      }
      {
        if (extraApi[name]) {
          return promisify(name, extraApi[name]);
        }
        if (todoApis[name]) {
          return promisify(name, todoApis[name]);
        }
      }
      if (eventApi[name]) {
        return eventApi[name];
      }
      return promisify(name, wrapper(name, wx[name]));
    },
    set: function set(target, name, value) {
      target[name] = value;
      return true;
    }
  });
} else {
  Object.keys(baseApi).forEach(function (name) {
    uni[name] = baseApi[name];
  });
  {
    Object.keys(todoApis).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
    Object.keys(extraApi).forEach(function (name) {
      uni[name] = promisify(name, todoApis[name]);
    });
  }
  Object.keys(eventApi).forEach(function (name) {
    uni[name] = eventApi[name];
  });
  Object.keys(api).forEach(function (name) {
    uni[name] = promisify(name, api[name]);
  });
  Object.keys(wx).forEach(function (name) {
    if (hasOwn(wx, name) || hasOwn(protocols, name)) {
      uni[name] = promisify(name, wrapper(name, wx[name]));
    }
  });
}
wx.createApp = createApp;
wx.createPage = createPage;
wx.createComponent = createComponent;
wx.createSubpackageApp = createSubpackageApp;
wx.createPlugin = createPlugin;
var uni$1 = uni;
var _default = uni$1;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/wx.js */ 1)["default"], __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))

/***/ }),

/***/ 20:
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 21:
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 22:
/*!*************************************************************!*\
  !*** ./node_modules/@dcloudio/uni-i18n/dist/uni-i18n.es.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni, global) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LOCALE_ZH_HANT = exports.LOCALE_ZH_HANS = exports.LOCALE_FR = exports.LOCALE_ES = exports.LOCALE_EN = exports.I18n = exports.Formatter = void 0;
exports.compileI18nJsonStr = compileI18nJsonStr;
exports.hasI18nJson = hasI18nJson;
exports.initVueI18n = initVueI18n;
exports.isI18nStr = isI18nStr;
exports.isString = void 0;
exports.normalizeLocale = normalizeLocale;
exports.parseI18nJson = parseI18nJson;
exports.resolveLocale = resolveLocale;
var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ 5));
var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 23));
var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ 24));
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ 13));
var isArray = Array.isArray;
var isObject = function isObject(val) {
  return val !== null && (0, _typeof2.default)(val) === 'object';
};
var defaultDelimiters = ['{', '}'];
var BaseFormatter = /*#__PURE__*/function () {
  function BaseFormatter() {
    (0, _classCallCheck2.default)(this, BaseFormatter);
    this._caches = Object.create(null);
  }
  (0, _createClass2.default)(BaseFormatter, [{
    key: "interpolate",
    value: function interpolate(message, values) {
      var delimiters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultDelimiters;
      if (!values) {
        return [message];
      }
      var tokens = this._caches[message];
      if (!tokens) {
        tokens = parse(message, delimiters);
        this._caches[message] = tokens;
      }
      return compile(tokens, values);
    }
  }]);
  return BaseFormatter;
}();
exports.Formatter = BaseFormatter;
var RE_TOKEN_LIST_VALUE = /^(?:\d)+/;
var RE_TOKEN_NAMED_VALUE = /^(?:\w)+/;
function parse(format, _ref) {
  var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
    startDelimiter = _ref2[0],
    endDelimiter = _ref2[1];
  var tokens = [];
  var position = 0;
  var text = '';
  while (position < format.length) {
    var char = format[position++];
    if (char === startDelimiter) {
      if (text) {
        tokens.push({
          type: 'text',
          value: text
        });
      }
      text = '';
      var sub = '';
      char = format[position++];
      while (char !== undefined && char !== endDelimiter) {
        sub += char;
        char = format[position++];
      }
      var isClosed = char === endDelimiter;
      var type = RE_TOKEN_LIST_VALUE.test(sub) ? 'list' : isClosed && RE_TOKEN_NAMED_VALUE.test(sub) ? 'named' : 'unknown';
      tokens.push({
        value: sub,
        type: type
      });
    }
    //  else if (char === '%') {
    //   // when found rails i18n syntax, skip text capture
    //   if (format[position] !== '{') {
    //     text += char
    //   }
    // }
    else {
      text += char;
    }
  }
  text && tokens.push({
    type: 'text',
    value: text
  });
  return tokens;
}
function compile(tokens, values) {
  var compiled = [];
  var index = 0;
  var mode = isArray(values) ? 'list' : isObject(values) ? 'named' : 'unknown';
  if (mode === 'unknown') {
    return compiled;
  }
  while (index < tokens.length) {
    var token = tokens[index];
    switch (token.type) {
      case 'text':
        compiled.push(token.value);
        break;
      case 'list':
        compiled.push(values[parseInt(token.value, 10)]);
        break;
      case 'named':
        if (mode === 'named') {
          compiled.push(values[token.value]);
        } else {
          if (true) {
            console.warn("Type of token '".concat(token.type, "' and format of value '").concat(mode, "' don't match!"));
          }
        }
        break;
      case 'unknown':
        if (true) {
          console.warn("Detect 'unknown' type of token!");
        }
        break;
    }
    index++;
  }
  return compiled;
}
var LOCALE_ZH_HANS = 'zh-Hans';
exports.LOCALE_ZH_HANS = LOCALE_ZH_HANS;
var LOCALE_ZH_HANT = 'zh-Hant';
exports.LOCALE_ZH_HANT = LOCALE_ZH_HANT;
var LOCALE_EN = 'en';
exports.LOCALE_EN = LOCALE_EN;
var LOCALE_FR = 'fr';
exports.LOCALE_FR = LOCALE_FR;
var LOCALE_ES = 'es';
exports.LOCALE_ES = LOCALE_ES;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var hasOwn = function hasOwn(val, key) {
  return hasOwnProperty.call(val, key);
};
var defaultFormatter = new BaseFormatter();
function include(str, parts) {
  return !!parts.find(function (part) {
    return str.indexOf(part) !== -1;
  });
}
function startsWith(str, parts) {
  return parts.find(function (part) {
    return str.indexOf(part) === 0;
  });
}
function normalizeLocale(locale, messages) {
  if (!locale) {
    return;
  }
  locale = locale.trim().replace(/_/g, '-');
  if (messages && messages[locale]) {
    return locale;
  }
  locale = locale.toLowerCase();
  if (locale.indexOf('zh') === 0) {
    if (locale.indexOf('-hans') > -1) {
      return LOCALE_ZH_HANS;
    }
    if (locale.indexOf('-hant') > -1) {
      return LOCALE_ZH_HANT;
    }
    if (include(locale, ['-tw', '-hk', '-mo', '-cht'])) {
      return LOCALE_ZH_HANT;
    }
    return LOCALE_ZH_HANS;
  }
  var lang = startsWith(locale, [LOCALE_EN, LOCALE_FR, LOCALE_ES]);
  if (lang) {
    return lang;
  }
}
var I18n = /*#__PURE__*/function () {
  function I18n(_ref3) {
    var locale = _ref3.locale,
      fallbackLocale = _ref3.fallbackLocale,
      messages = _ref3.messages,
      watcher = _ref3.watcher,
      formater = _ref3.formater;
    (0, _classCallCheck2.default)(this, I18n);
    this.locale = LOCALE_EN;
    this.fallbackLocale = LOCALE_EN;
    this.message = {};
    this.messages = {};
    this.watchers = [];
    if (fallbackLocale) {
      this.fallbackLocale = fallbackLocale;
    }
    this.formater = formater || defaultFormatter;
    this.messages = messages || {};
    this.setLocale(locale || LOCALE_EN);
    if (watcher) {
      this.watchLocale(watcher);
    }
  }
  (0, _createClass2.default)(I18n, [{
    key: "setLocale",
    value: function setLocale(locale) {
      var _this = this;
      var oldLocale = this.locale;
      this.locale = normalizeLocale(locale, this.messages) || this.fallbackLocale;
      if (!this.messages[this.locale]) {
        // 可能初始化时不存在
        this.messages[this.locale] = {};
      }
      this.message = this.messages[this.locale];
      // 仅发生变化时，通知
      if (oldLocale !== this.locale) {
        this.watchers.forEach(function (watcher) {
          watcher(_this.locale, oldLocale);
        });
      }
    }
  }, {
    key: "getLocale",
    value: function getLocale() {
      return this.locale;
    }
  }, {
    key: "watchLocale",
    value: function watchLocale(fn) {
      var _this2 = this;
      var index = this.watchers.push(fn) - 1;
      return function () {
        _this2.watchers.splice(index, 1);
      };
    }
  }, {
    key: "add",
    value: function add(locale, message) {
      var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var curMessages = this.messages[locale];
      if (curMessages) {
        if (override) {
          Object.assign(curMessages, message);
        } else {
          Object.keys(message).forEach(function (key) {
            if (!hasOwn(curMessages, key)) {
              curMessages[key] = message[key];
            }
          });
        }
      } else {
        this.messages[locale] = message;
      }
    }
  }, {
    key: "f",
    value: function f(message, values, delimiters) {
      return this.formater.interpolate(message, values, delimiters).join('');
    }
  }, {
    key: "t",
    value: function t(key, locale, values) {
      var message = this.message;
      if (typeof locale === 'string') {
        locale = normalizeLocale(locale, this.messages);
        locale && (message = this.messages[locale]);
      } else {
        values = locale;
      }
      if (!hasOwn(message, key)) {
        console.warn("Cannot translate the value of keypath ".concat(key, ". Use the value of keypath as default."));
        return key;
      }
      return this.formater.interpolate(message[key], values).join('');
    }
  }]);
  return I18n;
}();
exports.I18n = I18n;
function watchAppLocale(appVm, i18n) {
  // 需要保证 watch 的触发在组件渲染之前
  if (appVm.$watchLocale) {
    // vue2
    appVm.$watchLocale(function (newLocale) {
      i18n.setLocale(newLocale);
    });
  } else {
    appVm.$watch(function () {
      return appVm.$locale;
    }, function (newLocale) {
      i18n.setLocale(newLocale);
    });
  }
}
function getDefaultLocale() {
  if (typeof uni !== 'undefined' && uni.getLocale) {
    return uni.getLocale();
  }
  // 小程序平台，uni 和 uni-i18n 互相引用，导致访问不到 uni，故在 global 上挂了 getLocale
  if (typeof global !== 'undefined' && global.getLocale) {
    return global.getLocale();
  }
  return LOCALE_EN;
}
function initVueI18n(locale) {
  var messages = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var fallbackLocale = arguments.length > 2 ? arguments[2] : undefined;
  var watcher = arguments.length > 3 ? arguments[3] : undefined;
  // 兼容旧版本入参
  if (typeof locale !== 'string') {
    var _ref4 = [messages, locale];
    locale = _ref4[0];
    messages = _ref4[1];
  }
  if (typeof locale !== 'string') {
    // 因为小程序平台，uni-i18n 和 uni 互相引用，导致此时访问 uni 时，为 undefined
    locale = getDefaultLocale();
  }
  if (typeof fallbackLocale !== 'string') {
    fallbackLocale = typeof __uniConfig !== 'undefined' && __uniConfig.fallbackLocale || LOCALE_EN;
  }
  var i18n = new I18n({
    locale: locale,
    fallbackLocale: fallbackLocale,
    messages: messages,
    watcher: watcher
  });
  var _t = function t(key, values) {
    if (typeof getApp !== 'function') {
      // app view
      /* eslint-disable no-func-assign */
      _t = function t(key, values) {
        return i18n.t(key, values);
      };
    } else {
      var isWatchedAppLocale = false;
      _t = function t(key, values) {
        var appVm = getApp().$vm;
        // 可能$vm还不存在，比如在支付宝小程序中，组件定义较早，在props的default里使用了t()函数（如uni-goods-nav），此时app还未初始化
        // options: {
        // 	type: Array,
        // 	default () {
        // 		return [{
        // 			icon: 'shop',
        // 			text: t("uni-goods-nav.options.shop"),
        // 		}, {
        // 			icon: 'cart',
        // 			text: t("uni-goods-nav.options.cart")
        // 		}]
        // 	}
        // },
        if (appVm) {
          // 触发响应式
          appVm.$locale;
          if (!isWatchedAppLocale) {
            isWatchedAppLocale = true;
            watchAppLocale(appVm, i18n);
          }
        }
        return i18n.t(key, values);
      };
    }
    return _t(key, values);
  };
  return {
    i18n: i18n,
    f: function f(message, values, delimiters) {
      return i18n.f(message, values, delimiters);
    },
    t: function t(key, values) {
      return _t(key, values);
    },
    add: function add(locale, message) {
      var override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return i18n.add(locale, message, override);
    },
    watch: function watch(fn) {
      return i18n.watchLocale(fn);
    },
    getLocale: function getLocale() {
      return i18n.getLocale();
    },
    setLocale: function setLocale(newLocale) {
      return i18n.setLocale(newLocale);
    }
  };
}
var isString = function isString(val) {
  return typeof val === 'string';
};
exports.isString = isString;
var formater;
function hasI18nJson(jsonObj, delimiters) {
  if (!formater) {
    formater = new BaseFormatter();
  }
  return walkJsonObj(jsonObj, function (jsonObj, key) {
    var value = jsonObj[key];
    if (isString(value)) {
      if (isI18nStr(value, delimiters)) {
        return true;
      }
    } else {
      return hasI18nJson(value, delimiters);
    }
  });
}
function parseI18nJson(jsonObj, values, delimiters) {
  if (!formater) {
    formater = new BaseFormatter();
  }
  walkJsonObj(jsonObj, function (jsonObj, key) {
    var value = jsonObj[key];
    if (isString(value)) {
      if (isI18nStr(value, delimiters)) {
        jsonObj[key] = compileStr(value, values, delimiters);
      }
    } else {
      parseI18nJson(value, values, delimiters);
    }
  });
  return jsonObj;
}
function compileI18nJsonStr(jsonStr, _ref5) {
  var locale = _ref5.locale,
    locales = _ref5.locales,
    delimiters = _ref5.delimiters;
  if (!isI18nStr(jsonStr, delimiters)) {
    return jsonStr;
  }
  if (!formater) {
    formater = new BaseFormatter();
  }
  var localeValues = [];
  Object.keys(locales).forEach(function (name) {
    if (name !== locale) {
      localeValues.push({
        locale: name,
        values: locales[name]
      });
    }
  });
  localeValues.unshift({
    locale: locale,
    values: locales[locale]
  });
  try {
    return JSON.stringify(compileJsonObj(JSON.parse(jsonStr), localeValues, delimiters), null, 2);
  } catch (e) {}
  return jsonStr;
}
function isI18nStr(value, delimiters) {
  return value.indexOf(delimiters[0]) > -1;
}
function compileStr(value, values, delimiters) {
  return formater.interpolate(value, values, delimiters).join('');
}
function compileValue(jsonObj, key, localeValues, delimiters) {
  var value = jsonObj[key];
  if (isString(value)) {
    // 存在国际化
    if (isI18nStr(value, delimiters)) {
      jsonObj[key] = compileStr(value, localeValues[0].values, delimiters);
      if (localeValues.length > 1) {
        // 格式化国际化语言
        var valueLocales = jsonObj[key + 'Locales'] = {};
        localeValues.forEach(function (localValue) {
          valueLocales[localValue.locale] = compileStr(value, localValue.values, delimiters);
        });
      }
    }
  } else {
    compileJsonObj(value, localeValues, delimiters);
  }
}
function compileJsonObj(jsonObj, localeValues, delimiters) {
  walkJsonObj(jsonObj, function (jsonObj, key) {
    compileValue(jsonObj, key, localeValues, delimiters);
  });
  return jsonObj;
}
function walkJsonObj(jsonObj, walk) {
  if (isArray(jsonObj)) {
    for (var i = 0; i < jsonObj.length; i++) {
      if (walk(jsonObj, i)) {
        return true;
      }
    }
  } else if (isObject(jsonObj)) {
    for (var key in jsonObj) {
      if (walk(jsonObj, key)) {
        return true;
      }
    }
  }
  return false;
}
function resolveLocale(locales) {
  return function (locale) {
    if (!locale) {
      return locale;
    }
    locale = normalizeLocale(locale) || locale;
    return resolveLocaleChain(locale).find(function (locale) {
      return locales.indexOf(locale) > -1;
    });
  };
}
function resolveLocaleChain(locale) {
  var chain = [];
  var tokens = locale.split('-');
  while (tokens.length) {
    chain.push(tokens.join('-'));
    tokens.pop();
  }
  return chain;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"], __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 3)))

/***/ }),

/***/ 23:
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
module.exports = _classCallCheck, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 24:
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/createClass.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ 12);
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
module.exports = _createClass, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 25:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.6.11
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      if (vm.$options && vm.$options.__file) { // fixed by xxxxxx
        return ('') + vm.$options.__file
      }
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm && vm.$options.name !== 'PageBody') {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        !vm.$options.isReserved && tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.SharedObject.target) {
    Dep.SharedObject.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
// fixed by xxxxxx (nvue shared vuex)
/* eslint-disable no-undef */
Dep.SharedObject = {};
Dep.SharedObject.target = null;
Dep.SharedObject.targetStack = [];

function pushTarget (target) {
  Dep.SharedObject.targetStack.push(target);
  Dep.SharedObject.target = target;
  Dep.target = target;
}

function popTarget () {
  Dep.SharedObject.targetStack.pop();
  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];
  Dep.target = Dep.SharedObject.target;
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑
        if(value.push !== value.__proto__.push){
          copyAugment(value, arrayMethods, arrayKeys);
        } else {
          protoAugment(value, arrayMethods);
        }
      }
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue &&
    !value.__v_isMPComponent
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.SharedObject.target) { // fixed by xxxxxx
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ( true && customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if ( true &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
     true && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (true) {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else if (true) {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ( true && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (
    true
  ) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ( true && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  if (true) {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (true) {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals. ' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
       true && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

/*  */

// fixed by xxxxxx (mp properties)
function extractPropertiesFromVNodeData(data, Ctor, res, context) {
  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;
  if (isUndef(propOptions)) {
    return res
  }
  var externalClasses = Ctor.options.mpOptions.externalClasses || [];
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      var result = checkProp(res, props, key, altKey, true) ||
          checkProp(res, attrs, key, altKey, false);
      // externalClass
      if (
        result &&
        res[key] &&
        externalClasses.indexOf(altKey) !== -1 &&
        context[camelize(res[key])]
      ) {
        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)
        res[key] = context[camelize(res[key])];
      }
    }
  }
  return res
}

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag,
  context// fixed by xxxxxx
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    // fixed by xxxxxx
    return extractPropertiesFromVNodeData(data, Ctor, {}, context)
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  // fixed by xxxxxx
  return extractPropertiesFromVNodeData(data, Ctor, res, context)
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else if (true) {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page
      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){
        (slots['page'] || (slots['page'] = [])).push(child);
      }else{
        (slots.default || (slots.default = [])).push(child);
      }
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length, i, i++)); // fixed by xxxxxx
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    // fixed by xxxxxx app-plus scopedSlot
    nodes = scopedSlotFn(props, this, props._i) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
       true && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      callHook(componentInstance, 'onServiceCreated');
      callHook(componentInstance, 'onServiceAttached');
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (true) {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
     true && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if ( true &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ( true && isDef(data) && isDef(data.nativeOn)) {
        warn(
          ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
          context
        );
      }
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
       true && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                 true
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : undefined
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  if (true) {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }
  
  // fixed by xxxxxx update properties(mp runtime)
  vm._$updateProperties && vm._$updateProperties(vm);
  
  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true
    ? expOrFn.toString()
    : undefined;
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
       true && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (true) {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          {
            if(vm.mpHost === 'mp-baidu' || vm.mpHost === 'mp-kuaishou' || vm.mpHost === 'mp-xhs'){//百度、快手、小红书 observer 在 setData callback 之后触发，直接忽略该 warn
                return
            }
            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警
            if(
                key === 'value' && 
                Array.isArray(vm.$options.behaviors) &&
                vm.$options.behaviors.indexOf('uni://form-field') !== -1
              ){
              return
            }
            if(vm._getFormData){
              return
            }
            var $parent = vm.$parent;
            while($parent){
              if($parent.__next_tick_pending){
                return  
              }
              $parent = $parent.$parent;
            }
          }
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {}
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
     true && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
       true && warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if ( true && getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if ( true &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.SharedObject.target) {// fixed by xxxxxx
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (true) {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (true) {
      initProxy(vm);
    } else {}
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    !vm._$fallback && initInjections(vm); // resolve injections before data/props  
    initState(vm);
    !vm._$fallback && initProvide(vm); // resolve provide after data/props
    !vm._$fallback && callHook(vm, 'created');      

    /* istanbul ignore if */
    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if ( true &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (true) {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.11';

/**
 * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js
 */
var ARRAYTYPE = '[object Array]';
var OBJECTTYPE = '[object Object]';
var NULLTYPE = '[object Null]';
var UNDEFINEDTYPE = '[object Undefined]';
// const FUNCTIONTYPE = '[object Function]'

function diff(current, pre) {
    var result = {};
    syncKeys(current, pre);
    _diff(current, pre, '', result);
    return result
}

function syncKeys(current, pre) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {
        if(Object.keys(current).length >= Object.keys(pre).length){
            for (var key in pre) {
                var currentValue = current[key];
                if (currentValue === undefined) {
                    current[key] = null;
                } else {
                    syncKeys(currentValue, pre[key]);
                }
            }
        }
    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {
        if (current.length >= pre.length) {
            pre.forEach(function (item, index) {
                syncKeys(current[index], item);
            });
        }
    }
}

function nullOrUndefined(currentType, preType) {
    if(
        (currentType === NULLTYPE || currentType === UNDEFINEDTYPE) && 
        (preType === NULLTYPE || preType === UNDEFINEDTYPE)
    ) {
        return false
    }
    return true
}

function _diff(current, pre, path, result) {
    if (current === pre) { return }
    var rootCurrentType = type(current);
    var rootPreType = type(pre);
    if (rootCurrentType == OBJECTTYPE) {
        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {
            setResult(result, path, current);
        } else {
            var loop = function ( key ) {
                var currentValue = current[key];
                var preValue = pre[key];
                var currentType = type(currentValue);
                var preType = type(preValue);
                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {
                    if (currentValue !== pre[key] && nullOrUndefined(currentType, preType)) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    }
                } else if (currentType == ARRAYTYPE) {
                    if (preType != ARRAYTYPE) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        if (currentValue.length < preValue.length) {
                            setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                        } else {
                            currentValue.forEach(function (item, index) {
                                _diff(item, preValue[index], (path == '' ? '' : path + ".") + key + '[' + index + ']', result);
                            });
                        }
                    }
                } else if (currentType == OBJECTTYPE) {
                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {
                        setResult(result, (path == '' ? '' : path + ".") + key, currentValue);
                    } else {
                        for (var subKey in currentValue) {
                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + ".") + key + '.' + subKey, result);
                        }
                    }
                }
            };

            for (var key in current) loop( key );
        }
    } else if (rootCurrentType == ARRAYTYPE) {
        if (rootPreType != ARRAYTYPE) {
            setResult(result, path, current);
        } else {
            if (current.length < pre.length) {
                setResult(result, path, current);
            } else {
                current.forEach(function (item, index) {
                    _diff(item, pre[index], path + '[' + index + ']', result);
                });
            }
        }
    } else {
        setResult(result, path, current);
    }
}

function setResult(result, k, v) {
    // if (type(v) != FUNCTIONTYPE) {
        result[k] = v;
    // }
}

function type(obj) {
    return Object.prototype.toString.call(obj)
}

/*  */

function flushCallbacks$1(vm) {
    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {
        if (Object({"NODE_ENV":"development","VUE_APP_DARK_MODE":"false","VUE_APP_NAME":"wx_zhimiao","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG) {
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');
        }
        var copies = vm.__next_tick_callbacks.slice(0);
        vm.__next_tick_callbacks.length = 0;
        for (var i = 0; i < copies.length; i++) {
            copies[i]();
        }
    }
}

function hasRenderWatcher(vm) {
    return queue.find(function (watcher) { return vm._watcher === watcher; })
}

function nextTick$1(vm, cb) {
    //1.nextTick 之前 已 setData 且 setData 还未回调完成
    //2.nextTick 之前存在 render watcher
    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {
        if(Object({"NODE_ENV":"development","VUE_APP_DARK_MODE":"false","VUE_APP_NAME":"wx_zhimiao","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +
                ']:nextVueTick');
        }
        return nextTick(cb, vm)
    }else{
        if(Object({"NODE_ENV":"development","VUE_APP_DARK_MODE":"false","VUE_APP_NAME":"wx_zhimiao","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG){
            var mpInstance$1 = vm.$scope;
            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +
                ']:nextMPTick');
        }
    }
    var _resolve;
    if (!vm.__next_tick_callbacks) {
        vm.__next_tick_callbacks = [];
    }
    vm.__next_tick_callbacks.push(function () {
        if (cb) {
            try {
                cb.call(vm);
            } catch (e) {
                handleError(e, vm, 'nextTick');
            }
        } else if (_resolve) {
            _resolve(vm);
        }
    });
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve) {
            _resolve = resolve;
        })
    }
}

/*  */

function clearInstance(key, value) {
  // 简易去除 Vue 和小程序组件实例
  if (value) {
    if (value._isVue || value.__v_isMPComponent) {
      return {}
    }
  }
  return value
}

function cloneWithData(vm) {
  // 确保当前 vm 所有数据被同步
  var ret = Object.create(null);
  var dataKeys = [].concat(
    Object.keys(vm._data || {}),
    Object.keys(vm._computedWatchers || {}));

  dataKeys.reduce(function(ret, key) {
    ret[key] = vm[key];
    return ret
  }, ret);

  // vue-composition-api
  var compositionApiState = vm.__composition_api_state__ || vm.__secret_vfa_state__;
  var rawBindings = compositionApiState && compositionApiState.rawBindings;
  if (rawBindings) {
    Object.keys(rawBindings).forEach(function (key) {
      ret[key] = vm[key];
    });
  }

  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据
  Object.assign(ret, vm.$mp.data || {});
  if (
    Array.isArray(vm.$options.behaviors) &&
    vm.$options.behaviors.indexOf('uni://form-field') !== -1
  ) { //form-field
    ret['name'] = vm.name;
    ret['value'] = vm.value;
  }

  return JSON.parse(JSON.stringify(ret, clearInstance))
}

var patch = function(oldVnode, vnode) {
  var this$1 = this;

  if (vnode === null) { //destroy
    return
  }
  if (this.mpType === 'page' || this.mpType === 'component') {
    var mpInstance = this.$scope;
    var data = Object.create(null);
    try {
      data = cloneWithData(this);
    } catch (err) {
      console.error(err);
    }
    data.__webviewId__ = mpInstance.data.__webviewId__;
    var mpData = Object.create(null);
    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据
      mpData[key] = mpInstance.data[key];
    });
    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);
    if (Object.keys(diffData).length) {
      if (Object({"NODE_ENV":"development","VUE_APP_DARK_MODE":"false","VUE_APP_NAME":"wx_zhimiao","VUE_APP_PLATFORM":"mp-weixin","BASE_URL":"/"}).VUE_APP_DEBUG) {
        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +
          ']差量更新',
          JSON.stringify(diffData));
      }
      this.__next_tick_pending = true;
      mpInstance.setData(diffData, function () {
        this$1.__next_tick_pending = false;
        flushCallbacks$1(this$1);
      });
    } else {
      flushCallbacks$1(this);
    }
  }
};

/*  */

function createEmptyRender() {

}

function mountComponent$1(
  vm,
  el,
  hydrating
) {
  if (!vm.mpType) {//main.js 中的 new Vue
    return vm
  }
  if (vm.mpType === 'app') {
    vm.$options.render = createEmptyRender;
  }
  if (!vm.$options.render) {
    vm.$options.render = createEmptyRender;
    if (true) {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  
  !vm._$fallback && callHook(vm, 'beforeMount');

  var updateComponent = function () {
    vm._update(vm._render(), hydrating);
  };

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;
  return vm
}

/*  */

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/*  */

var MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];

function getTarget(obj, path) {
  var parts = path.split('.');
  var key = parts[0];
  if (key.indexOf('__$n') === 0) { //number index
    key = parseInt(key.replace('__$n', ''));
  }
  if (parts.length === 1) {
    return obj[key]
  }
  return getTarget(obj[key], parts.slice(1).join('.'))
}

function internalMixin(Vue) {

  Vue.config.errorHandler = function(err, vm, info) {
    Vue.util.warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    console.error(err);
    /* eslint-disable no-undef */
    var app = typeof getApp === 'function' && getApp();
    if (app && app.onError) {
      app.onError(err);
    }
  };

  var oldEmit = Vue.prototype.$emit;

  Vue.prototype.$emit = function(event) {
    if (this.$scope && event) {
      var triggerEvent = this.$scope['_triggerEvent'] || this.$scope['triggerEvent'];
      if (triggerEvent) {
        try {
          triggerEvent.call(this.$scope, event, {
            __args__: toArray(arguments, 1)
          });
        } catch (error) {

        }
      }
    }
    return oldEmit.apply(this, arguments)
  };

  Vue.prototype.$nextTick = function(fn) {
    return nextTick$1(this, fn)
  };

  MP_METHODS.forEach(function (method) {
    Vue.prototype[method] = function(args) {
      if (this.$scope && this.$scope[method]) {
        return this.$scope[method](args)
      }
      // mp-alipay
      if (typeof my === 'undefined') {
        return
      }
      if (method === 'createSelectorQuery') {
        /* eslint-disable no-undef */
        return my.createSelectorQuery(args)
      } else if (method === 'createIntersectionObserver') {
        /* eslint-disable no-undef */
        return my.createIntersectionObserver(args)
      }
      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent
    };
  });

  Vue.prototype.__init_provide = initProvide;

  Vue.prototype.__init_injections = initInjections;

  Vue.prototype.__call_hook = function(hook, args) {
    var vm = this;
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    var info = hook + " hook";
    var ret;
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook, args);
    }
    popTarget();
    return ret
  };

  Vue.prototype.__set_model = function(target, key, value, modifiers) {
    if (Array.isArray(modifiers)) {
      if (modifiers.indexOf('trim') !== -1) {
        value = value.trim();
      }
      if (modifiers.indexOf('number') !== -1) {
        value = this._n(value);
      }
    }
    if (!target) {
      target = this;
    }
    // 解决动态属性添加
    Vue.set(target, key, value);
  };

  Vue.prototype.__set_sync = function(target, key, value) {
    if (!target) {
      target = this;
    }
    // 解决动态属性添加
    Vue.set(target, key, value);
  };

  Vue.prototype.__get_orig = function(item) {
    if (isPlainObject(item)) {
      return item['$orig'] || item
    }
    return item
  };

  Vue.prototype.__get_value = function(dataPath, target) {
    return getTarget(target || this, dataPath)
  };


  Vue.prototype.__get_class = function(dynamicClass, staticClass) {
    return renderClass(staticClass, dynamicClass)
  };

  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {
    if (!dynamicStyle && !staticStyle) {
      return ''
    }
    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);
    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;
    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + ":" + (styleObj[name])); }).join(';')
  };

  Vue.prototype.__map = function(val, iteratee) {
    //TODO 暂不考虑 string
    var ret, i, l, keys, key;
    if (Array.isArray(val)) {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = iteratee(val[i], i);
      }
      return ret
    } else if (isObject(val)) {
      keys = Object.keys(val);
      ret = Object.create(null);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[key] = iteratee(val[key], key, i);
      }
      return ret
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0, l = val; i < l; i++) {
        // 第一个参数暂时仍和小程序一致
        ret[i] = iteratee(i, i);
      }
      return ret
    }
    return []
  };

}

/*  */

var LIFECYCLE_HOOKS$1 = [
    //App
    'onLaunch',
    'onShow',
    'onHide',
    'onUniNViewMessage',
    'onPageNotFound',
    'onThemeChange',
    'onError',
    'onUnhandledRejection',
    //Page
    'onInit',
    'onLoad',
    // 'onShow',
    'onReady',
    // 'onHide',
    'onUnload',
    'onPullDownRefresh',
    'onReachBottom',
    'onTabItemTap',
    'onAddToFavorites',
    'onShareTimeline',
    'onShareAppMessage',
    'onResize',
    'onPageScroll',
    'onNavigationBarButtonTap',
    'onBackPress',
    'onNavigationBarSearchInputChanged',
    'onNavigationBarSearchInputConfirmed',
    'onNavigationBarSearchInputClicked',
    //Component
    // 'onReady', // 兼容旧版本，应该移除该事件
    'onPageShow',
    'onPageHide',
    'onPageResize',
    'onUploadDouyinVideo'
];
function lifecycleMixin$1(Vue) {

    //fixed vue-class-component
    var oldExtend = Vue.extend;
    Vue.extend = function(extendOptions) {
        extendOptions = extendOptions || {};

        var methods = extendOptions.methods;
        if (methods) {
            Object.keys(methods).forEach(function (methodName) {
                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {
                    extendOptions[methodName] = methods[methodName];
                    delete methods[methodName];
                }
            });
        }

        return oldExtend.call(this, extendOptions)
    };

    var strategies = Vue.config.optionMergeStrategies;
    var mergeHook = strategies.created;
    LIFECYCLE_HOOKS$1.forEach(function (hook) {
        strategies[hook] = mergeHook;
    });

    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;
}

/*  */

// install platform patch function
Vue.prototype.__patch__ = patch;

// public mount method
Vue.prototype.$mount = function(
    el ,
    hydrating 
) {
    return mountComponent$1(this, el, hydrating)
};

lifecycleMixin$1(Vue);
internalMixin(Vue);

/*  */

/* harmony default export */ __webpack_exports__["default"] = (Vue);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 3)))

/***/ }),

/***/ 26:
/*!******************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/pages.json ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ 3:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 30:
/*!************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/@babel/runtime/regenerator/index.js ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! @babel/runtime/helpers/regeneratorRuntime */ 31)();
module.exports = runtime;

/***/ }),

/***/ 31:
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ 13)["default"];
function _regeneratorRuntime() {
  "use strict";

  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) {
              if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            }
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) {
      keys.push(key);
    }
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) {
        "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      }
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 32:
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 33:
/*!**************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vuex3/dist/vuex.common.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * vuex v3.6.2
 * (c) 2021 Evan You
 * @license MIT
 */


function applyMixin (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
    ? global
    : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  }, { prepend: true });

  store.subscribeAction(function (action, state) {
    devtoolHook.emit('vuex:action', action, state);
  }, { prepend: true });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */
function find (list, f) {
  return list.filter(f)[0]
}

/**
 * Deep copy the given object considering circular structure.
 * This function caches all nested objects and its copies.
 * If it detects circular structure, use cached copy to avoid infinite loop.
 *
 * @param {*} obj
 * @param {Array<Object>} cache
 * @return {*}
 */
function deepCopy (obj, cache) {
  if ( cache === void 0 ) cache = [];

  // just return if obj is immutable value
  if (obj === null || typeof obj !== 'object') {
    return obj
  }

  // if obj is hit, it is in circular structure
  var hit = find(cache, function (c) { return c.original === obj; });
  if (hit) {
    return hit.copy
  }

  var copy = Array.isArray(obj) ? [] : {};
  // put the copy into cache at first
  // because we want to refer it in recursive deepCopy
  cache.push({
    original: obj,
    copy: copy
  });

  Object.keys(obj).forEach(function (key) {
    copy[key] = deepCopy(obj[key], cache);
  });

  return copy
}

/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

function partial (fn, arg) {
  return function () {
    return fn(arg)
  }
}

// Base data struct for store's module, package with some attribute and method
var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  // Store some children item
  this._children = Object.create(null);
  // Store the origin module object which passed by programmer
  this._rawModule = rawModule;
  var rawState = rawModule.state;

  // Store the origin module's state
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = { namespaced: { configurable: true } };

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.hasChild = function hasChild (key) {
  return key in this._children
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if ((true)) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  var child = parent.getChild(key);

  if (!child) {
    if ((true)) {
      console.warn(
        "[vuex] trying to unregister module '" + key + "', which is " +
        "not registered"
      );
    }
    return
  }

  if (!child.runtime) {
    return
  }

  parent.removeChild(key);
};

ModuleCollection.prototype.isRegistered = function isRegistered (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (parent) {
    return parent.hasChild(key)
  }

  return false
};

function update (path, targetModule, newModule) {
  if ((true)) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if ((true)) {
          console.warn(
            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
            'manual reload is needed'
          );
        }
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if ((true)) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null);

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  var state = this._modules.root.state;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = { state: { configurable: true } };

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors$1.state.set = function (v) {
  if ((true)) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown mutation type: " + type));
    }
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });

  this._subscribers
    .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
    .forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
    ( true) &&
    options && options.silent
  ) {
    console.warn(
      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
      'Use the filter functionality in the vue-devtools'
    );
  }
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if ((true)) {
      console.error(("[vuex] unknown action type: " + type));
    }
    return
  }

  try {
    this._actionSubscribers
      .slice() // shallow copy to prevent iterator invalidation if subscriber synchronously calls unsubscribe
      .filter(function (sub) { return sub.before; })
      .forEach(function (sub) { return sub.before(action, this$1.state); });
  } catch (e) {
    if ((true)) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload);

  return new Promise(function (resolve, reject) {
    result.then(function (res) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.after; })
          .forEach(function (sub) { return sub.after(action, this$1.state); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in after action subscribers: ");
          console.error(e);
        }
      }
      resolve(res);
    }, function (error) {
      try {
        this$1._actionSubscribers
          .filter(function (sub) { return sub.error; })
          .forEach(function (sub) { return sub.error(action, this$1.state, error); });
      } catch (e) {
        if ((true)) {
          console.warn("[vuex] error in error action subscribers: ");
          console.error(e);
        }
      }
      reject(error);
    });
  })
};

Store.prototype.subscribe = function subscribe (fn, options) {
  return genericSubscribe(fn, this._subscribers, options)
};

Store.prototype.subscribeAction = function subscribeAction (fn, options) {
  var subs = typeof fn === 'function' ? { before: fn } : fn;
  return genericSubscribe(subs, this._actionSubscribers, options)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if ((true)) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hasModule = function hasModule (path) {
  if (typeof path === 'string') { path = [path]; }

  if ((true)) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  return this._modules.isRegistered(path)
};

Store.prototype[[104,111,116,85,112,100,97,116,101].map(function (item) {return String.fromCharCode(item)}).join('')] = function (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors$1 );

function genericSubscribe (fn, subs, options) {
  if (subs.indexOf(fn) < 0) {
    options && options.prepend
      ? subs.unshift(fn)
      : subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  // reset local getters cache
  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && ("development" !== 'production')) {
      console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
    }
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      if ((true)) {
        if (moduleName in parentState) {
          console.warn(
            ("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + (path.join('.')) + "\"")
          );
        }
      }
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._actions[type]) {
          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if (( true) && !store._mutations[type]) {
          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace]
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if ((true)) {
      console.error(("[vuex] duplicate getter key: " + type));
    }
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if ((true)) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.reduce(function (state, key) { return state[key]; }, state)
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if ((true)) {
    assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
  }

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if ((true)) {
      console.error(
        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
      );
    }
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */
var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  if (( true) && !isValidMap(states)) {
    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept another params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  if (( true) && !isValidMap(mutations)) {
    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // Get the commit method from store
      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  if (( true) && !isValidMap(getters)) {
    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    // The namespace has been mutated by normalizeNamespace
    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if (( true) && !(val in this.$store.getters)) {
        console.error(("[vuex] unknown getter: " + val));
        return
      }
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  if (( true) && !isValidMap(actions)) {
    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // get dispatch function from store
      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */
var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */
function normalizeMap (map) {
  if (!isValidMap(map)) {
    return []
  }
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */
function isValidMap (map) {
  return Array.isArray(map) || isObject(map)
}

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */
function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */
function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if (( true) && !module) {
    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
  }
  return module
}

// Credits: borrowed code from fcomb/redux-logger

function createLogger (ref) {
  if ( ref === void 0 ) ref = {};
  var collapsed = ref.collapsed; if ( collapsed === void 0 ) collapsed = true;
  var filter = ref.filter; if ( filter === void 0 ) filter = function (mutation, stateBefore, stateAfter) { return true; };
  var transformer = ref.transformer; if ( transformer === void 0 ) transformer = function (state) { return state; };
  var mutationTransformer = ref.mutationTransformer; if ( mutationTransformer === void 0 ) mutationTransformer = function (mut) { return mut; };
  var actionFilter = ref.actionFilter; if ( actionFilter === void 0 ) actionFilter = function (action, state) { return true; };
  var actionTransformer = ref.actionTransformer; if ( actionTransformer === void 0 ) actionTransformer = function (act) { return act; };
  var logMutations = ref.logMutations; if ( logMutations === void 0 ) logMutations = true;
  var logActions = ref.logActions; if ( logActions === void 0 ) logActions = true;
  var logger = ref.logger; if ( logger === void 0 ) logger = console;

  return function (store) {
    var prevState = deepCopy(store.state);

    if (typeof logger === 'undefined') {
      return
    }

    if (logMutations) {
      store.subscribe(function (mutation, state) {
        var nextState = deepCopy(state);

        if (filter(mutation, prevState, nextState)) {
          var formattedTime = getFormattedTime();
          var formattedMutation = mutationTransformer(mutation);
          var message = "mutation " + (mutation.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c prev state', 'color: #9E9E9E; font-weight: bold', transformer(prevState));
          logger.log('%c mutation', 'color: #03A9F4; font-weight: bold', formattedMutation);
          logger.log('%c next state', 'color: #4CAF50; font-weight: bold', transformer(nextState));
          endMessage(logger);
        }

        prevState = nextState;
      });
    }

    if (logActions) {
      store.subscribeAction(function (action, state) {
        if (actionFilter(action, state)) {
          var formattedTime = getFormattedTime();
          var formattedAction = actionTransformer(action);
          var message = "action " + (action.type) + formattedTime;

          startMessage(logger, message, collapsed);
          logger.log('%c action', 'color: #03A9F4; font-weight: bold', formattedAction);
          endMessage(logger);
        }
      });
    }
  }
}

function startMessage (logger, message, collapsed) {
  var startMessage = collapsed
    ? logger.groupCollapsed
    : logger.group;

  // render
  try {
    startMessage.call(logger, message);
  } catch (e) {
    logger.log(message);
  }
}

function endMessage (logger) {
  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('—— log end ——');
  }
}

function getFormattedTime () {
  var time = new Date();
  return (" @ " + (pad(time.getHours(), 2)) + ":" + (pad(time.getMinutes(), 2)) + ":" + (pad(time.getSeconds(), 2)) + "." + (pad(time.getMilliseconds(), 3)))
}

function repeat (str, times) {
  return (new Array(times + 1)).join(str)
}

function pad (num, maxLength) {
  return repeat('0', maxLength - num.toString().length) + num
}

var index_cjs = {
  Store: Store,
  install: install,
  version: '3.6.2',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers,
  createLogger: createLogger
};

module.exports = index_cjs;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 3)))

/***/ }),

/***/ 334:
/*!***********************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/uni-icons/components/uni-icons/icons.js ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  "id": "2852637",
  "name": "uniui图标库",
  "font_family": "uniicons",
  "css_prefix_text": "uniui-",
  "description": "",
  "glyphs": [{
    "icon_id": "25027049",
    "name": "yanse",
    "font_class": "color",
    "unicode": "e6cf",
    "unicode_decimal": 59087
  }, {
    "icon_id": "25027048",
    "name": "wallet",
    "font_class": "wallet",
    "unicode": "e6b1",
    "unicode_decimal": 59057
  }, {
    "icon_id": "25015720",
    "name": "settings-filled",
    "font_class": "settings-filled",
    "unicode": "e6ce",
    "unicode_decimal": 59086
  }, {
    "icon_id": "25015434",
    "name": "shimingrenzheng-filled",
    "font_class": "auth-filled",
    "unicode": "e6cc",
    "unicode_decimal": 59084
  }, {
    "icon_id": "24934246",
    "name": "shop-filled",
    "font_class": "shop-filled",
    "unicode": "e6cd",
    "unicode_decimal": 59085
  }, {
    "icon_id": "24934159",
    "name": "staff-filled-01",
    "font_class": "staff-filled",
    "unicode": "e6cb",
    "unicode_decimal": 59083
  }, {
    "icon_id": "24932461",
    "name": "VIP-filled",
    "font_class": "vip-filled",
    "unicode": "e6c6",
    "unicode_decimal": 59078
  }, {
    "icon_id": "24932462",
    "name": "plus_circle_fill",
    "font_class": "plus-filled",
    "unicode": "e6c7",
    "unicode_decimal": 59079
  }, {
    "icon_id": "24932463",
    "name": "folder_add-filled",
    "font_class": "folder-add-filled",
    "unicode": "e6c8",
    "unicode_decimal": 59080
  }, {
    "icon_id": "24932464",
    "name": "yanse-filled",
    "font_class": "color-filled",
    "unicode": "e6c9",
    "unicode_decimal": 59081
  }, {
    "icon_id": "24932465",
    "name": "tune-filled",
    "font_class": "tune-filled",
    "unicode": "e6ca",
    "unicode_decimal": 59082
  }, {
    "icon_id": "24932455",
    "name": "a-rilidaka-filled",
    "font_class": "calendar-filled",
    "unicode": "e6c0",
    "unicode_decimal": 59072
  }, {
    "icon_id": "24932456",
    "name": "notification-filled",
    "font_class": "notification-filled",
    "unicode": "e6c1",
    "unicode_decimal": 59073
  }, {
    "icon_id": "24932457",
    "name": "wallet-filled",
    "font_class": "wallet-filled",
    "unicode": "e6c2",
    "unicode_decimal": 59074
  }, {
    "icon_id": "24932458",
    "name": "paihangbang-filled",
    "font_class": "medal-filled",
    "unicode": "e6c3",
    "unicode_decimal": 59075
  }, {
    "icon_id": "24932459",
    "name": "gift-filled",
    "font_class": "gift-filled",
    "unicode": "e6c4",
    "unicode_decimal": 59076
  }, {
    "icon_id": "24932460",
    "name": "fire-filled",
    "font_class": "fire-filled",
    "unicode": "e6c5",
    "unicode_decimal": 59077
  }, {
    "icon_id": "24928001",
    "name": "refreshempty",
    "font_class": "refreshempty",
    "unicode": "e6bf",
    "unicode_decimal": 59071
  }, {
    "icon_id": "24926853",
    "name": "location-ellipse",
    "font_class": "location-filled",
    "unicode": "e6af",
    "unicode_decimal": 59055
  }, {
    "icon_id": "24926735",
    "name": "person-filled",
    "font_class": "person-filled",
    "unicode": "e69d",
    "unicode_decimal": 59037
  }, {
    "icon_id": "24926703",
    "name": "personadd-filled",
    "font_class": "personadd-filled",
    "unicode": "e698",
    "unicode_decimal": 59032
  }, {
    "icon_id": "24923351",
    "name": "back",
    "font_class": "back",
    "unicode": "e6b9",
    "unicode_decimal": 59065
  }, {
    "icon_id": "24923352",
    "name": "forward",
    "font_class": "forward",
    "unicode": "e6ba",
    "unicode_decimal": 59066
  }, {
    "icon_id": "24923353",
    "name": "arrowthinright",
    "font_class": "arrow-right",
    "unicode": "e6bb",
    "unicode_decimal": 59067
  }, {
    "icon_id": "24923353",
    "name": "arrowthinright",
    "font_class": "arrowthinright",
    "unicode": "e6bb",
    "unicode_decimal": 59067
  }, {
    "icon_id": "24923354",
    "name": "arrowthinleft",
    "font_class": "arrow-left",
    "unicode": "e6bc",
    "unicode_decimal": 59068
  }, {
    "icon_id": "24923354",
    "name": "arrowthinleft",
    "font_class": "arrowthinleft",
    "unicode": "e6bc",
    "unicode_decimal": 59068
  }, {
    "icon_id": "24923355",
    "name": "arrowthinup",
    "font_class": "arrow-up",
    "unicode": "e6bd",
    "unicode_decimal": 59069
  }, {
    "icon_id": "24923355",
    "name": "arrowthinup",
    "font_class": "arrowthinup",
    "unicode": "e6bd",
    "unicode_decimal": 59069
  }, {
    "icon_id": "24923356",
    "name": "arrowthindown",
    "font_class": "arrow-down",
    "unicode": "e6be",
    "unicode_decimal": 59070
  }, {
    "icon_id": "24923356",
    "name": "arrowthindown",
    "font_class": "arrowthindown",
    "unicode": "e6be",
    "unicode_decimal": 59070
  }, {
    "icon_id": "24923349",
    "name": "arrowdown",
    "font_class": "bottom",
    "unicode": "e6b8",
    "unicode_decimal": 59064
  }, {
    "icon_id": "24923349",
    "name": "arrowdown",
    "font_class": "arrowdown",
    "unicode": "e6b8",
    "unicode_decimal": 59064
  }, {
    "icon_id": "24923346",
    "name": "arrowright",
    "font_class": "right",
    "unicode": "e6b5",
    "unicode_decimal": 59061
  }, {
    "icon_id": "24923346",
    "name": "arrowright",
    "font_class": "arrowright",
    "unicode": "e6b5",
    "unicode_decimal": 59061
  }, {
    "icon_id": "24923347",
    "name": "arrowup",
    "font_class": "top",
    "unicode": "e6b6",
    "unicode_decimal": 59062
  }, {
    "icon_id": "24923347",
    "name": "arrowup",
    "font_class": "arrowup",
    "unicode": "e6b6",
    "unicode_decimal": 59062
  }, {
    "icon_id": "24923348",
    "name": "arrowleft",
    "font_class": "left",
    "unicode": "e6b7",
    "unicode_decimal": 59063
  }, {
    "icon_id": "24923348",
    "name": "arrowleft",
    "font_class": "arrowleft",
    "unicode": "e6b7",
    "unicode_decimal": 59063
  }, {
    "icon_id": "24923334",
    "name": "eye",
    "font_class": "eye",
    "unicode": "e651",
    "unicode_decimal": 58961
  }, {
    "icon_id": "24923335",
    "name": "eye-filled",
    "font_class": "eye-filled",
    "unicode": "e66a",
    "unicode_decimal": 58986
  }, {
    "icon_id": "24923336",
    "name": "eye-slash",
    "font_class": "eye-slash",
    "unicode": "e6b3",
    "unicode_decimal": 59059
  }, {
    "icon_id": "24923337",
    "name": "eye-slash-filled",
    "font_class": "eye-slash-filled",
    "unicode": "e6b4",
    "unicode_decimal": 59060
  }, {
    "icon_id": "24923305",
    "name": "info-filled",
    "font_class": "info-filled",
    "unicode": "e649",
    "unicode_decimal": 58953
  }, {
    "icon_id": "24923299",
    "name": "reload-01",
    "font_class": "reload",
    "unicode": "e6b2",
    "unicode_decimal": 59058
  }, {
    "icon_id": "24923195",
    "name": "mic_slash_fill",
    "font_class": "micoff-filled",
    "unicode": "e6b0",
    "unicode_decimal": 59056
  }, {
    "icon_id": "24923165",
    "name": "map-pin-ellipse",
    "font_class": "map-pin-ellipse",
    "unicode": "e6ac",
    "unicode_decimal": 59052
  }, {
    "icon_id": "24923166",
    "name": "map-pin",
    "font_class": "map-pin",
    "unicode": "e6ad",
    "unicode_decimal": 59053
  }, {
    "icon_id": "24923167",
    "name": "location",
    "font_class": "location",
    "unicode": "e6ae",
    "unicode_decimal": 59054
  }, {
    "icon_id": "24923064",
    "name": "starhalf",
    "font_class": "starhalf",
    "unicode": "e683",
    "unicode_decimal": 59011
  }, {
    "icon_id": "24923065",
    "name": "star",
    "font_class": "star",
    "unicode": "e688",
    "unicode_decimal": 59016
  }, {
    "icon_id": "24923066",
    "name": "star-filled",
    "font_class": "star-filled",
    "unicode": "e68f",
    "unicode_decimal": 59023
  }, {
    "icon_id": "24899646",
    "name": "a-rilidaka",
    "font_class": "calendar",
    "unicode": "e6a0",
    "unicode_decimal": 59040
  }, {
    "icon_id": "24899647",
    "name": "fire",
    "font_class": "fire",
    "unicode": "e6a1",
    "unicode_decimal": 59041
  }, {
    "icon_id": "24899648",
    "name": "paihangbang",
    "font_class": "medal",
    "unicode": "e6a2",
    "unicode_decimal": 59042
  }, {
    "icon_id": "24899649",
    "name": "font",
    "font_class": "font",
    "unicode": "e6a3",
    "unicode_decimal": 59043
  }, {
    "icon_id": "24899650",
    "name": "gift",
    "font_class": "gift",
    "unicode": "e6a4",
    "unicode_decimal": 59044
  }, {
    "icon_id": "24899651",
    "name": "link",
    "font_class": "link",
    "unicode": "e6a5",
    "unicode_decimal": 59045
  }, {
    "icon_id": "24899652",
    "name": "notification",
    "font_class": "notification",
    "unicode": "e6a6",
    "unicode_decimal": 59046
  }, {
    "icon_id": "24899653",
    "name": "staff",
    "font_class": "staff",
    "unicode": "e6a7",
    "unicode_decimal": 59047
  }, {
    "icon_id": "24899654",
    "name": "VIP",
    "font_class": "vip",
    "unicode": "e6a8",
    "unicode_decimal": 59048
  }, {
    "icon_id": "24899655",
    "name": "folder_add",
    "font_class": "folder-add",
    "unicode": "e6a9",
    "unicode_decimal": 59049
  }, {
    "icon_id": "24899656",
    "name": "tune",
    "font_class": "tune",
    "unicode": "e6aa",
    "unicode_decimal": 59050
  }, {
    "icon_id": "24899657",
    "name": "shimingrenzheng",
    "font_class": "auth",
    "unicode": "e6ab",
    "unicode_decimal": 59051
  }, {
    "icon_id": "24899565",
    "name": "person",
    "font_class": "person",
    "unicode": "e699",
    "unicode_decimal": 59033
  }, {
    "icon_id": "24899566",
    "name": "email-filled",
    "font_class": "email-filled",
    "unicode": "e69a",
    "unicode_decimal": 59034
  }, {
    "icon_id": "24899567",
    "name": "phone-filled",
    "font_class": "phone-filled",
    "unicode": "e69b",
    "unicode_decimal": 59035
  }, {
    "icon_id": "24899568",
    "name": "phone",
    "font_class": "phone",
    "unicode": "e69c",
    "unicode_decimal": 59036
  }, {
    "icon_id": "24899570",
    "name": "email",
    "font_class": "email",
    "unicode": "e69e",
    "unicode_decimal": 59038
  }, {
    "icon_id": "24899571",
    "name": "personadd",
    "font_class": "personadd",
    "unicode": "e69f",
    "unicode_decimal": 59039
  }, {
    "icon_id": "24899558",
    "name": "chatboxes-filled",
    "font_class": "chatboxes-filled",
    "unicode": "e692",
    "unicode_decimal": 59026
  }, {
    "icon_id": "24899559",
    "name": "contact",
    "font_class": "contact",
    "unicode": "e693",
    "unicode_decimal": 59027
  }, {
    "icon_id": "24899560",
    "name": "chatbubble-filled",
    "font_class": "chatbubble-filled",
    "unicode": "e694",
    "unicode_decimal": 59028
  }, {
    "icon_id": "24899561",
    "name": "contact-filled",
    "font_class": "contact-filled",
    "unicode": "e695",
    "unicode_decimal": 59029
  }, {
    "icon_id": "24899562",
    "name": "chatboxes",
    "font_class": "chatboxes",
    "unicode": "e696",
    "unicode_decimal": 59030
  }, {
    "icon_id": "24899563",
    "name": "chatbubble",
    "font_class": "chatbubble",
    "unicode": "e697",
    "unicode_decimal": 59031
  }, {
    "icon_id": "24881290",
    "name": "upload-filled",
    "font_class": "upload-filled",
    "unicode": "e68e",
    "unicode_decimal": 59022
  }, {
    "icon_id": "24881292",
    "name": "upload",
    "font_class": "upload",
    "unicode": "e690",
    "unicode_decimal": 59024
  }, {
    "icon_id": "24881293",
    "name": "weixin",
    "font_class": "weixin",
    "unicode": "e691",
    "unicode_decimal": 59025
  }, {
    "icon_id": "24881274",
    "name": "compose",
    "font_class": "compose",
    "unicode": "e67f",
    "unicode_decimal": 59007
  }, {
    "icon_id": "24881275",
    "name": "qq",
    "font_class": "qq",
    "unicode": "e680",
    "unicode_decimal": 59008
  }, {
    "icon_id": "24881276",
    "name": "download-filled",
    "font_class": "download-filled",
    "unicode": "e681",
    "unicode_decimal": 59009
  }, {
    "icon_id": "24881277",
    "name": "pengyouquan",
    "font_class": "pyq",
    "unicode": "e682",
    "unicode_decimal": 59010
  }, {
    "icon_id": "24881279",
    "name": "sound",
    "font_class": "sound",
    "unicode": "e684",
    "unicode_decimal": 59012
  }, {
    "icon_id": "24881280",
    "name": "trash-filled",
    "font_class": "trash-filled",
    "unicode": "e685",
    "unicode_decimal": 59013
  }, {
    "icon_id": "24881281",
    "name": "sound-filled",
    "font_class": "sound-filled",
    "unicode": "e686",
    "unicode_decimal": 59014
  }, {
    "icon_id": "24881282",
    "name": "trash",
    "font_class": "trash",
    "unicode": "e687",
    "unicode_decimal": 59015
  }, {
    "icon_id": "24881284",
    "name": "videocam-filled",
    "font_class": "videocam-filled",
    "unicode": "e689",
    "unicode_decimal": 59017
  }, {
    "icon_id": "24881285",
    "name": "spinner-cycle",
    "font_class": "spinner-cycle",
    "unicode": "e68a",
    "unicode_decimal": 59018
  }, {
    "icon_id": "24881286",
    "name": "weibo",
    "font_class": "weibo",
    "unicode": "e68b",
    "unicode_decimal": 59019
  }, {
    "icon_id": "24881288",
    "name": "videocam",
    "font_class": "videocam",
    "unicode": "e68c",
    "unicode_decimal": 59020
  }, {
    "icon_id": "24881289",
    "name": "download",
    "font_class": "download",
    "unicode": "e68d",
    "unicode_decimal": 59021
  }, {
    "icon_id": "24879601",
    "name": "help",
    "font_class": "help",
    "unicode": "e679",
    "unicode_decimal": 59001
  }, {
    "icon_id": "24879602",
    "name": "navigate-filled",
    "font_class": "navigate-filled",
    "unicode": "e67a",
    "unicode_decimal": 59002
  }, {
    "icon_id": "24879603",
    "name": "plusempty",
    "font_class": "plusempty",
    "unicode": "e67b",
    "unicode_decimal": 59003
  }, {
    "icon_id": "24879604",
    "name": "smallcircle",
    "font_class": "smallcircle",
    "unicode": "e67c",
    "unicode_decimal": 59004
  }, {
    "icon_id": "24879605",
    "name": "minus-filled",
    "font_class": "minus-filled",
    "unicode": "e67d",
    "unicode_decimal": 59005
  }, {
    "icon_id": "24879606",
    "name": "micoff",
    "font_class": "micoff",
    "unicode": "e67e",
    "unicode_decimal": 59006
  }, {
    "icon_id": "24879588",
    "name": "closeempty",
    "font_class": "closeempty",
    "unicode": "e66c",
    "unicode_decimal": 58988
  }, {
    "icon_id": "24879589",
    "name": "clear",
    "font_class": "clear",
    "unicode": "e66d",
    "unicode_decimal": 58989
  }, {
    "icon_id": "24879590",
    "name": "navigate",
    "font_class": "navigate",
    "unicode": "e66e",
    "unicode_decimal": 58990
  }, {
    "icon_id": "24879591",
    "name": "minus",
    "font_class": "minus",
    "unicode": "e66f",
    "unicode_decimal": 58991
  }, {
    "icon_id": "24879592",
    "name": "image",
    "font_class": "image",
    "unicode": "e670",
    "unicode_decimal": 58992
  }, {
    "icon_id": "24879593",
    "name": "mic",
    "font_class": "mic",
    "unicode": "e671",
    "unicode_decimal": 58993
  }, {
    "icon_id": "24879594",
    "name": "paperplane",
    "font_class": "paperplane",
    "unicode": "e672",
    "unicode_decimal": 58994
  }, {
    "icon_id": "24879595",
    "name": "close",
    "font_class": "close",
    "unicode": "e673",
    "unicode_decimal": 58995
  }, {
    "icon_id": "24879596",
    "name": "help-filled",
    "font_class": "help-filled",
    "unicode": "e674",
    "unicode_decimal": 58996
  }, {
    "icon_id": "24879597",
    "name": "plus-filled",
    "font_class": "paperplane-filled",
    "unicode": "e675",
    "unicode_decimal": 58997
  }, {
    "icon_id": "24879598",
    "name": "plus",
    "font_class": "plus",
    "unicode": "e676",
    "unicode_decimal": 58998
  }, {
    "icon_id": "24879599",
    "name": "mic-filled",
    "font_class": "mic-filled",
    "unicode": "e677",
    "unicode_decimal": 58999
  }, {
    "icon_id": "24879600",
    "name": "image-filled",
    "font_class": "image-filled",
    "unicode": "e678",
    "unicode_decimal": 59000
  }, {
    "icon_id": "24855900",
    "name": "locked-filled",
    "font_class": "locked-filled",
    "unicode": "e668",
    "unicode_decimal": 58984
  }, {
    "icon_id": "24855901",
    "name": "info",
    "font_class": "info",
    "unicode": "e669",
    "unicode_decimal": 58985
  }, {
    "icon_id": "24855903",
    "name": "locked",
    "font_class": "locked",
    "unicode": "e66b",
    "unicode_decimal": 58987
  }, {
    "icon_id": "24855884",
    "name": "camera-filled",
    "font_class": "camera-filled",
    "unicode": "e658",
    "unicode_decimal": 58968
  }, {
    "icon_id": "24855885",
    "name": "chat-filled",
    "font_class": "chat-filled",
    "unicode": "e659",
    "unicode_decimal": 58969
  }, {
    "icon_id": "24855886",
    "name": "camera",
    "font_class": "camera",
    "unicode": "e65a",
    "unicode_decimal": 58970
  }, {
    "icon_id": "24855887",
    "name": "circle",
    "font_class": "circle",
    "unicode": "e65b",
    "unicode_decimal": 58971
  }, {
    "icon_id": "24855888",
    "name": "checkmarkempty",
    "font_class": "checkmarkempty",
    "unicode": "e65c",
    "unicode_decimal": 58972
  }, {
    "icon_id": "24855889",
    "name": "chat",
    "font_class": "chat",
    "unicode": "e65d",
    "unicode_decimal": 58973
  }, {
    "icon_id": "24855890",
    "name": "circle-filled",
    "font_class": "circle-filled",
    "unicode": "e65e",
    "unicode_decimal": 58974
  }, {
    "icon_id": "24855891",
    "name": "flag",
    "font_class": "flag",
    "unicode": "e65f",
    "unicode_decimal": 58975
  }, {
    "icon_id": "24855892",
    "name": "flag-filled",
    "font_class": "flag-filled",
    "unicode": "e660",
    "unicode_decimal": 58976
  }, {
    "icon_id": "24855893",
    "name": "gear-filled",
    "font_class": "gear-filled",
    "unicode": "e661",
    "unicode_decimal": 58977
  }, {
    "icon_id": "24855894",
    "name": "home",
    "font_class": "home",
    "unicode": "e662",
    "unicode_decimal": 58978
  }, {
    "icon_id": "24855895",
    "name": "home-filled",
    "font_class": "home-filled",
    "unicode": "e663",
    "unicode_decimal": 58979
  }, {
    "icon_id": "24855896",
    "name": "gear",
    "font_class": "gear",
    "unicode": "e664",
    "unicode_decimal": 58980
  }, {
    "icon_id": "24855897",
    "name": "smallcircle-filled",
    "font_class": "smallcircle-filled",
    "unicode": "e665",
    "unicode_decimal": 58981
  }, {
    "icon_id": "24855898",
    "name": "map-filled",
    "font_class": "map-filled",
    "unicode": "e666",
    "unicode_decimal": 58982
  }, {
    "icon_id": "24855899",
    "name": "map",
    "font_class": "map",
    "unicode": "e667",
    "unicode_decimal": 58983
  }, {
    "icon_id": "24855825",
    "name": "refresh-filled",
    "font_class": "refresh-filled",
    "unicode": "e656",
    "unicode_decimal": 58966
  }, {
    "icon_id": "24855826",
    "name": "refresh",
    "font_class": "refresh",
    "unicode": "e657",
    "unicode_decimal": 58967
  }, {
    "icon_id": "24855808",
    "name": "cloud-upload",
    "font_class": "cloud-upload",
    "unicode": "e645",
    "unicode_decimal": 58949
  }, {
    "icon_id": "24855809",
    "name": "cloud-download-filled",
    "font_class": "cloud-download-filled",
    "unicode": "e646",
    "unicode_decimal": 58950
  }, {
    "icon_id": "24855810",
    "name": "cloud-download",
    "font_class": "cloud-download",
    "unicode": "e647",
    "unicode_decimal": 58951
  }, {
    "icon_id": "24855811",
    "name": "cloud-upload-filled",
    "font_class": "cloud-upload-filled",
    "unicode": "e648",
    "unicode_decimal": 58952
  }, {
    "icon_id": "24855813",
    "name": "redo",
    "font_class": "redo",
    "unicode": "e64a",
    "unicode_decimal": 58954
  }, {
    "icon_id": "24855814",
    "name": "images-filled",
    "font_class": "images-filled",
    "unicode": "e64b",
    "unicode_decimal": 58955
  }, {
    "icon_id": "24855815",
    "name": "undo-filled",
    "font_class": "undo-filled",
    "unicode": "e64c",
    "unicode_decimal": 58956
  }, {
    "icon_id": "24855816",
    "name": "more",
    "font_class": "more",
    "unicode": "e64d",
    "unicode_decimal": 58957
  }, {
    "icon_id": "24855817",
    "name": "more-filled",
    "font_class": "more-filled",
    "unicode": "e64e",
    "unicode_decimal": 58958
  }, {
    "icon_id": "24855818",
    "name": "undo",
    "font_class": "undo",
    "unicode": "e64f",
    "unicode_decimal": 58959
  }, {
    "icon_id": "24855819",
    "name": "images",
    "font_class": "images",
    "unicode": "e650",
    "unicode_decimal": 58960
  }, {
    "icon_id": "24855821",
    "name": "paperclip",
    "font_class": "paperclip",
    "unicode": "e652",
    "unicode_decimal": 58962
  }, {
    "icon_id": "24855822",
    "name": "settings",
    "font_class": "settings",
    "unicode": "e653",
    "unicode_decimal": 58963
  }, {
    "icon_id": "24855823",
    "name": "search",
    "font_class": "search",
    "unicode": "e654",
    "unicode_decimal": 58964
  }, {
    "icon_id": "24855824",
    "name": "redo-filled",
    "font_class": "redo-filled",
    "unicode": "e655",
    "unicode_decimal": 58965
  }, {
    "icon_id": "24841702",
    "name": "list",
    "font_class": "list",
    "unicode": "e644",
    "unicode_decimal": 58948
  }, {
    "icon_id": "24841489",
    "name": "mail-open-filled",
    "font_class": "mail-open-filled",
    "unicode": "e63a",
    "unicode_decimal": 58938
  }, {
    "icon_id": "24841491",
    "name": "hand-thumbsdown-filled",
    "font_class": "hand-down-filled",
    "unicode": "e63c",
    "unicode_decimal": 58940
  }, {
    "icon_id": "24841492",
    "name": "hand-thumbsdown",
    "font_class": "hand-down",
    "unicode": "e63d",
    "unicode_decimal": 58941
  }, {
    "icon_id": "24841493",
    "name": "hand-thumbsup-filled",
    "font_class": "hand-up-filled",
    "unicode": "e63e",
    "unicode_decimal": 58942
  }, {
    "icon_id": "24841494",
    "name": "hand-thumbsup",
    "font_class": "hand-up",
    "unicode": "e63f",
    "unicode_decimal": 58943
  }, {
    "icon_id": "24841496",
    "name": "heart-filled",
    "font_class": "heart-filled",
    "unicode": "e641",
    "unicode_decimal": 58945
  }, {
    "icon_id": "24841498",
    "name": "mail-open",
    "font_class": "mail-open",
    "unicode": "e643",
    "unicode_decimal": 58947
  }, {
    "icon_id": "24841488",
    "name": "heart",
    "font_class": "heart",
    "unicode": "e639",
    "unicode_decimal": 58937
  }, {
    "icon_id": "24839963",
    "name": "loop",
    "font_class": "loop",
    "unicode": "e633",
    "unicode_decimal": 58931
  }, {
    "icon_id": "24839866",
    "name": "pulldown",
    "font_class": "pulldown",
    "unicode": "e632",
    "unicode_decimal": 58930
  }, {
    "icon_id": "24813798",
    "name": "scan",
    "font_class": "scan",
    "unicode": "e62a",
    "unicode_decimal": 58922
  }, {
    "icon_id": "24813786",
    "name": "bars",
    "font_class": "bars",
    "unicode": "e627",
    "unicode_decimal": 58919
  }, {
    "icon_id": "24813788",
    "name": "cart-filled",
    "font_class": "cart-filled",
    "unicode": "e629",
    "unicode_decimal": 58921
  }, {
    "icon_id": "24813790",
    "name": "checkbox",
    "font_class": "checkbox",
    "unicode": "e62b",
    "unicode_decimal": 58923
  }, {
    "icon_id": "24813791",
    "name": "checkbox-filled",
    "font_class": "checkbox-filled",
    "unicode": "e62c",
    "unicode_decimal": 58924
  }, {
    "icon_id": "24813794",
    "name": "shop",
    "font_class": "shop",
    "unicode": "e62f",
    "unicode_decimal": 58927
  }, {
    "icon_id": "24813795",
    "name": "headphones",
    "font_class": "headphones",
    "unicode": "e630",
    "unicode_decimal": 58928
  }, {
    "icon_id": "24813796",
    "name": "cart",
    "font_class": "cart",
    "unicode": "e631",
    "unicode_decimal": 58929
  }]
};
exports.default = _default;

/***/ }),

/***/ 34:
/*!*****************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/node_modules/tim-wx-sdk/tim-wx.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, wx, uni) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ 13);
!function (e, t) {
  "object" == ( false ? undefined : _typeof(exports)) && "undefined" != typeof module ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(this, function () {
  function e(e, t) {
    var o = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      t && (n = n.filter(function (t) {
        return Object.getOwnPropertyDescriptor(e, t).enumerable;
      })), o.push.apply(o, n);
    }
    return o;
  }
  function t(t) {
    for (var o = 1; o < arguments.length; o++) {
      var n = null != arguments[o] ? arguments[o] : {};
      o % 2 ? e(Object(n), !0).forEach(function (e) {
        r(t, e, n[e]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : e(Object(n)).forEach(function (e) {
        Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e));
      });
    }
    return t;
  }
  function o(e) {
    return (o = "function" == typeof Symbol && "symbol" == _typeof(Symbol.iterator) ? function (e) {
      return _typeof(e);
    } : function (e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : _typeof(e);
    })(e);
  }
  function n(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }
  function a(e, t) {
    for (var o = 0; o < t.length; o++) {
      var n = t[o];
      n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
    }
  }
  function s(e, t, o) {
    return t && a(e.prototype, t), o && a(e, o), Object.defineProperty(e, "prototype", {
      writable: !1
    }), e;
  }
  function r(e, t, o) {
    return t in e ? Object.defineProperty(e, t, {
      value: o,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = o, e;
  }
  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        writable: !0,
        configurable: !0
      }
    }), Object.defineProperty(e, "prototype", {
      writable: !1
    }), t && u(e, t);
  }
  function c(e) {
    return (c = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
      return e.__proto__ || Object.getPrototypeOf(e);
    })(e);
  }
  function u(e, t) {
    return (u = Object.setPrototypeOf || function (e, t) {
      return e.__proto__ = t, e;
    })(e, t);
  }
  function l() {
    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ("function" == typeof Proxy) return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
    } catch (e) {
      return !1;
    }
  }
  function d(e, t, o) {
    return (d = l() ? Reflect.construct : function (e, t, o) {
      var n = [null];
      n.push.apply(n, t);
      var a = new (Function.bind.apply(e, n))();
      return o && u(a, o.prototype), a;
    }).apply(null, arguments);
  }
  function p(e) {
    var t = "function" == typeof Map ? new Map() : void 0;
    return (p = function p(e) {
      if (null === e || (o = e, -1 === Function.toString.call(o).indexOf("[native code]"))) return e;
      var o;
      if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");
      if (void 0 !== t) {
        if (t.has(e)) return t.get(e);
        t.set(e, n);
      }
      function n() {
        return d(e, arguments, c(this).constructor);
      }
      return n.prototype = Object.create(e.prototype, {
        constructor: {
          value: n,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      }), u(n, e);
    })(e);
  }
  function g(e, t) {
    if (null == e) return {};
    var o,
      n,
      a = function (e, t) {
        if (null == e) return {};
        var o,
          n,
          a = {},
          s = Object.keys(e);
        for (n = 0; n < s.length; n++) {
          o = s[n], t.indexOf(o) >= 0 || (a[o] = e[o]);
        }
        return a;
      }(e, t);
    if (Object.getOwnPropertySymbols) {
      var s = Object.getOwnPropertySymbols(e);
      for (n = 0; n < s.length; n++) {
        o = s[n], t.indexOf(o) >= 0 || Object.prototype.propertyIsEnumerable.call(e, o) && (a[o] = e[o]);
      }
    }
    return a;
  }
  function _(e) {
    if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }
  function h(e, t) {
    if (t && ("object" == _typeof(t) || "function" == typeof t)) return t;
    if (void 0 !== t) throw new TypeError("Derived constructors may only return object or undefined");
    return _(e);
  }
  function f(e) {
    var t = l();
    return function () {
      var o,
        n = c(e);
      if (t) {
        var a = c(this).constructor;
        o = Reflect.construct(n, arguments, a);
      } else o = n.apply(this, arguments);
      return h(this, o);
    };
  }
  function m(e, t) {
    return v(e) || function (e, t) {
      var o = null == e ? null : "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
      if (null == o) return;
      var n,
        a,
        s = [],
        r = !0,
        i = !1;
      try {
        for (o = o.call(e); !(r = (n = o.next()).done) && (s.push(n.value), !t || s.length !== t); r = !0) {
          ;
        }
      } catch (c) {
        i = !0, a = c;
      } finally {
        try {
          r || null == o.return || o.return();
        } finally {
          if (i) throw a;
        }
      }
      return s;
    }(e, t) || I(e, t) || T();
  }
  function M(e) {
    return function (e) {
      if (Array.isArray(e)) return E(e);
    }(e) || y(e) || I(e) || function () {
      throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
  }
  function v(e) {
    if (Array.isArray(e)) return e;
  }
  function y(e) {
    if ("undefined" != typeof Symbol && null != e[Symbol.iterator] || null != e["@@iterator"]) return Array.from(e);
  }
  function I(e, t) {
    if (e) {
      if ("string" == typeof e) return E(e, t);
      var o = Object.prototype.toString.call(e).slice(8, -1);
      return "Object" === o && e.constructor && (o = e.constructor.name), "Map" === o || "Set" === o ? Array.from(e) : "Arguments" === o || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o) ? E(e, t) : void 0;
    }
  }
  function E(e, t) {
    (null == t || t > e.length) && (t = e.length);
    for (var o = 0, n = new Array(t); o < t; o++) {
      n[o] = e[o];
    }
    return n;
  }
  function T() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  function C(e, t) {
    var o = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
    if (!o) {
      if (Array.isArray(e) || (o = I(e)) || t && e && "number" == typeof e.length) {
        o && (e = o);
        var _n2 = 0,
          a = function a() {};
        return {
          s: a,
          n: function n() {
            return _n2 >= e.length ? {
              done: !0
            } : {
              done: !1,
              value: e[_n2++]
            };
          },
          e: function e(_e2) {
            throw _e2;
          },
          f: a
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var s,
      r = !0,
      i = !1;
    return {
      s: function s() {
        o = o.call(e);
      },
      n: function n() {
        var e = o.next();
        return r = e.done, e;
      },
      e: function e(_e3) {
        i = !0, s = _e3;
      },
      f: function f() {
        try {
          r || null == o.return || o.return();
        } finally {
          if (i) throw s;
        }
      }
    };
  }
  var S = {
      SDK_READY: "sdkStateReady",
      SDK_NOT_READY: "sdkStateNotReady",
      SDK_DESTROY: "sdkDestroy",
      MESSAGE_RECEIVED: "onMessageReceived",
      MESSAGE_MODIFIED: "onMessageModified",
      MESSAGE_REVOKED: "onMessageRevoked",
      MESSAGE_READ_BY_PEER: "onMessageReadByPeer",
      MESSAGE_READ_RECEIPT_RECEIVED: "onMessageReadReceiptReceived",
      CONVERSATION_LIST_UPDATED: "onConversationListUpdated",
      GROUP_LIST_UPDATED: "onGroupListUpdated",
      GROUP_SYSTEM_NOTICE_RECEIVED: "receiveGroupSystemNotice",
      GROUP_ATTRIBUTES_UPDATED: "groupAttributesUpdated",
      TOPIC_CREATED: "onTopicCreated",
      TOPIC_DELETED: "onTopicDeleted",
      TOPIC_UPDATED: "onTopicUpdated",
      PROFILE_UPDATED: "onProfileUpdated",
      BLACKLIST_UPDATED: "blacklistUpdated",
      FRIEND_LIST_UPDATED: "onFriendListUpdated",
      FRIEND_GROUP_LIST_UPDATED: "onFriendGroupListUpdated",
      FRIEND_APPLICATION_LIST_UPDATED: "onFriendApplicationListUpdated",
      KICKED_OUT: "kickedOut",
      ERROR: "error",
      NET_STATE_CHANGE: "netStateChange",
      SDK_RELOAD: "sdkReload"
    },
    D = {
      MSG_TEXT: "TIMTextElem",
      MSG_IMAGE: "TIMImageElem",
      MSG_SOUND: "TIMSoundElem",
      MSG_AUDIO: "TIMSoundElem",
      MSG_FILE: "TIMFileElem",
      MSG_FACE: "TIMFaceElem",
      MSG_VIDEO: "TIMVideoFileElem",
      MSG_GEO: "TIMLocationElem",
      MSG_LOCATION: "TIMLocationElem",
      MSG_GRP_TIP: "TIMGroupTipElem",
      MSG_GRP_SYS_NOTICE: "TIMGroupSystemNoticeElem",
      MSG_CUSTOM: "TIMCustomElem",
      MSG_MERGER: "TIMRelayElem",
      MSG_PRIORITY_HIGH: "High",
      MSG_PRIORITY_NORMAL: "Normal",
      MSG_PRIORITY_LOW: "Low",
      MSG_PRIORITY_LOWEST: "Lowest",
      CONV_C2C: "C2C",
      CONV_GROUP: "GROUP",
      CONV_TOPIC: "TOPIC",
      CONV_SYSTEM: "@TIM#SYSTEM",
      CONV_AT_ME: 1,
      CONV_AT_ALL: 2,
      CONV_AT_ALL_AT_ME: 3,
      GRP_PRIVATE: "Private",
      GRP_WORK: "Private",
      GRP_PUBLIC: "Public",
      GRP_CHATROOM: "ChatRoom",
      GRP_MEETING: "ChatRoom",
      GRP_AVCHATROOM: "AVChatRoom",
      GRP_COMMUNITY: "Community",
      GRP_MBR_ROLE_OWNER: "Owner",
      GRP_MBR_ROLE_ADMIN: "Admin",
      GRP_MBR_ROLE_MEMBER: "Member",
      GRP_MBR_ROLE_CUSTOM: "Custom",
      GRP_TIP_MBR_JOIN: 1,
      GRP_TIP_MBR_QUIT: 2,
      GRP_TIP_MBR_KICKED_OUT: 3,
      GRP_TIP_MBR_SET_ADMIN: 4,
      GRP_TIP_MBR_CANCELED_ADMIN: 5,
      GRP_TIP_GRP_PROFILE_UPDATED: 6,
      GRP_TIP_MBR_PROFILE_UPDATED: 7,
      MSG_REMIND_ACPT_AND_NOTE: "AcceptAndNotify",
      MSG_REMIND_ACPT_NOT_NOTE: "AcceptNotNotify",
      MSG_REMIND_DISCARD: "Discard",
      GENDER_UNKNOWN: "Gender_Type_Unknown",
      GENDER_FEMALE: "Gender_Type_Female",
      GENDER_MALE: "Gender_Type_Male",
      KICKED_OUT_MULT_ACCOUNT: "multipleAccount",
      KICKED_OUT_MULT_DEVICE: "multipleDevice",
      KICKED_OUT_USERSIG_EXPIRED: "userSigExpired",
      KICKED_OUT_REST_API: "REST_API_Kick",
      ALLOW_TYPE_ALLOW_ANY: "AllowType_Type_AllowAny",
      ALLOW_TYPE_NEED_CONFIRM: "AllowType_Type_NeedConfirm",
      ALLOW_TYPE_DENY_ANY: "AllowType_Type_DenyAny",
      FORBID_TYPE_NONE: "AdminForbid_Type_None",
      FORBID_TYPE_SEND_OUT: "AdminForbid_Type_SendOut",
      JOIN_OPTIONS_FREE_ACCESS: "FreeAccess",
      JOIN_OPTIONS_NEED_PERMISSION: "NeedPermission",
      JOIN_OPTIONS_DISABLE_APPLY: "DisableApply",
      JOIN_STATUS_SUCCESS: "JoinedSuccess",
      JOIN_STATUS_ALREADY_IN_GROUP: "AlreadyInGroup",
      JOIN_STATUS_WAIT_APPROVAL: "WaitAdminApproval",
      GRP_PROFILE_OWNER_ID: "ownerID",
      GRP_PROFILE_CREATE_TIME: "createTime",
      GRP_PROFILE_LAST_INFO_TIME: "lastInfoTime",
      GRP_PROFILE_MEMBER_NUM: "memberNum",
      GRP_PROFILE_MAX_MEMBER_NUM: "maxMemberNum",
      GRP_PROFILE_JOIN_OPTION: "joinOption",
      GRP_PROFILE_INTRODUCTION: "introduction",
      GRP_PROFILE_NOTIFICATION: "notification",
      GRP_PROFILE_MUTE_ALL_MBRS: "muteAllMembers",
      SNS_ADD_TYPE_SINGLE: "Add_Type_Single",
      SNS_ADD_TYPE_BOTH: "Add_Type_Both",
      SNS_DELETE_TYPE_SINGLE: "Delete_Type_Single",
      SNS_DELETE_TYPE_BOTH: "Delete_Type_Both",
      SNS_APPLICATION_TYPE_BOTH: "Pendency_Type_Both",
      SNS_APPLICATION_SENT_TO_ME: "Pendency_Type_ComeIn",
      SNS_APPLICATION_SENT_BY_ME: "Pendency_Type_SendOut",
      SNS_APPLICATION_AGREE: "Response_Action_Agree",
      SNS_APPLICATION_AGREE_AND_ADD: "Response_Action_AgreeAndAdd",
      SNS_CHECK_TYPE_BOTH: "CheckResult_Type_Both",
      SNS_CHECK_TYPE_SINGLE: "CheckResult_Type_Single",
      SNS_TYPE_NO_RELATION: "CheckResult_Type_NoRelation",
      SNS_TYPE_A_WITH_B: "CheckResult_Type_AWithB",
      SNS_TYPE_B_WITH_A: "CheckResult_Type_BWithA",
      SNS_TYPE_BOTH_WAY: "CheckResult_Type_BothWay",
      NET_STATE_CONNECTED: "connected",
      NET_STATE_CONNECTING: "connecting",
      NET_STATE_DISCONNECTED: "disconnected",
      MSG_AT_ALL: "__kImSDK_MesssageAtALL__",
      READ_ALL_C2C_MSG: "readAllC2CMessage",
      READ_ALL_GROUP_MSG: "readAllGroupMessage",
      READ_ALL_MSG: "readAllMessage"
    },
    N = function () {
      function e() {
        n(this, e), this.cache = [], this.options = null;
      }
      return s(e, [{
        key: "use",
        value: function value(e) {
          if ("function" != typeof e) throw "middleware must be a function";
          return this.cache.push(e), this;
        }
      }, {
        key: "next",
        value: function value(e) {
          if (this.middlewares && this.middlewares.length > 0) return this.middlewares.shift().call(this, this.options, this.next.bind(this));
        }
      }, {
        key: "run",
        value: function value(e) {
          return this.middlewares = this.cache.map(function (e) {
            return e;
          }), this.options = e, this.next();
        }
      }]), e;
    }(),
    A = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
  function O(e, t) {
    return e(t = {
      exports: {}
    }, t.exports), t.exports;
  }
  var R = O(function (e, t) {
      var o, n, a, s, r, i, c, u, l, d, p, g, _, h, f, m, M, v;
      e.exports = (o = "function" == typeof Promise, n = "object" == (typeof self === "undefined" ? "undefined" : _typeof(self)) ? self : A, a = "undefined" != typeof Symbol, s = "undefined" != typeof Map, r = "undefined" != typeof Set, i = "undefined" != typeof WeakMap, c = "undefined" != typeof WeakSet, u = "undefined" != typeof DataView, l = a && void 0 !== Symbol.iterator, d = a && void 0 !== Symbol.toStringTag, p = r && "function" == typeof Set.prototype.entries, g = s && "function" == typeof Map.prototype.entries, _ = p && Object.getPrototypeOf(new Set().entries()), h = g && Object.getPrototypeOf(new Map().entries()), f = l && "function" == typeof Array.prototype[Symbol.iterator], m = f && Object.getPrototypeOf([][Symbol.iterator]()), M = l && "function" == typeof String.prototype[Symbol.iterator], v = M && Object.getPrototypeOf(""[Symbol.iterator]()), function (e) {
        var t = _typeof(e);
        if ("object" !== t) return t;
        if (null === e) return "null";
        if (e === n) return "global";
        if (Array.isArray(e) && (!1 === d || !(Symbol.toStringTag in e))) return "Array";
        if ("object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && null !== window) {
          if ("object" == _typeof(window.location) && e === window.location) return "Location";
          if ("object" == _typeof(window.document) && e === window.document) return "Document";
          if ("object" == _typeof(window.navigator)) {
            if ("object" == _typeof(window.navigator.mimeTypes) && e === window.navigator.mimeTypes) return "MimeTypeArray";
            if ("object" == _typeof(window.navigator.plugins) && e === window.navigator.plugins) return "PluginArray";
          }
          if (("function" == typeof window.HTMLElement || "object" == _typeof(window.HTMLElement)) && e instanceof window.HTMLElement) {
            if ("BLOCKQUOTE" === e.tagName) return "HTMLQuoteElement";
            if ("TD" === e.tagName) return "HTMLTableDataCellElement";
            if ("TH" === e.tagName) return "HTMLTableHeaderCellElement";
          }
        }
        var a = d && e[Symbol.toStringTag];
        if ("string" == typeof a) return a;
        var l = Object.getPrototypeOf(e);
        return l === RegExp.prototype ? "RegExp" : l === Date.prototype ? "Date" : o && l === Promise.prototype ? "Promise" : r && l === Set.prototype ? "Set" : s && l === Map.prototype ? "Map" : c && l === WeakSet.prototype ? "WeakSet" : i && l === WeakMap.prototype ? "WeakMap" : u && l === DataView.prototype ? "DataView" : s && l === h ? "Map Iterator" : r && l === _ ? "Set Iterator" : f && l === m ? "Array Iterator" : M && l === v ? "String Iterator" : null === l ? "Object" : Object.prototype.toString.call(e).slice(8, -1);
      });
    }),
    L = function () {
      function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
          o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        n(this, e), this.high = t, this.low = o;
      }
      return s(e, [{
        key: "equal",
        value: function value(e) {
          return null !== e && this.low === e.low && this.high === e.high;
        }
      }, {
        key: "toString",
        value: function value() {
          var e = Number(this.high).toString(16),
            t = Number(this.low).toString(16);
          if (t.length < 8) for (var o = 8 - t.length; o;) {
            t = "0" + t, o--;
          }
          return e + t;
        }
      }]), e;
    }(),
    k = {
      TEST: {
        CHINA: {
          DEFAULT: "wss://wss-dev.tim.qq.com"
        },
        OVERSEA: {
          DEFAULT: "wss://wss-dev.tim.qq.com"
        },
        SINGAPORE: {
          DEFAULT: "wss://wsssgp-dev.im.qcloud.com"
        },
        KOREA: {
          DEFAULT: "wss://wsskr-dev.im.qcloud.com"
        },
        GERMANY: {
          DEFAULT: "wss://wssger-dev.im.qcloud.com"
        },
        IND: {
          DEFAULT: "wss://wssind-dev.im.qcloud.com"
        }
      },
      PRODUCTION: {
        CHINA: {
          DEFAULT: "wss://wss.im.qcloud.com",
          BACKUP: "wss://wss.tim.qq.com",
          STAT: "https://api.im.qcloud.com"
        },
        OVERSEA: {
          DEFAULT: "wss://wss.im.qcloud.com",
          BACKUP: "wss://wss.my-imcloud.com",
          STAT: "https://api.my-imcloud.com"
        },
        SINGAPORE: {
          DEFAULT: "wss://wsssgp.im.qcloud.com",
          BACKUP: "wss://wsssgp.my-imcloud.com",
          STAT: "https://apisgp.my-imcloud.com"
        },
        KOREA: {
          DEFAULT: "wss://wsskr.im.qcloud.com",
          BACKUP: "wss://wsskr.my-imcloud.com",
          STAT: "https://apikr.my-imcloud.com"
        },
        GERMANY: {
          DEFAULT: "wss://wssger.im.qcloud.com",
          BACKUP: "wss://wssger.my-imcloud.com",
          STAT: "https://apiger.my-imcloud.com"
        },
        IND: {
          DEFAULT: "wss://wssind.im.qcloud.com",
          BACKUP: "wss://wssind.my-imcloud.com",
          STAT: "https://apiind.my-imcloud.com"
        }
      }
    },
    G = {
      WEB: 7,
      WX_MP: 8,
      QQ_MP: 9,
      TT_MP: 10,
      BAIDU_MP: 11,
      ALI_MP: 12,
      UNI_NATIVE_APP: 15
    },
    P = "1.7.3",
    U = 537048168,
    w = "CHINA",
    b = "OVERSEA",
    F = "SINGAPORE",
    q = "KOREA",
    V = "GERMANY",
    K = "IND",
    H = {
      HOST: {
        CURRENT: {
          DEFAULT: "wss://wss.im.qcloud.com",
          STAT: "https://api.im.qcloud.com"
        },
        setCurrent: function setCurrent() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : w;
          this.CURRENT = k.PRODUCTION[e];
        }
      },
      NAME: {
        OPEN_IM: "openim",
        GROUP: "group_open_http_svc",
        GROUP_COMMUNITY: "million_group_open_http_svc",
        GROUP_ATTR: "group_open_attr_http_svc",
        FRIEND: "sns",
        PROFILE: "profile",
        RECENT_CONTACT: "recentcontact",
        PIC: "openpic",
        BIG_GROUP_NO_AUTH: "group_open_http_noauth_svc",
        BIG_GROUP_LONG_POLLING: "group_open_long_polling_http_svc",
        BIG_GROUP_LONG_POLLING_NO_AUTH: "group_open_long_polling_http_noauth_svc",
        IM_OPEN_STAT: "imopenstat",
        WEB_IM: "webim",
        IM_COS_SIGN: "im_cos_sign_svr",
        CUSTOM_UPLOAD: "im_cos_msg",
        HEARTBEAT: "heartbeat",
        IM_OPEN_PUSH: "im_open_push",
        IM_OPEN_STATUS: "im_open_status",
        IM_LONG_MESSAGE: "im_long_msg",
        IM_CONFIG_MANAGER: "im_sdk_config_mgr",
        STAT_SERVICE: "StatSvc",
        OVERLOAD_PUSH: "OverLoadPush"
      },
      CMD: {
        ACCESS_LAYER: "accesslayer",
        LOGIN: "wslogin",
        LOGOUT_LONG_POLL: "longpollinglogout",
        LOGOUT: "wslogout",
        HELLO: "wshello",
        PORTRAIT_GET: "portrait_get_all",
        PORTRAIT_SET: "portrait_set",
        GET_LONG_POLL_ID: "getlongpollingid",
        LONG_POLL: "longpolling",
        AVCHATROOM_LONG_POLL: "get_msg",
        ADD_FRIEND: "friend_add",
        UPDATE_FRIEND: "friend_update",
        GET_FRIEND_LIST: "friend_get",
        GET_FRIEND_PROFILE: "friend_get_list",
        DELETE_FRIEND: "friend_delete",
        CHECK_FRIEND: "friend_check",
        GET_FRIEND_GROUP_LIST: "group_get",
        RESPOND_FRIEND_APPLICATION: "friend_response",
        GET_FRIEND_APPLICATION_LIST: "pendency_get",
        DELETE_FRIEND_APPLICATION: "pendency_delete",
        REPORT_FRIEND_APPLICATION: "pendency_report",
        GET_GROUP_APPLICATION: "get_pendency",
        CREATE_FRIEND_GROUP: "group_add",
        DELETE_FRIEND_GROUP: "group_delete",
        UPDATE_FRIEND_GROUP: "group_update",
        GET_BLACKLIST: "black_list_get",
        ADD_BLACKLIST: "black_list_add",
        DELETE_BLACKLIST: "black_list_delete",
        CREATE_GROUP: "create_group",
        GET_JOINED_GROUPS: "get_joined_group_list",
        SET_GROUP_ATTRIBUTES: "set_group_attr",
        MODIFY_GROUP_ATTRIBUTES: "modify_group_attr",
        DELETE_GROUP_ATTRIBUTES: "delete_group_attr",
        CLEAR_GROUP_ATTRIBUTES: "clear_group_attr",
        GET_GROUP_ATTRIBUTES: "get_group_attr",
        SEND_MESSAGE: "sendmsg",
        REVOKE_C2C_MESSAGE: "msgwithdraw",
        DELETE_C2C_MESSAGE: "delete_c2c_msg_ramble",
        MODIFY_C2C_MESSAGE: "modify_c2c_msg",
        SEND_GROUP_MESSAGE: "send_group_msg",
        REVOKE_GROUP_MESSAGE: "group_msg_recall",
        DELETE_GROUP_MESSAGE: "delete_group_ramble_msg_by_seq",
        MODIFY_GROUP_MESSAGE: "modify_group_msg",
        GET_GROUP_INFO: "get_group_self_member_info",
        GET_GROUP_MEMBER_INFO: "get_specified_group_member_info",
        GET_GROUP_MEMBER_LIST: "get_group_member_info",
        QUIT_GROUP: "quit_group",
        CHANGE_GROUP_OWNER: "change_group_owner",
        DESTROY_GROUP: "destroy_group",
        ADD_GROUP_MEMBER: "add_group_member",
        DELETE_GROUP_MEMBER: "delete_group_member",
        SEARCH_GROUP_BY_ID: "get_group_public_info",
        APPLY_JOIN_GROUP: "apply_join_group",
        HANDLE_APPLY_JOIN_GROUP: "handle_apply_join_group",
        HANDLE_GROUP_INVITATION: "handle_invite_join_group",
        MODIFY_GROUP_INFO: "modify_group_base_info",
        MODIFY_GROUP_MEMBER_INFO: "modify_group_member_info",
        DELETE_GROUP_SYSTEM_MESSAGE: "deletemsg",
        DELETE_GROUP_AT_TIPS: "deletemsg",
        GET_CONVERSATION_LIST: "get",
        PAGING_GET_CONVERSATION_LIST: "page_get",
        DELETE_CONVERSATION: "delete",
        PIN_CONVERSATION: "top",
        GET_MESSAGES: "getmsg",
        GET_C2C_ROAM_MESSAGES: "getroammsg",
        SET_C2C_PEER_MUTE_NOTIFICATIONS: "set_c2c_peer_mute_notifications",
        GET_C2C_PEER_MUTE_NOTIFICATIONS: "get_c2c_peer_mute_notifications",
        GET_GROUP_ROAM_MESSAGES: "group_msg_get",
        GET_READ_RECEIPT: "get_group_msg_receipt",
        GET_READ_RECEIPT_DETAIL: "get_group_msg_receipt_detail",
        SEND_READ_RECEIPT: "group_msg_receipt",
        SEND_C2C_READ_RECEIPT: "c2c_msg_read_receipt",
        SET_C2C_MESSAGE_READ: "msgreaded",
        GET_PEER_READ_TIME: "get_peer_read_time",
        SET_GROUP_MESSAGE_READ: "msg_read_report",
        FILE_READ_AND_WRITE_AUTHKEY: "authkey",
        FILE_UPLOAD: "pic_up",
        COS_SIGN: "cos",
        COS_PRE_SIG: "pre_sig",
        VIDEO_COVER: "video_cover",
        TIM_WEB_REPORT_V2: "tim_web_report_v2",
        BIG_DATA_HALLWAY_AUTH_KEY: "authkey",
        GET_ONLINE_MEMBER_NUM: "get_online_member_num",
        ALIVE: "alive",
        MESSAGE_PUSH: "msg_push",
        MULTI_MESSAGE_PUSH: "multi_msg_push_ws",
        MESSAGE_PUSH_ACK: "ws_msg_push_ack",
        STATUS_FORCE_OFFLINE: "stat_forceoffline",
        DOWNLOAD_MERGER_MESSAGE: "get_relay_json_msg",
        UPLOAD_MERGER_MESSAGE: "save_relay_json_msg",
        FETCH_CLOUD_CONTROL_CONFIG: "fetch_config",
        PUSHED_CLOUD_CONTROL_CONFIG: "push_configv2",
        FETCH_COMMERCIAL_CONFIG: "fetch_imsdk_purchase_bitsv2",
        PUSHED_COMMERCIAL_CONFIG: "push_imsdk_purchase_bitsv2",
        KICK_OTHER: "KickOther",
        OVERLOAD_NOTIFY: "notify2",
        SET_ALL_MESSAGE_READ: "read_all_unread_msg",
        CREATE_TOPIC: "create_topic",
        DELETE_TOPIC: "destroy_topic",
        UPDATE_TOPIC_PROFILE: "modify_topic",
        GET_TOPIC_LIST: "get_topic"
      },
      CHANNEL: {
        SOCKET: 1,
        XHR: 2,
        AUTO: 0
      },
      NAME_VERSION: {
        openim: "v4",
        group_open_http_svc: "v4",
        sns: "v4",
        profile: "v4",
        recentcontact: "v4",
        openpic: "v4",
        group_open_http_noauth_svc: "v4",
        group_open_long_polling_http_svc: "v4",
        group_open_long_polling_http_noauth_svc: "v4",
        imopenstat: "v4",
        im_cos_sign_svr: "v4",
        im_cos_msg: "v4",
        webim: "v4",
        im_open_push: "v4",
        im_open_status: "v4"
      }
    },
    B = {
      SEARCH_MSG: new L(0, Math.pow(2, 0)).toString(),
      SEARCH_GRP_SNS: new L(0, Math.pow(2, 1)).toString(),
      AVCHATROOM_HISTORY_MSG: new L(0, Math.pow(2, 2)).toString(),
      GRP_COMMUNITY: new L(0, Math.pow(2, 3)).toString(),
      MSG_TO_SPECIFIED_GRP_MBR: new L(0, Math.pow(2, 4)).toString()
    };
  H.HOST.setCurrent(w);
  var x,
    W,
    Y,
    j,
    $ = "undefined" != typeof wx && "function" == typeof wx.getSystemInfoSync && Boolean(wx.getSystemInfoSync().fontSizeSetting),
    z = "undefined" != typeof qq && "function" == typeof qq.getSystemInfoSync && Boolean(qq.getSystemInfoSync().fontSizeSetting),
    J = "undefined" != typeof tt && "function" == typeof tt.getSystemInfoSync && Boolean(tt.getSystemInfoSync().fontSizeSetting),
    X = "undefined" != typeof swan && "function" == typeof swan.getSystemInfoSync && Boolean(swan.getSystemInfoSync().fontSizeSetting),
    Q = "undefined" != typeof my && "function" == typeof my.getSystemInfoSync && Boolean(my.getSystemInfoSync().fontSizeSetting),
    Z = "undefined" != typeof uni && "undefined" == typeof window,
    ee = "undefined" != typeof uni,
    te = $ || z || J || X || Q || Z,
    oe = ("undefined" != typeof uni || "undefined" != typeof window) && !te,
    ne = z ? qq : J ? tt : X ? swan : Q ? my : $ ? wx : Z ? uni : {},
    ae = (x = "WEB", ve ? x = "WEB" : z ? x = "QQ_MP" : J ? x = "TT_MP" : X ? x = "BAIDU_MP" : Q ? x = "ALI_MP" : $ ? x = "WX_MP" : Z && (x = "UNI_NATIVE_APP"), G[x]),
    se = oe && window && window.navigator && window.navigator.userAgent || "",
    re = /AppleWebKit\/([\d.]+)/i.exec(se),
    ie = (re && parseFloat(re.pop()), /iPad/i.test(se)),
    ce = /iPhone/i.test(se) && !ie,
    ue = /iPod/i.test(se),
    le = ce || ie || ue,
    de = (W = se.match(/OS (\d+)_/i)) && W[1] ? W[1] : null,
    pe = /Android/i.test(se),
    ge = function () {
      var e = se.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);
      if (!e) return null;
      var t = e[1] && parseFloat(e[1]),
        o = e[2] && parseFloat(e[2]);
      return t && o ? parseFloat(e[1] + "." + e[2]) : t || null;
    }(),
    _e = (pe && /webkit/i.test(se), /Firefox/i.test(se), /Edge/i.test(se)),
    he = !_e && /Chrome/i.test(se),
    fe = (function () {
      var e = se.match(/Chrome\/(\d+)/);
      e && e[1] && parseFloat(e[1]);
    }(), /MSIE/.test(se) || se.indexOf("Trident") > -1 && se.indexOf("rv:11.0") > -1),
    me = (/MSIE\s8\.0/.test(se), function () {
      var e = /MSIE\s(\d+)\.\d/.exec(se),
        t = e && parseFloat(e[1]);
      return !t && /Trident\/7.0/i.test(se) && /rv:11.0/.test(se) && (t = 11), t;
    }()),
    Me = (/Safari/i.test(se), /TBS\/\d+/i.test(se)),
    ve = (function () {
      var e = se.match(/TBS\/(\d+)/i);
      if (e && e[1]) e[1];
    }(), !Me && /MQQBrowser\/\d+/i.test(se), !Me && / QQBrowser\/\d+/i.test(se), /(micromessenger|webbrowser)/i.test(se)),
    ye = /Windows/i.test(se),
    Ie = /MAC OS X/i.test(se),
    Ee = (/MicroMessenger/i.test(se), oe && "undefined" != typeof Worker && !fe),
    Te = pe || le,
    Ce = "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {};
  Y = "undefined" != typeof console ? console : void 0 !== Ce && Ce.console ? Ce.console : "undefined" != typeof window && window.console ? window.console : {};
  for (var Se = function Se() {}, De = ["assert", "clear", "count", "debug", "dir", "dirxml", "error", "group", "groupCollapsed", "groupEnd", "info", "log", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn"], Ne = De.length; Ne--;) {
    j = De[Ne], console[j] || (Y[j] = Se);
  }
  var Ae = Y,
    Oe = 0,
    Re = function Re() {
      return new Date().getTime() + Oe;
    },
    Le = function Le() {
      Oe = 0;
    },
    ke = function ke() {
      return Math.floor(Re() / 1e3);
    },
    Ge = 0,
    Pe = new Map();
  function Ue() {
    var e,
      t = ((e = new Date()).setTime(Re()), e);
    return "TIM " + t.toLocaleTimeString("en-US", {
      hour12: !1
    }) + "." + function (e) {
      var t;
      switch (e.toString().length) {
        case 1:
          t = "00" + e;
          break;
        case 2:
          t = "0" + e;
          break;
        default:
          t = e;
      }
      return t;
    }(t.getMilliseconds()) + ":";
  }
  var we = {
      arguments2String: function arguments2String(e) {
        var t;
        if (1 === e.length) t = Ue() + e[0];else {
          t = Ue();
          for (var o = 0, n = e.length; o < n; o++) {
            et(e[o]) ? nt(e[o]) ? t += ut(e[o]) : t += JSON.stringify(e[o]) : t += e[o], t += " ";
          }
        }
        return t;
      },
      debug: function debug() {
        if (Ge <= -1) {
          var e = this.arguments2String(arguments);
          Ae.debug(e);
        }
      },
      log: function log() {
        if (Ge <= 0) {
          var e = this.arguments2String(arguments);
          Ae.log(e);
        }
      },
      info: function info() {
        if (Ge <= 1) {
          var e = this.arguments2String(arguments);
          Ae.info(e);
        }
      },
      warn: function warn() {
        if (Ge <= 2) {
          var e = this.arguments2String(arguments);
          Ae.warn(e);
        }
      },
      error: function error() {
        if (Ge <= 3) {
          var e = this.arguments2String(arguments);
          Ae.error(e);
        }
      },
      time: function time(e) {
        Pe.set(e, it.now());
      },
      timeEnd: function timeEnd(e) {
        if (Pe.has(e)) {
          var t = it.now() - Pe.get(e);
          return Pe.delete(e), t;
        }
        return Ae.warn("未找到对应label: ".concat(e, ", 请在调用 logger.timeEnd 前，调用 logger.time")), 0;
      },
      setLevel: function setLevel(e) {
        e < 4 && Ae.log(Ue() + "set level from " + Ge + " to " + e), Ge = e;
      },
      getLevel: function getLevel() {
        return Ge;
      }
    },
    be = {
      JPG: 1,
      JPEG: 1,
      GIF: 2,
      PNG: 3,
      BMP: 4,
      UNKNOWN: 255
    },
    Fe = {
      NICK: "Tag_Profile_IM_Nick",
      GENDER: "Tag_Profile_IM_Gender",
      BIRTHDAY: "Tag_Profile_IM_BirthDay",
      LOCATION: "Tag_Profile_IM_Location",
      SELFSIGNATURE: "Tag_Profile_IM_SelfSignature",
      ALLOWTYPE: "Tag_Profile_IM_AllowType",
      LANGUAGE: "Tag_Profile_IM_Language",
      AVATAR: "Tag_Profile_IM_Image",
      MESSAGESETTINGS: "Tag_Profile_IM_MsgSettings",
      ADMINFORBIDTYPE: "Tag_Profile_IM_AdminForbidType",
      LEVEL: "Tag_Profile_IM_Level",
      ROLE: "Tag_Profile_IM_Role"
    },
    qe = {
      UNKNOWN: "Gender_Type_Unknown",
      FEMALE: "Gender_Type_Female",
      MALE: "Gender_Type_Male"
    },
    Ve = {
      NONE: "AdminForbid_Type_None",
      SEND_OUT: "AdminForbid_Type_SendOut"
    },
    Ke = {
      NEED_CONFIRM: "AllowType_Type_NeedConfirm",
      ALLOW_ANY: "AllowType_Type_AllowAny",
      DENY_ANY: "AllowType_Type_DenyAny"
    },
    He = "JoinedSuccess",
    Be = "WaitAdminApproval",
    xe = "@TGS#_",
    We = "@TOPIC#_",
    Ye = ["url"],
    je = function je(e) {
      return "file" === at(e);
    },
    $e = function $e(e) {
      return null !== e && ("number" == typeof e && !isNaN(e - 0) || "object" === o(e) && e.constructor === Number);
    },
    ze = function ze(e) {
      return "string" == typeof e;
    },
    Je = function Je(e) {
      return null !== e && "object" === o(e);
    },
    Xe = function Xe(e) {
      if ("object" !== o(e) || null === e) return !1;
      var t = Object.getPrototypeOf(e);
      if (null === t) return !0;
      for (var n = t; null !== Object.getPrototypeOf(n);) {
        n = Object.getPrototypeOf(n);
      }
      return t === n;
    },
    Qe = function Qe(e) {
      return "function" == typeof Array.isArray ? Array.isArray(e) : "array" === at(e);
    },
    Ze = function Ze(e) {
      return void 0 === e;
    },
    et = function et(e) {
      return Qe(e) || Je(e);
    },
    ot = function ot(e) {
      return "function" == typeof e;
    },
    nt = function nt(e) {
      return e instanceof Error;
    },
    at = function at(e) {
      return Object.prototype.toString.call(e).match(/^\[object (.*)\]$/)[1].toLowerCase();
    },
    st = function st(e) {
      if ("string" != typeof e) return !1;
      var t = e[0];
      return !/[^a-zA-Z0-9]/.test(t);
    },
    rt = 0;
  Date.now || (Date.now = function () {
    return new Date().getTime();
  });
  var it = {
      now: function now() {
        0 === rt && (rt = Date.now() - 1);
        var e = Date.now() - rt;
        return e > 4294967295 ? (rt += 4294967295, Date.now() - rt) : e;
      },
      utc: function utc() {
        return Math.round(Date.now() / 1e3);
      }
    },
    ct = function e(t, o, n, a) {
      if (!et(t) || !et(o)) return 0;
      for (var s, r = 0, i = Object.keys(o), c = 0, u = i.length; c < u; c++) {
        if (s = i[c], !(Ze(o[s]) || n && n.includes(s))) if (et(t[s]) && et(o[s])) r += e(t[s], o[s], n, a);else {
          if (a && a.includes(o[s])) continue;
          t[s] !== o[s] && (t[s] = o[s], r += 1);
        }
      }
      return r;
    },
    ut = function ut(e) {
      return JSON.stringify(e, ["message", "code"]);
    },
    lt = function lt(e) {
      if (0 === e.length) return 0;
      for (var t = 0, o = 0, n = "undefined" != typeof document && void 0 !== document.characterSet ? document.characterSet : "UTF-8"; void 0 !== e[t];) {
        o += e[t++].charCodeAt[t] <= 255 ? 1 : !1 === n ? 3 : 2;
      }
      return o;
    },
    dt = function dt(e) {
      var t = e || 99999999;
      return Math.round(Math.random() * t);
    },
    pt = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    gt = pt.length,
    _t = function _t(e, t) {
      for (var o in e) {
        if (e[o] === t) return !0;
      }
      return !1;
    },
    ht = {},
    ft = function ft() {
      if (te) return "https:";
      if (oe && "undefined" == typeof window) return "https:";
      var e = window.location.protocol;
      return ["http:", "https:"].indexOf(e) < 0 && (e = "http:"), e;
    },
    mt = function mt(e) {
      return -1 === e.indexOf("http://") || -1 === e.indexOf("https://") ? "https://" + e : e.replace(/https|http/, "https");
    },
    Mt = function e(t) {
      if (0 === Object.getOwnPropertyNames(t).length) return Object.create(null);
      var n = Array.isArray(t) ? [] : Object.create(null),
        a = "";
      for (var s in t) {
        null !== t[s] ? void 0 !== t[s] ? (a = o(t[s]), ["string", "number", "function", "boolean"].indexOf(a) >= 0 ? n[s] = t[s] : n[s] = e(t[s])) : n[s] = void 0 : n[s] = null;
      }
      return n;
    };
  function vt(e, t) {
    Qe(e) && Qe(t) ? t.forEach(function (t) {
      var o = t.key,
        n = t.value,
        a = e.find(function (e) {
          return e.key === o;
        });
      a ? a.value = n : e.push({
        key: o,
        value: n
      });
    }) : we.warn("updateCustomField target 或 source 不是数组，忽略此次更新。");
  }
  var yt = function yt(e) {
      return e === D.GRP_PUBLIC;
    },
    It = function It(e) {
      return e === D.GRP_AVCHATROOM;
    },
    Et = function Et(e) {
      var t = e.type,
        o = e.groupID;
      return t === D.GRP_COMMUNITY || "".concat(o).startsWith(xe) && !"".concat(o).includes(We);
    },
    Tt = function Tt(e) {
      return "".concat(e).startsWith(xe) && "".concat(e).includes(We);
    },
    Ct = function Ct(e) {
      return ze(e) && e.slice(0, 3) === D.CONV_C2C;
    },
    St = function St(e) {
      return ze(e) && e.slice(0, 5) === D.CONV_GROUP;
    },
    Dt = function Dt(e) {
      return ze(e) && e === D.CONV_SYSTEM;
    };
  function Nt(e, t) {
    var o = {};
    return Object.keys(e).forEach(function (n) {
      o[n] = t(e[n], n);
    }), o;
  }
  function At(e) {
    return te ? new Promise(function (t, o) {
      ne.getImageInfo({
        src: e,
        success: function success(e) {
          t({
            width: e.width,
            height: e.height
          });
        },
        fail: function fail() {
          t({
            width: 0,
            height: 0
          });
        }
      });
    }) : fe && 9 === me ? Promise.resolve({
      width: 0,
      height: 0
    }) : new Promise(function (t, o) {
      var n = new Image();
      n.onload = function () {
        t({
          width: this.width,
          height: this.height
        }), n = null;
      }, n.onerror = function () {
        t({
          width: 0,
          height: 0
        }), n = null;
      }, n.src = e;
    });
  }
  function Ot() {
    function e() {
      return (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
    }
    return "".concat(e() + e()).concat(e()).concat(e()).concat(e()).concat(e()).concat(e()).concat(e());
  }
  function Rt() {
    var e = "unknown";
    if (Ie && (e = "mac"), ye && (e = "windows"), le && (e = "ios"), pe && (e = "android"), te) try {
      var t = ne.getSystemInfoSync().platform;
      void 0 !== t && (e = t);
    } catch (o) {}
    return e;
  }
  function Lt(e) {
    var t = e.originUrl,
      o = void 0 === t ? void 0 : t,
      n = e.originWidth,
      a = e.originHeight,
      s = e.min,
      r = void 0 === s ? 198 : s,
      i = parseInt(n),
      c = parseInt(a),
      u = {
        url: void 0,
        width: 0,
        height: 0
      };
    if ((i <= c ? i : c) <= r) u.url = o, u.width = i, u.height = c;else {
      c <= i ? (u.width = Math.ceil(i * r / c), u.height = r) : (u.width = r, u.height = Math.ceil(c * r / i));
      var l = o && o.indexOf("?") > -1 ? "".concat(o, "&") : "".concat(o, "?");
      u.url = "".concat(l, 198 === r ? "imageView2/3/w/198/h/198" : "imageView2/3/w/720/h/720");
    }
    return Ze(o) ? g(u, Ye) : u;
  }
  function kt(e) {
    var t = e[2];
    e[2] = e[1], e[1] = t;
    for (var o = 0; o < e.length; o++) {
      e[o].setType(o);
    }
  }
  function Gt(e) {
    var t = e.servcmd;
    return t.slice(t.indexOf(".") + 1);
  }
  function Pt(e, t) {
    return Math.round(Number(e) * Math.pow(10, t)) / Math.pow(10, t);
  }
  function Ut(e, t) {
    return e.includes(t);
  }
  function wt(e, t) {
    return e.includes(t);
  }
  function bt(e) {
    return e.split(We)[0];
  }
  var Ft = function Ft(e, t) {
      if (Ze(t)) return "";
      switch (e) {
        case D.MSG_TEXT:
          return t.text;
        case D.MSG_IMAGE:
          return "[图片]";
        case D.MSG_LOCATION:
          return "[位置]";
        case D.MSG_AUDIO:
          return "[语音]";
        case D.MSG_VIDEO:
          return "[视频]";
        case D.MSG_FILE:
          return "[文件]";
        case D.MSG_CUSTOM:
          return "[自定义消息]";
        case D.MSG_GRP_TIP:
          return "[群提示消息]";
        case D.MSG_GRP_SYS_NOTICE:
          return "[群系统通知]";
        case D.MSG_FACE:
          return "[动画表情]";
        case D.MSG_MERGER:
          return "[聊天记录]";
        default:
          return "";
      }
    },
    qt = Object.prototype.hasOwnProperty;
  function Vt(e) {
    if (null == e) return !0;
    if ("boolean" == typeof e) return !1;
    if ("number" == typeof e) return 0 === e;
    if ("string" == typeof e) return 0 === e.length;
    if ("function" == typeof e) return 0 === e.length;
    if (Array.isArray(e)) return 0 === e.length;
    if (e instanceof Error) return "" === e.message;
    if (Xe(e)) {
      for (var t in e) {
        if (qt.call(e, t)) return !1;
      }
      return !0;
    }
    return !("map" !== at(e) && !function (e) {
      return "set" === at(e);
    }(e) && !je(e)) && 0 === e.size;
  }
  function Kt(e, t, o) {
    if (void 0 === t) return !0;
    var n = !0;
    if ("object" === R(t).toLowerCase()) Object.keys(t).forEach(function (a) {
      var s = 1 === e.length ? e[0][a] : void 0;
      n = !!Ht(s, t[a], o, a) && n;
    });else if ("array" === R(t).toLowerCase()) for (var a = 0; a < t.length; a++) {
      n = !!Ht(e[a], t[a], o, t[a].name) && n;
    }
    if (n) return n;
    throw new Error("Params validate failed.");
  }
  function Ht(e, t, o, n) {
    if (void 0 === t) return !0;
    var a = !0;
    return t.required && Vt(e) && (Ae.error("TIM [".concat(o, '] Missing required params: "').concat(n, '".')), a = !1), Vt(e) || R(e).toLowerCase() === t.type.toLowerCase() || (Ae.error("TIM [".concat(o, '] Invalid params: type check failed for "').concat(n, '".Expected ').concat(t.type, ".")), a = !1), t.validator && !t.validator(e) && (Ae.error("TIM [".concat(o, "] Invalid params: custom validator check failed for params.")), a = !1), a;
  }
  var Bt,
    xt = {
      UNSEND: "unSend",
      SUCCESS: "success",
      FAIL: "fail"
    },
    Wt = {
      NOT_START: "notStart",
      PENDING: "pengding",
      RESOLVED: "resolved",
      REJECTED: "rejected"
    },
    Yt = function Yt(e) {
      return !!e && (!!(Ct(e) || St(e) || Dt(e)) || (console.warn("非法的会话 ID:".concat(e, "。会话 ID 组成方式：C2C + userID（单聊）GROUP + groupID（群聊）@TIM#SYSTEM（系统通知会话）")), !1));
    },
    jt = "请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#",
    $t = function $t(e) {
      return e.param ? "".concat(e.api, " ").concat(e.param, " ").concat(e.desc, "。").concat(jt).concat(e.api) : "".concat(e.api, " ").concat(e.desc, "。").concat(jt).concat(e.api);
    },
    zt = {
      type: "String",
      required: !0
    },
    Jt = {
      type: "Array",
      required: !0
    },
    Xt = {
      type: "Object",
      required: !0
    },
    Qt = {
      login: {
        userID: zt,
        userSig: zt
      },
      addToBlacklist: {
        userIDList: Jt
      },
      on: [{
        name: "eventName",
        type: "String",
        validator: function validator(e) {
          return "string" == typeof e && 0 !== e.length || (console.warn($t({
            api: "on",
            param: "eventName",
            desc: "类型必须为 String，且不能为空"
          })), !1);
        }
      }, {
        name: "handler",
        type: "Function",
        validator: function validator(e) {
          return "function" != typeof e ? (console.warn($t({
            api: "on",
            param: "handler",
            desc: "参数必须为 Function"
          })), !1) : ("" === e.name && console.warn("on 接口的 handler 参数推荐使用具名函数。具名函数可以使用 off 接口取消订阅，匿名函数无法取消订阅。"), !0);
        }
      }],
      once: [{
        name: "eventName",
        type: "String",
        validator: function validator(e) {
          return "string" == typeof e && 0 !== e.length || (console.warn($t({
            api: "once",
            param: "eventName",
            desc: "类型必须为 String，且不能为空"
          })), !1);
        }
      }, {
        name: "handler",
        type: "Function",
        validator: function validator(e) {
          return "function" != typeof e ? (console.warn($t({
            api: "once",
            param: "handler",
            desc: "参数必须为 Function"
          })), !1) : ("" === e.name && console.warn("once 接口的 handler 参数推荐使用具名函数。"), !0);
        }
      }],
      off: [{
        name: "eventName",
        type: "String",
        validator: function validator(e) {
          return "string" == typeof e && 0 !== e.length || (console.warn($t({
            api: "off",
            param: "eventName",
            desc: "类型必须为 String，且不能为空"
          })), !1);
        }
      }, {
        name: "handler",
        type: "Function",
        validator: function validator(e) {
          return "function" != typeof e ? (console.warn($t({
            api: "off",
            param: "handler",
            desc: "参数必须为 Function"
          })), !1) : ("" === e.name && console.warn("off 接口无法为匿名函数取消监听事件。"), !0);
        }
      }],
      sendMessage: [t({
        name: "message"
      }, Xt)],
      getMessageList: {
        conversationID: t(t({}, zt), {}, {
          validator: function validator(e) {
            return Yt(e);
          }
        }),
        nextReqMessageID: {
          type: "String"
        },
        count: {
          type: "Number",
          validator: function validator(e) {
            return !(!Ze(e) && !/^[1-9][0-9]*$/.test(e)) || (console.warn($t({
              api: "getMessageList",
              param: "count",
              desc: "必须为正整数"
            })), !1);
          }
        }
      },
      getMessageListHopping: {
        conversationID: t(t({}, zt), {}, {
          validator: function validator(e) {
            return Yt(e);
          }
        }),
        sequence: {
          type: "Number"
        },
        time: {
          type: "Number"
        },
        direction: {
          type: "Number",
          validator: function validator(e) {
            return !(!Ze(e) && 0 !== e && 1 !== e) || (console.warn($t({
              api: "getMessageListHopping",
              param: "direction",
              desc: "必须传 0 或 1"
            })), !1);
          }
        },
        count: {
          type: "Number",
          validator: function validator(e) {
            return !(!Ze(e) && !/^[1-9][0-9]*$/.test(e)) || (console.warn($t({
              api: "getMessageListHopping",
              param: "count",
              desc: "必须为正整数"
            })), !1);
          }
        }
      },
      setMessageRead: {
        conversationID: t(t({}, zt), {}, {
          validator: function validator(e) {
            return Yt(e);
          }
        })
      },
      setAllMessageRead: {
        scope: {
          type: "String",
          required: !1,
          validator: function validator(e) {
            return !e || -1 !== [D.READ_ALL_C2C_MSG, D.READ_ALL_GROUP_MSG, D.READ_ALL_MSG].indexOf(e) || (console.warn($t({
              api: "setAllMessageRead",
              param: "scope",
              desc: "取值必须为 TIM.TYPES.READ_ALL_C2C_MSG, TIM.TYPES.READ_ALL_GROUP_MSG 或 TIM.TYPES.READ_ALL_MSG"
            })), !1);
          }
        }
      },
      getConversationProfile: [t(t({
        name: "conversationID"
      }, zt), {}, {
        validator: function validator(e) {
          return Yt(e);
        }
      })],
      deleteConversation: [t(t({
        name: "conversationID"
      }, zt), {}, {
        validator: function validator(e) {
          return Yt(e);
        }
      })],
      pinConversation: {
        conversationID: t(t({}, zt), {}, {
          validator: function validator(e) {
            return Yt(e);
          }
        }),
        isPinned: t({}, {
          type: "Boolean",
          required: !0
        })
      },
      getConversationList: [{
        name: "options",
        type: "Array",
        validator: function validator(e) {
          return !!Ze(e) || 0 !== e.length || (console.warn($t({
            api: "getConversationList",
            desc: "获取指定会话时不能传入空数组"
          })), !1);
        }
      }],
      getGroupList: {
        groupProfileFilter: {
          type: "Array"
        }
      },
      getGroupProfile: {
        groupID: zt,
        groupCustomFieldFilter: {
          type: "Array"
        },
        memberCustomFieldFilter: {
          type: "Array"
        }
      },
      getGroupProfileAdvance: {
        groupIDList: Jt
      },
      createGroup: {
        name: zt
      },
      joinGroup: {
        groupID: zt,
        type: {
          type: "String"
        },
        applyMessage: {
          type: "String"
        }
      },
      quitGroup: [t({
        name: "groupID"
      }, zt)],
      handleApplication: {
        message: Xt,
        handleAction: zt,
        handleMessage: {
          type: "String"
        }
      },
      changeGroupOwner: {
        groupID: zt,
        newOwnerID: zt
      },
      updateGroupProfile: {
        groupID: zt,
        muteAllMembers: {
          type: "Boolean"
        }
      },
      dismissGroup: [t({
        name: "groupID"
      }, zt)],
      searchGroupByID: [t({
        name: "groupID"
      }, zt)],
      initGroupAttributes: {
        groupID: zt,
        groupAttributes: t(t({}, Xt), {}, {
          validator: function validator(e) {
            var t = !0;
            return Object.keys(e).forEach(function (o) {
              if (!ze(e[o])) return console.warn($t({
                api: "initGroupAttributes",
                desc: "群属性 value 必须是字符串"
              })), t = !1;
            }), t;
          }
        })
      },
      setGroupAttributes: {
        groupID: zt,
        groupAttributes: t(t({}, Xt), {}, {
          validator: function validator(e) {
            var t = !0;
            return Object.keys(e).forEach(function (o) {
              if (!ze(e[o])) return console.warn($t({
                api: "setGroupAttributes",
                desc: "群属性 value 必须是字符串"
              })), t = !1;
            }), t;
          }
        })
      },
      deleteGroupAttributes: {
        groupID: zt,
        keyList: {
          type: "Array",
          validator: function validator(e) {
            if (Ze(e)) return console.warn($t({
              api: "deleteGroupAttributes",
              desc: "缺少必填参数：keyList"
            })), !1;
            if (!Qe(e)) return !1;
            if (!Vt(e)) {
              var t = !0;
              return e.forEach(function (e) {
                if (!ze(e)) return console.warn($t({
                  api: "deleteGroupAttributes",
                  desc: "群属性 key 必须是字符串"
                })), t = !1;
              }), t;
            }
            return !0;
          }
        }
      },
      getGroupAttributes: {
        groupID: zt,
        keyList: {
          type: "Array",
          validator: function validator(e) {
            if (Ze(e)) return console.warn($t({
              api: "getGroupAttributes",
              desc: "缺少必填参数：keyList"
            })), !1;
            if (!Qe(e)) return !1;
            if (!Vt(e)) {
              var t = !0;
              return e.forEach(function (e) {
                if (!ze(e)) return console.warn($t({
                  api: "getGroupAttributes",
                  desc: "群属性 key 必须是字符串"
                })), t = !1;
              }), t;
            }
            return !0;
          }
        }
      },
      getGroupMemberList: {
        groupID: zt,
        count: {
          type: "Number"
        }
      },
      getGroupMemberProfile: {
        groupID: zt,
        userIDList: Jt,
        memberCustomFieldFilter: {
          type: "Array"
        }
      },
      addGroupMember: {
        groupID: zt,
        userIDList: Jt
      },
      setGroupMemberRole: {
        groupID: zt,
        userID: zt,
        role: zt
      },
      setGroupMemberMuteTime: {
        groupID: zt,
        userID: zt,
        muteTime: {
          type: "Number",
          validator: function validator(e) {
            return e >= 0;
          }
        }
      },
      setGroupMemberNameCard: {
        groupID: zt,
        userID: {
          type: "String"
        },
        nameCard: {
          type: "String",
          validator: function validator(e) {
            return ze(e) ? (e.length, !0) : (console.warn($t({
              api: "setGroupMemberNameCard",
              param: "nameCard",
              desc: "类型必须为 String"
            })), !1);
          }
        }
      },
      setGroupMemberCustomField: {
        groupID: zt,
        userID: {
          type: "String"
        },
        memberCustomField: Jt
      },
      deleteGroupMember: {
        groupID: zt
      },
      createTextMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            return Xe(e) ? ze(e.text) ? 0 !== e.text.length || (console.warn($t({
              api: "createTextMessage",
              desc: "消息内容不能为空"
            })), !1) : (console.warn($t({
              api: "createTextMessage",
              param: "payload.text",
              desc: "类型必须为 String"
            })), !1) : (console.warn($t({
              api: "createTextMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1);
          }
        })
      },
      createTextAtMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            return Xe(e) ? ze(e.text) ? 0 === e.text.length ? (console.warn($t({
              api: "createTextAtMessage",
              desc: "消息内容不能为空"
            })), !1) : !(e.atUserList && !Qe(e.atUserList)) || (console.warn($t({
              api: "createTextAtMessage",
              desc: "payload.atUserList 类型必须为数组"
            })), !1) : (console.warn($t({
              api: "createTextAtMessage",
              param: "payload.text",
              desc: "类型必须为 String"
            })), !1) : (console.warn($t({
              api: "createTextAtMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1);
          }
        })
      },
      createCustomMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            return Xe(e) ? e.data && !ze(e.data) ? (console.warn($t({
              api: "createCustomMessage",
              param: "payload.data",
              desc: "类型必须为 String"
            })), !1) : e.description && !ze(e.description) ? (console.warn($t({
              api: "createCustomMessage",
              param: "payload.description",
              desc: "类型必须为 String"
            })), !1) : !(e.extension && !ze(e.extension)) || (console.warn($t({
              api: "createCustomMessage",
              param: "payload.extension",
              desc: "类型必须为 String"
            })), !1) : (console.warn($t({
              api: "createCustomMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1);
          }
        })
      },
      createImageMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            if (!Xe(e)) return console.warn($t({
              api: "createImageMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1;
            if (Ze(e.file)) return console.warn($t({
              api: "createImageMessage",
              param: "payload.file",
              desc: "不能为 undefined"
            })), !1;
            if (oe) {
              if (!(e.file instanceof HTMLInputElement || je(e.file))) return Xe(e.file) && "undefined" != typeof uni ? 0 !== e.file.tempFilePaths.length && 0 !== e.file.tempFiles.length || (console.warn($t({
                api: "createImageMessage",
                param: "payload.file",
                desc: "您没有选择文件，无法发送"
              })), !1) : (console.warn($t({
                api: "createImageMessage",
                param: "payload.file",
                desc: "类型必须是 HTMLInputElement 或 File"
              })), !1);
              if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return console.warn($t({
                api: "createImageMessage",
                param: "payload.file",
                desc: "您没有选择文件，无法发送"
              })), !1;
            }
            return !0;
          },
          onProgress: {
            type: "Function",
            required: !1,
            validator: function validator(e) {
              return Ze(e) && console.warn($t({
                api: "createImageMessage",
                desc: "没有 onProgress 回调，您将无法获取上传进度"
              })), !0;
            }
          }
        })
      },
      createAudioMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            return !!Xe(e) || (console.warn($t({
              api: "createAudioMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1);
          }
        }),
        onProgress: {
          type: "Function",
          required: !1,
          validator: function validator(e) {
            return Ze(e) && console.warn($t({
              api: "createAudioMessage",
              desc: "没有 onProgress 回调，您将无法获取上传进度"
            })), !0;
          }
        }
      },
      createVideoMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            if (!Xe(e)) return console.warn($t({
              api: "createVideoMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1;
            if (Ze(e.file)) return console.warn($t({
              api: "createVideoMessage",
              param: "payload.file",
              desc: "不能为 undefined"
            })), !1;
            if (oe) {
              if (!(e.file instanceof HTMLInputElement || je(e.file))) return Xe(e.file) && "undefined" != typeof uni ? !!je(e.file.tempFile) || (console.warn($t({
                api: "createVideoMessage",
                param: "payload.file",
                desc: "您没有选择文件，无法发送"
              })), !1) : (console.warn($t({
                api: "createVideoMessage",
                param: "payload.file",
                desc: "类型必须是 HTMLInputElement 或 File"
              })), !1);
              if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return console.warn($t({
                api: "createVideoMessage",
                param: "payload.file",
                desc: "您没有选择文件，无法发送"
              })), !1;
            }
            return !0;
          }
        }),
        onProgress: {
          type: "Function",
          required: !1,
          validator: function validator(e) {
            return Ze(e) && console.warn($t({
              api: "createVideoMessage",
              desc: "没有 onProgress 回调，您将无法获取上传进度"
            })), !0;
          }
        }
      },
      createFaceMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            return Xe(e) ? $e(e.index) ? !!ze(e.data) || (console.warn($t({
              api: "createFaceMessage",
              param: "payload.data",
              desc: "类型必须为 String"
            })), !1) : (console.warn($t({
              api: "createFaceMessage",
              param: "payload.index",
              desc: "类型必须为 Number"
            })), !1) : (console.warn($t({
              api: "createFaceMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1);
          }
        })
      },
      createFileMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            if (!Xe(e)) return console.warn($t({
              api: "createFileMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1;
            if (Ze(e.file)) return console.warn($t({
              api: "createFileMessage",
              param: "payload.file",
              desc: "不能为 undefined"
            })), !1;
            if (oe) {
              if (!(e.file instanceof HTMLInputElement || je(e.file))) return Xe(e.file) && "undefined" != typeof uni ? 0 !== e.file.tempFilePaths.length && 0 !== e.file.tempFiles.length || (console.warn($t({
                api: "createFileMessage",
                param: "payload.file",
                desc: "您没有选择文件，无法发送"
              })), !1) : (console.warn($t({
                api: "createFileMessage",
                param: "payload.file",
                desc: "类型必须是 HTMLInputElement 或 File"
              })), !1);
              if (e.file instanceof HTMLInputElement && 0 === e.file.files.length) return console.warn($t({
                api: "createFileMessage",
                desc: "您没有选择文件，无法发送"
              })), !1;
            }
            return !0;
          }
        }),
        onProgress: {
          type: "Function",
          required: !1,
          validator: function validator(e) {
            return Ze(e) && console.warn($t({
              api: "createFileMessage",
              desc: "没有 onProgress 回调，您将无法获取上传进度"
            })), !0;
          }
        }
      },
      createLocationMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            return Xe(e) ? ze(e.description) ? $e(e.longitude) ? !!$e(e.latitude) || (console.warn($t({
              api: "createLocationMessage",
              param: "payload.latitude",
              desc: "类型必须为 Number"
            })), !1) : (console.warn($t({
              api: "createLocationMessage",
              param: "payload.longitude",
              desc: "类型必须为 Number"
            })), !1) : (console.warn($t({
              api: "createLocationMessage",
              param: "payload.description",
              desc: "类型必须为 String"
            })), !1) : (console.warn($t({
              api: "createLocationMessage",
              param: "payload",
              desc: "类型必须为 plain object"
            })), !1);
          }
        })
      },
      createMergerMessage: {
        to: zt,
        conversationType: zt,
        payload: t(t({}, Xt), {}, {
          validator: function validator(e) {
            if (Vt(e.messageList)) return console.warn($t({
              api: "createMergerMessage",
              desc: "不能为空数组"
            })), !1;
            if (Vt(e.compatibleText)) return console.warn($t({
              api: "createMergerMessage",
              desc: "类型必须为 String，且不能为空"
            })), !1;
            var t = !1;
            return e.messageList.forEach(function (e) {
              e.status === xt.FAIL && (t = !0);
            }), !t || (console.warn($t({
              api: "createMergerMessage",
              desc: "不支持合并已发送失败的消息"
            })), !1);
          }
        })
      },
      revokeMessage: [t(t({
        name: "message"
      }, Xt), {}, {
        validator: function validator(e) {
          return Vt(e) ? (console.warn($t({
            api: "revokeMessage",
            desc: "请传入消息（Message）实例"
          })), !1) : e.conversationType === D.CONV_SYSTEM ? (console.warn($t({
            api: "revokeMessage",
            desc: "不能撤回系统会话消息，只能撤回单聊消息或群消息"
          })), !1) : !0 !== e.isRevoked || (console.warn($t({
            api: "revokeMessage",
            desc: "消息已经被撤回，请勿重复操作"
          })), !1);
        }
      })],
      deleteMessage: [t(t({
        name: "messageList"
      }, Jt), {}, {
        validator: function validator(e) {
          return !Vt(e) || (console.warn($t({
            api: "deleteMessage",
            param: "messageList",
            desc: "不能为空数组"
          })), !1);
        }
      })],
      modifyMessage: [t(t({
        name: "message"
      }, Xt), {}, {
        validator: function validator(e) {
          return Vt(e) ? (console.warn($t({
            api: "modifyMessage",
            desc: "请传入消息（Message）实例"
          })), !1) : e.conversationType === D.CONV_SYSTEM ? (console.warn($t({
            api: "modifyMessage",
            desc: "不支持修改系统会话消息，只能修改单聊消息或群消息"
          })), !1) : !0 === e._onlineOnlyFlag ? (console.warn($t({
            api: "modifyMessage",
            desc: "不支持修改在线消息"
          })), !1) : -1 !== [D.MSG_TEXT, D.MSG_CUSTOM, D.MSG_LOCATION, D.MSG_FACE].indexOf(e.type) || (console.warn($t({
            api: "modifyMessage",
            desc: "只支持修改文本消息、自定义消息、地理位置消息和表情消息"
          })), !1);
        }
      })],
      getUserProfile: {
        userIDList: {
          type: "Array",
          validator: function validator(e) {
            return Qe(e) ? (0 === e.length && console.warn($t({
              api: "getUserProfile",
              param: "userIDList",
              desc: "不能为空数组"
            })), !0) : (console.warn($t({
              api: "getUserProfile",
              param: "userIDList",
              desc: "必须为数组"
            })), !1);
          }
        }
      },
      updateMyProfile: {
        profileCustomField: {
          type: "Array",
          validator: function validator(e) {
            return !!Ze(e) || !!Qe(e) || (console.warn($t({
              api: "updateMyProfile",
              param: "profileCustomField",
              desc: "必须为数组"
            })), !1);
          }
        }
      },
      addFriend: {
        to: zt,
        source: {
          type: "String",
          required: !0,
          validator: function validator(e) {
            return !!e && (e.startsWith("AddSource_Type_") ? !(e.replace("AddSource_Type_", "").length > 8) || (console.warn($t({
              api: "addFriend",
              desc: "加好友来源字段的关键字长度不得超过8字节"
            })), !1) : (console.warn($t({
              api: "addFriend",
              desc: "加好友来源字段的前缀必须是：AddSource_Type_"
            })), !1));
          }
        },
        remark: {
          type: "String",
          required: !1,
          validator: function validator(e) {
            return !(ze(e) && e.length > 96) || (console.warn($t({
              api: "updateFriend",
              desc: " 备注长度最长不得超过 96 个字节"
            })), !1);
          }
        }
      },
      deleteFriend: {
        userIDList: Jt
      },
      checkFriend: {
        userIDList: Jt
      },
      getFriendProfile: {
        userIDList: Jt
      },
      updateFriend: {
        userID: zt,
        remark: {
          type: "String",
          required: !1,
          validator: function validator(e) {
            return !(ze(e) && e.length > 96) || (console.warn($t({
              api: "updateFriend",
              desc: " 备注长度最长不得超过 96 个字节"
            })), !1);
          }
        },
        friendCustomField: {
          type: "Array",
          required: !1,
          validator: function validator(e) {
            if (e) {
              if (!Qe(e)) return console.warn($t({
                api: "updateFriend",
                param: "friendCustomField",
                desc: "必须为数组"
              })), !1;
              var t = !0;
              return e.forEach(function (e) {
                return ze(e.key) && -1 !== e.key.indexOf("Tag_SNS_Custom") ? ze(e.value) ? e.value.length > 8 ? (console.warn($t({
                  api: "updateFriend",
                  desc: "好友自定义字段的关键字长度不得超过8字节"
                })), t = !1) : void 0 : (console.warn($t({
                  api: "updateFriend",
                  desc: "类型必须为 String"
                })), t = !1) : (console.warn($t({
                  api: "updateFriend",
                  desc: "好友自定义字段的前缀必须是 Tag_SNS_Custom"
                })), t = !1);
              }), t;
            }
            return !0;
          }
        }
      },
      acceptFriendApplication: {
        userID: zt
      },
      refuseFriendApplication: {
        userID: zt
      },
      deleteFriendApplication: {
        userID: zt
      },
      createFriendGroup: {
        name: zt
      },
      deleteFriendGroup: {
        name: zt
      },
      addToFriendGroup: {
        name: zt,
        userIDList: Jt
      },
      removeFromFriendGroup: {
        name: zt,
        userIDList: Jt
      },
      renameFriendGroup: {
        oldName: zt,
        newName: zt
      },
      sendMessageReadReceipt: [{
        name: "messageList",
        type: "Array",
        validator: function validator(e) {
          return Qe(e) ? 0 !== e.length || (console.warn($t({
            api: "sendMessageReadReceipt",
            param: "messageList",
            desc: "不能为空数组"
          })), !1) : (console.warn($t({
            api: "sendMessageReadReceipt",
            param: "messageList",
            desc: "必须为数组"
          })), !1);
        }
      }],
      getMessageReadReceiptList: [{
        name: "messageList",
        type: "Array",
        validator: function validator(e) {
          return Qe(e) ? 0 !== e.length || (console.warn($t({
            api: "getMessageReadReceiptList",
            param: "messageList",
            desc: "不能为空数组"
          })), !1) : (console.warn($t({
            api: "getMessageReadReceiptList",
            param: "messageList",
            desc: "必须为数组"
          })), !1);
        }
      }],
      createTopicInCommunity: {
        groupID: zt,
        topicName: zt
      },
      deleteTopicFromCommunity: {
        groupID: zt,
        topicIDList: {
          type: "Array",
          validator: function validator(e) {
            return !e || !!Qe(e) || (console.warn($t({
              api: "deleteTopicFromCommunity",
              param: "topicIDList",
              desc: "必须为数组"
            })), !1);
          }
        }
      },
      updateTopicProfile: {
        groupID: zt,
        topicID: zt
      },
      getTopicList: {
        groupID: zt,
        topicIDList: {
          type: "Array",
          validator: function validator(e) {
            return !e || !!Qe(e) || (console.warn($t({
              api: "getTopicList",
              param: "topicIDList",
              desc: "必须为数组"
            })), !1);
          }
        }
      }
    },
    Zt = {
      login: "login",
      logout: "logout",
      on: "on",
      once: "once",
      off: "off",
      setLogLevel: "setLogLevel",
      registerPlugin: "registerPlugin",
      destroy: "destroy",
      createTextMessage: "createTextMessage",
      createTextAtMessage: "createTextAtMessage",
      createImageMessage: "createImageMessage",
      createAudioMessage: "createAudioMessage",
      createVideoMessage: "createVideoMessage",
      createCustomMessage: "createCustomMessage",
      createFaceMessage: "createFaceMessage",
      createFileMessage: "createFileMessage",
      createLocationMessage: "createLocationMessage",
      createMergerMessage: "createMergerMessage",
      downloadMergerMessage: "downloadMergerMessage",
      createForwardMessage: "createForwardMessage",
      sendMessage: "sendMessage",
      resendMessage: "resendMessage",
      revokeMessage: "revokeMessage",
      deleteMessage: "deleteMessage",
      modifyMessage: "modifyMessage",
      sendMessageReadReceipt: "sendMessageReadReceipt",
      getGroupMessageReadMemberList: "getGroupMessageReadMemberList",
      getMessageReadReceiptList: "getMessageReadReceiptList",
      getMessageList: "getMessageList",
      findMessage: "findMessage",
      getMessageListHopping: "getMessageListHopping",
      setMessageRead: "setMessageRead",
      setAllMessageRead: "setAllMessageRead",
      getConversationList: "getConversationList",
      getConversationProfile: "getConversationProfile",
      deleteConversation: "deleteConversation",
      pinConversation: "pinConversation",
      getGroupList: "getGroupList",
      getGroupProfile: "getGroupProfile",
      createGroup: "createGroup",
      joinGroup: "joinGroup",
      updateGroupProfile: "updateGroupProfile",
      quitGroup: "quitGroup",
      dismissGroup: "dismissGroup",
      changeGroupOwner: "changeGroupOwner",
      searchGroupByID: "searchGroupByID",
      setMessageRemindType: "setMessageRemindType",
      handleGroupApplication: "handleGroupApplication",
      initGroupAttributes: "initGroupAttributes",
      setGroupAttributes: "setGroupAttributes",
      deleteGroupAttributes: "deleteGroupAttributes",
      getGroupAttributes: "getGroupAttributes",
      getJoinedCommunityList: "getJoinedCommunityList",
      createTopicInCommunity: "createTopicInCommunity",
      deleteTopicFromCommunity: "deleteTopicFromCommunity",
      updateTopicProfile: "updateTopicProfile",
      getTopicList: "getTopicList",
      getGroupMemberProfile: "getGroupMemberProfile",
      getGroupMemberList: "getGroupMemberList",
      addGroupMember: "addGroupMember",
      deleteGroupMember: "deleteGroupMember",
      setGroupMemberNameCard: "setGroupMemberNameCard",
      setGroupMemberMuteTime: "setGroupMemberMuteTime",
      setGroupMemberRole: "setGroupMemberRole",
      setGroupMemberCustomField: "setGroupMemberCustomField",
      getGroupOnlineMemberCount: "getGroupOnlineMemberCount",
      getMyProfile: "getMyProfile",
      getUserProfile: "getUserProfile",
      updateMyProfile: "updateMyProfile",
      getBlacklist: "getBlacklist",
      addToBlacklist: "addToBlacklist",
      removeFromBlacklist: "removeFromBlacklist",
      getFriendList: "getFriendList",
      addFriend: "addFriend",
      deleteFriend: "deleteFriend",
      checkFriend: "checkFriend",
      updateFriend: "updateFriend",
      getFriendProfile: "getFriendProfile",
      getFriendApplicationList: "getFriendApplicationList",
      refuseFriendApplication: "refuseFriendApplication",
      deleteFriendApplication: "deleteFriendApplication",
      acceptFriendApplication: "acceptFriendApplication",
      setFriendApplicationRead: "setFriendApplicationRead",
      getFriendGroupList: "getFriendGroupList",
      createFriendGroup: "createFriendGroup",
      renameFriendGroup: "renameFriendGroup",
      deleteFriendGroup: "deleteFriendGroup",
      addToFriendGroup: "addToFriendGroup",
      removeFromFriendGroup: "removeFromFriendGroup",
      callExperimentalAPI: "callExperimentalAPI"
    },
    eo = "sign",
    to = "message",
    oo = "user",
    no = "c2c",
    ao = "group",
    so = "sns",
    ro = "groupMember",
    io = "Topic",
    co = "conversation",
    uo = "context",
    lo = "storage",
    po = "eventStat",
    go = "netMonitor",
    _o = "bigDataChannel",
    ho = "upload",
    fo = "plugin",
    mo = "syncUnreadMessage",
    Mo = "session",
    vo = "channel",
    yo = "message_loss_detection",
    Io = "cloudControl",
    Eo = "workerTimer",
    To = "pullGroupMessage",
    Co = "qualityStat",
    So = "commercialConfig",
    Do = function () {
      function e(t) {
        n(this, e), this._moduleManager = t, this._className = "";
      }
      return s(e, [{
        key: "isLoggedIn",
        value: function value() {
          return this._moduleManager.getModule(uo).isLoggedIn();
        }
      }, {
        key: "isOversea",
        value: function value() {
          return this._moduleManager.getModule(uo).isOversea();
        }
      }, {
        key: "getMyUserID",
        value: function value() {
          return this._moduleManager.getModule(uo).getUserID();
        }
      }, {
        key: "getMyTinyID",
        value: function value() {
          return this._moduleManager.getModule(uo).getTinyID();
        }
      }, {
        key: "getModule",
        value: function value(e) {
          return this._moduleManager.getModule(e);
        }
      }, {
        key: "getPlatform",
        value: function value() {
          return ae;
        }
      }, {
        key: "getNetworkType",
        value: function value() {
          return this._moduleManager.getModule(go).getNetworkType();
        }
      }, {
        key: "probeNetwork",
        value: function value(e) {
          return this._moduleManager.getModule(go).probe(e);
        }
      }, {
        key: "getCloudConfig",
        value: function value(e) {
          return this._moduleManager.getModule(Io).getCloudConfig(e);
        }
      }, {
        key: "emitOuterEvent",
        value: function value(e, t) {
          this._moduleManager.getOuterEmitterInstance().emit(e, t);
        }
      }, {
        key: "emitInnerEvent",
        value: function value(e, t) {
          this._moduleManager.getInnerEmitterInstance().emit(e, t);
        }
      }, {
        key: "getInnerEmitterInstance",
        value: function value() {
          return this._moduleManager.getInnerEmitterInstance();
        }
      }, {
        key: "generateTjgID",
        value: function value(e) {
          return this._moduleManager.getModule(uo).getTinyID() + "-" + e.random;
        }
      }, {
        key: "filterModifiedMessage",
        value: function value(e) {
          if (!Vt(e)) {
            var t = e.filter(function (e) {
              return !0 === e.isModified;
            });
            t.length > 0 && this.emitOuterEvent(S.MESSAGE_MODIFIED, t);
          }
        }
      }, {
        key: "filterUnmodifiedMessage",
        value: function value(e) {
          return Vt(e) ? [] : e.filter(function (e) {
            return !1 === e.isModified;
          });
        }
      }, {
        key: "request",
        value: function value(e) {
          return this._moduleManager.getModule(Mo).request(e);
        }
      }, {
        key: "canIUse",
        value: function value(e) {
          return this._moduleManager.getModule(So).hasPurchasedFeature(e);
        }
      }]), e;
    }(),
    No = "wslogin",
    Ao = "wslogout",
    Oo = "wshello",
    Ro = "KickOther",
    Lo = "getmsg",
    ko = "authkey",
    Go = "sendmsg",
    Po = "send_group_msg",
    Uo = "portrait_get_all",
    wo = "portrait_set",
    bo = "black_list_get",
    Fo = "black_list_add",
    qo = "black_list_delete",
    Vo = "msgwithdraw",
    Ko = "msgreaded",
    Ho = "set_c2c_peer_mute_notifications",
    Bo = "get_c2c_peer_mute_notifications",
    xo = "getroammsg",
    Wo = "get_peer_read_time",
    Yo = "delete_c2c_msg_ramble",
    jo = "modify_c2c_msg",
    $o = "page_get",
    zo = "get",
    Jo = "delete",
    Xo = "top",
    Qo = "deletemsg",
    Zo = "get_joined_group_list",
    en = "get_group_self_member_info",
    tn = "create_group",
    on = "destroy_group",
    nn = "modify_group_base_info",
    an = "apply_join_group",
    sn = "apply_join_group_noauth",
    rn = "quit_group",
    cn = "get_group_public_info",
    un = "change_group_owner",
    ln = "handle_apply_join_group",
    dn = "handle_invite_join_group",
    pn = "group_msg_recall",
    gn = "msg_read_report",
    _n = "read_all_unread_msg",
    hn = "group_msg_get",
    fn = "get_group_msg_receipt",
    mn = "group_msg_receipt",
    Mn = "c2c_msg_read_receipt",
    vn = "get_group_msg_receipt_detail",
    yn = "get_pendency",
    In = "deletemsg",
    En = "get_msg",
    Tn = "get_msg_noauth",
    Cn = "get_online_member_num",
    Sn = "delete_group_ramble_msg_by_seq",
    Dn = "modify_group_msg",
    Nn = "set_group_attr",
    An = "modify_group_attr",
    On = "delete_group_attr",
    Rn = "clear_group_attr",
    Ln = "get_group_attr",
    kn = "get_group_member_info",
    Gn = "get_specified_group_member_info",
    Pn = "add_group_member",
    Un = "delete_group_member",
    wn = "modify_group_member_info",
    bn = "cos",
    Fn = "pre_sig",
    qn = "video_cover",
    Vn = "tim_web_report_v2",
    Kn = "alive",
    Hn = "msg_push",
    Bn = "multi_msg_push_ws",
    xn = "ws_msg_push_ack",
    Wn = "stat_forceoffline",
    Yn = "save_relay_json_msg",
    jn = "get_relay_json_msg",
    $n = "fetch_config",
    zn = "push_configv2",
    Jn = "fetch_imsdk_purchase_bitsv2",
    Xn = "push_imsdk_purchase_bitsv2",
    Qn = "notify2",
    Zn = "create_topic",
    ea = "destroy_topic",
    ta = "modify_topic",
    oa = "get_topic",
    na = {
      NO_SDKAPPID: 2e3,
      NO_ACCOUNT_TYPE: 2001,
      NO_IDENTIFIER: 2002,
      NO_USERSIG: 2003,
      NO_TINYID: 2022,
      NO_A2KEY: 2023,
      USER_NOT_LOGGED_IN: 2024,
      REPEAT_LOGIN: 2025,
      COS_UNDETECTED: 2040,
      COS_GET_SIG_FAIL: 2041,
      MESSAGE_SEND_FAIL: 2100,
      MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS: 2103,
      MESSAGE_SEND_NEED_MESSAGE_INSTANCE: 2105,
      MESSAGE_SEND_INVALID_CONVERSATION_TYPE: 2106,
      MESSAGE_FILE_IS_EMPTY: 2108,
      MESSAGE_ONPROGRESS_FUNCTION_ERROR: 2109,
      MESSAGE_REVOKE_FAIL: 2110,
      MESSAGE_DELETE_FAIL: 2111,
      MESSAGE_UNREAD_ALL_FAIL: 2112,
      MESSAGE_CONTROL_INFO_FAIL: 2113,
      READ_RECEIPT_MESSAGE_LIST_EMPTY: 2114,
      MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL: 2115,
      MESSAGE_IMAGE_SELECT_FILE_FIRST: 2251,
      MESSAGE_IMAGE_TYPES_LIMIT: 2252,
      MESSAGE_IMAGE_SIZE_LIMIT: 2253,
      MESSAGE_AUDIO_UPLOAD_FAIL: 2300,
      MESSAGE_AUDIO_SIZE_LIMIT: 2301,
      MESSAGE_VIDEO_UPLOAD_FAIL: 2350,
      MESSAGE_VIDEO_SIZE_LIMIT: 2351,
      MESSAGE_VIDEO_TYPES_LIMIT: 2352,
      MESSAGE_FILE_UPLOAD_FAIL: 2400,
      MESSAGE_FILE_SELECT_FILE_FIRST: 2401,
      MESSAGE_FILE_SIZE_LIMIT: 2402,
      MESSAGE_FILE_URL_IS_EMPTY: 2403,
      MESSAGE_MERGER_TYPE_INVALID: 2450,
      MESSAGE_MERGER_KEY_INVALID: 2451,
      MESSAGE_MERGER_DOWNLOAD_FAIL: 2452,
      MESSAGE_FORWARD_TYPE_INVALID: 2453,
      MESSAGE_AT_TYPE_INVALID: 2454,
      MESSAGE_MODIFY_CONFLICT: 2480,
      MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM: 2481,
      CONVERSATION_NOT_FOUND: 2500,
      USER_OR_GROUP_NOT_FOUND: 2501,
      CONVERSATION_UN_RECORDED_TYPE: 2502,
      ILLEGAL_GROUP_TYPE: 2600,
      CANNOT_JOIN_WORK: 2601,
      ILLEGAL_GROUP_ID: 2602,
      CANNOT_CHANGE_OWNER_IN_AVCHATROOM: 2620,
      CANNOT_CHANGE_OWNER_TO_SELF: 2621,
      CANNOT_DISMISS_Work: 2622,
      MEMBER_NOT_IN_GROUP: 2623,
      CANNOT_USE_GRP_ATTR_NOT_AVCHATROOM: 2641,
      CANNOT_USE_GRP_ATTR_AVCHATROOM_UNJOIN: 2642,
      JOIN_GROUP_FAIL: 2660,
      CANNOT_ADD_MEMBER_IN_AVCHATROOM: 2661,
      CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN: 2662,
      CANNOT_KICK_MEMBER_IN_AVCHATROOM: 2680,
      NOT_OWNER: 2681,
      CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM: 2682,
      INVALID_MEMBER_ROLE: 2683,
      CANNOT_SET_SELF_MEMBER_ROLE: 2684,
      CANNOT_MUTE_SELF: 2685,
      NOT_MY_FRIEND: 2700,
      ALREADY_MY_FRIEND: 2701,
      FRIEND_GROUP_EXISTED: 2710,
      FRIEND_GROUP_NOT_EXIST: 2711,
      FRIEND_APPLICATION_NOT_EXIST: 2716,
      UPDATE_PROFILE_INVALID_PARAM: 2721,
      UPDATE_PROFILE_NO_KEY: 2722,
      ADD_BLACKLIST_INVALID_PARAM: 2740,
      DEL_BLACKLIST_INVALID_PARAM: 2741,
      CANNOT_ADD_SELF_TO_BLACKLIST: 2742,
      ADD_FRIEND_INVALID_PARAM: 2760,
      NETWORK_ERROR: 2800,
      NETWORK_TIMEOUT: 2801,
      NETWORK_BASE_OPTIONS_NO_URL: 2802,
      NETWORK_UNDEFINED_SERVER_NAME: 2803,
      NETWORK_PACKAGE_UNDEFINED: 2804,
      NO_NETWORK: 2805,
      CONVERTOR_IRREGULAR_PARAMS: 2900,
      NOTICE_RUNLOOP_UNEXPECTED_CONDITION: 2901,
      NOTICE_RUNLOOP_OFFSET_LOST: 2902,
      UNCAUGHT_ERROR: 2903,
      GET_LONGPOLL_ID_FAILED: 2904,
      INVALID_OPERATION: 2905,
      OVER_FREQUENCY_LIMIT: 2996,
      CANNOT_FIND_PROTOCOL: 2997,
      CANNOT_FIND_MODULE: 2998,
      SDK_IS_NOT_READY: 2999,
      LOGGING_IN: 3e3,
      LOGIN_FAILED: 3001,
      KICKED_OUT_MULT_DEVICE: 3002,
      KICKED_OUT_MULT_ACCOUNT: 3003,
      KICKED_OUT_USERSIG_EXPIRED: 3004,
      LOGGED_OUT: 3005,
      KICKED_OUT_REST_API: 3006,
      ILLEGAL_TOPIC_ID: 3021,
      LONG_POLL_KICK_OUT: 91101,
      MESSAGE_A2KEY_EXPIRED: 20002,
      ACCOUNT_A2KEY_EXPIRED: 70001,
      LONG_POLL_API_PARAM_ERROR: 90001,
      HELLO_ANSWER_KICKED_OUT: 1002,
      OPEN_SERVICE_OVERLOAD_ERROR: 60022
    },
    aa = {
      NO_SDKAPPID: "无 SDKAppID",
      NO_ACCOUNT_TYPE: "无 accountType",
      NO_IDENTIFIER: "无 userID",
      NO_USERSIG: "无 userSig",
      NO_TINYID: "无 tinyID",
      NO_A2KEY: "无 a2key",
      USER_NOT_LOGGED_IN: "用户未登录",
      REPEAT_LOGIN: "重复登录",
      COS_UNDETECTED: "未检测到 COS 上传插件",
      COS_GET_SIG_FAIL: "获取 COS 预签名 URL 失败",
      MESSAGE_SEND_FAIL: "消息发送失败",
      MESSAGE_LIST_CONSTRUCTOR_NEED_OPTIONS: "MessageController.constructor() 需要参数 options",
      MESSAGE_SEND_NEED_MESSAGE_INSTANCE: "需要 Message 的实例",
      MESSAGE_SEND_INVALID_CONVERSATION_TYPE: 'Message.conversationType 只能为 "C2C" 或 "GROUP"',
      MESSAGE_FILE_IS_EMPTY: "无法发送空文件",
      MESSAGE_ONPROGRESS_FUNCTION_ERROR: "回调函数运行时遇到错误，请检查接入侧代码",
      MESSAGE_REVOKE_FAIL: "消息撤回失败",
      MESSAGE_DELETE_FAIL: "消息删除失败",
      MESSAGE_UNREAD_ALL_FAIL: "设置所有未读消息为已读处理失败",
      MESSAGE_CONTROL_INFO_FAIL: "社群不支持消息发送控制选项",
      READ_RECEIPT_MESSAGE_LIST_EMPTY: "消息列表中没有需要发送已读回执的消息",
      MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL: "不能在支持话题的群组中发消息，请检查群组 isSupportTopic 属性",
      MESSAGE_IMAGE_SELECT_FILE_FIRST: "请先选择一个图片",
      MESSAGE_IMAGE_TYPES_LIMIT: "只允许上传 jpg png jpeg gif bmp image webp 格式的图片",
      MESSAGE_IMAGE_SIZE_LIMIT: "图片大小超过20M，无法发送",
      MESSAGE_AUDIO_UPLOAD_FAIL: "语音上传失败",
      MESSAGE_AUDIO_SIZE_LIMIT: "语音大小大于20M，无法发送",
      MESSAGE_VIDEO_UPLOAD_FAIL: "视频上传失败",
      MESSAGE_VIDEO_SIZE_LIMIT: "视频大小超过100M，无法发送",
      MESSAGE_VIDEO_TYPES_LIMIT: "只允许上传 mp4 格式的视频",
      MESSAGE_FILE_UPLOAD_FAIL: "文件上传失败",
      MESSAGE_FILE_SELECT_FILE_FIRST: "请先选择一个文件",
      MESSAGE_FILE_SIZE_LIMIT: "文件大小超过100M，无法发送 ",
      MESSAGE_FILE_URL_IS_EMPTY: "缺少必要的参数文件 URL",
      MESSAGE_MERGER_TYPE_INVALID: "非合并消息",
      MESSAGE_MERGER_KEY_INVALID: "合并消息的 messageKey 无效",
      MESSAGE_MERGER_DOWNLOAD_FAIL: "下载合并消息失败",
      MESSAGE_FORWARD_TYPE_INVALID: "选择的消息类型（如群提示消息）不可以转发",
      MESSAGE_AT_TYPE_INVALID: "社群/话题不支持 @ 所有人",
      MESSAGE_MODIFY_CONFLICT: "修改消息时发生冲突",
      MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM: "直播群不支持修改消息",
      CONVERSATION_NOT_FOUND: "没有找到相应的会话，请检查传入参数",
      USER_OR_GROUP_NOT_FOUND: "没有找到相应的用户或群组，请检查传入参数",
      CONVERSATION_UN_RECORDED_TYPE: "未记录的会话类型",
      ILLEGAL_GROUP_TYPE: "非法的群类型，请检查传入参数",
      CANNOT_JOIN_WORK: "不能加入 Work 类型的群组",
      ILLEGAL_GROUP_ID: "群组 ID 非法，非 Community 类型群组不能以 @TGS#_ 为前缀，Community 类型群组必须以 @TGS#_ 为前缀且不能包含 @TOPIC#_ 字符串",
      CANNOT_CHANGE_OWNER_IN_AVCHATROOM: "AVChatRoom 类型的群组不能转让群主",
      CANNOT_CHANGE_OWNER_TO_SELF: "不能把群主转让给自己",
      CANNOT_DISMISS_WORK: "不能解散 Work 类型的群组",
      MEMBER_NOT_IN_GROUP: "用户不在该群组内",
      JOIN_GROUP_FAIL: "加群失败，请检查传入参数或重试",
      CANNOT_ADD_MEMBER_IN_AVCHATROOM: "AVChatRoom 类型的群不支持邀请群成员",
      CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN: "非 AVChatRoom 类型的群组不允许匿名加群，请先登录后再加群",
      CANNOT_KICK_MEMBER_IN_AVCHATROOM: "不能在 AVChatRoom 类型的群组踢人",
      NOT_OWNER: "你不是群主，只有群主才有权限操作",
      CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM: "不能在 Work / AVChatRoom 类型的群中设置群成员身份",
      INVALID_MEMBER_ROLE: "不合法的群成员身份，请检查传入参数",
      CANNOT_SET_SELF_MEMBER_ROLE: "不能设置自己的群成员身份，请检查传入参数",
      CANNOT_MUTE_SELF: "不能将自己禁言，请检查传入参数",
      NOT_MY_FRIEND: "非好友关系",
      ALREADY_MY_FRIEND: "已经是好友关系",
      FRIEND_GROUP_EXISTED: "好友分组已存在",
      FRIEND_GROUP_NOT_EXIST: "好友分组不存在",
      FRIEND_APPLICATION_NOT_EXIST: "好友申请不存在",
      UPDATE_PROFILE_INVALID_PARAM: "传入 updateMyProfile 接口的参数无效",
      UPDATE_PROFILE_NO_KEY: "updateMyProfile 无标配资料字段或自定义资料字段",
      ADD_BLACKLIST_INVALID_PARAM: "传入 addToBlacklist 接口的参数无效",
      DEL_BLACKLIST_INVALID_PARAM: "传入 removeFromBlacklist 接口的参数无效",
      CANNOT_ADD_SELF_TO_BLACKLIST: "不能拉黑自己",
      ADD_FRIEND_INVALID_PARAM: "传入 addFriend 接口的参数无效",
      NETWORK_ERROR: "网络错误",
      NETWORK_TIMEOUT: "请求超时",
      NETWORK_BASE_OPTIONS_NO_URL: "网络层初始化错误，缺少 URL 参数",
      NETWORK_UNDEFINED_SERVER_NAME: "打包错误，未定义的 serverName",
      NETWORK_PACKAGE_UNDEFINED: "未定义的 packageConfig",
      NO_NETWORK: "未连接到网络",
      CONVERTOR_IRREGULAR_PARAMS: "不规范的参数名称",
      NOTICE_RUNLOOP_UNEXPECTED_CONDITION: "意料外的通知条件",
      NOTICE_RUNLOOP_OFFSET_LOST: "_syncOffset 丢失",
      GET_LONGPOLL_ID_FAILED: "获取 longpolling id 失败",
      UNCAUGHT_ERROR: "未经明确定义的错误",
      INVALID_OPERATION: "无效操作，如调用了未定义或者未实现的方法等",
      CANNOT_FIND_PROTOCOL: "无法找到协议",
      CANNOT_FIND_MODULE: "无法找到模块，请参考：https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-03-sns.html",
      SDK_IS_NOT_READY: "接口需要 SDK 处于 ready 状态后才能调用",
      LOGGING_IN: "用户正在登录中",
      LOGIN_FAILED: "用户登录失败",
      KICKED_OUT_MULT_DEVICE: "用户多终端登录被踢出",
      KICKED_OUT_MULT_ACCOUNT: "用户多实例登录被踢出",
      KICKED_OUT_USERSIG_EXPIRED: "用户 userSig 过期被踢出",
      LOGGED_OUT: "用户已登出",
      KICKED_OUT_REST_API: "用户被 REST API - kick 接口: https://cloud.tencent.com/document/product/269/3853 踢出",
      OVER_FREQUENCY_LIMIT: "超出 SDK 频率控制",
      LONG_POLL_KICK_OUT: "检测到多个 web 实例登录，消息通道下线",
      OPEN_SERVICE_OVERLOAD_ERROR: "后台服务正忙，请稍后再试",
      MESSAGE_A2KEY_EXPIRED: "消息错误码：UserSig 或 A2 失效。",
      ACCOUNT_A2KEY_EXPIRED: "帐号错误码：UserSig 已过期，请重新生成。建议 UserSig 有效期设置不小于24小时。",
      LONG_POLL_API_PARAM_ERROR: "longPoll API parameters error",
      ILLEGAL_TOPIC_ID: "topicID 非法"
    },
    sa = "networkRTT",
    ra = "messageE2EDelay",
    ia = "sendMessageC2C",
    ca = "sendMessageGroup",
    ua = "sendMessageGroupAV",
    la = "sendMessageRichMedia",
    da = "cosUpload",
    pa = "messageReceivedGroup",
    ga = "messageReceivedGroupAVPush",
    _a = "messageReceivedGroupAVPull",
    ha = (r(Bt = {}, sa, 2), r(Bt, ra, 3), r(Bt, ia, 4), r(Bt, ca, 5), r(Bt, ua, 6), r(Bt, la, 7), r(Bt, pa, 8), r(Bt, ga, 9), r(Bt, _a, 10), r(Bt, da, 11), Bt),
    fa = {
      info: 4,
      warning: 5,
      error: 6
    },
    ma = {
      wifi: 1,
      "2g": 2,
      "3g": 3,
      "4g": 4,
      "5g": 5,
      unknown: 6,
      none: 7,
      online: 8
    },
    Ma = {
      login: 4
    },
    va = function () {
      function e(t) {
        n(this, e), this.eventType = Ma[t] || 0, this.timestamp = 0, this.networkType = 8, this.code = 0, this.message = "", this.moreMessage = "", this.extension = t, this.costTime = 0, this.duplicate = !1, this.level = 4, this.uiPlatform = void 0, this._sentFlag = !1, this._startts = Re();
      }
      return s(e, [{
        key: "updateTimeStamp",
        value: function value() {
          this.timestamp = Re();
        }
      }, {
        key: "start",
        value: function value(e) {
          return this._startts = e, this;
        }
      }, {
        key: "end",
        value: function value() {
          var e = this,
            t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          if (!this._sentFlag) {
            var o = Re();
            0 === this.costTime && (this.costTime = o - this._startts), this.setMoreMessage("startts:".concat(this._startts, " endts:").concat(o)), t ? (this._sentFlag = !0, this._eventStatModule && this._eventStatModule.pushIn(this)) : setTimeout(function () {
              e._sentFlag = !0, e._eventStatModule && e._eventStatModule.pushIn(e);
            }, 0);
          }
        }
      }, {
        key: "setError",
        value: function value(e, t, o) {
          return e instanceof Error ? (this._sentFlag || (this.setNetworkType(o), t ? (e.code && this.setCode(e.code), e.message && this.setMoreMessage(e.message)) : (this.setCode(na.NO_NETWORK), this.setMoreMessage(aa.NO_NETWORK)), this.setLevel("error")), this) : (we.warn("SSOLogData.setError value not instanceof Error, please check!"), this);
        }
      }, {
        key: "setCode",
        value: function value(e) {
          return Ze(e) || this._sentFlag || ("ECONNABORTED" === e && (this.code = 103), $e(e) ? this.code = e : we.warn("SSOLogData.setCode value not a number, please check!", e, o(e))), this;
        }
      }, {
        key: "setMessage",
        value: function value(e) {
          return Ze(e) || this._sentFlag || ($e(e) && (this.message = e.toString()), ze(e) && (this.message = e)), this;
        }
      }, {
        key: "setCostTime",
        value: function value(e) {
          return this.costTime = e, this;
        }
      }, {
        key: "setLevel",
        value: function value(e) {
          return Ze(e) || this._sentFlag || (this.level = fa[e]), this;
        }
      }, {
        key: "setMoreMessage",
        value: function value(e) {
          return Vt(this.moreMessage) ? this.moreMessage = "".concat(e) : this.moreMessage += " ".concat(e), this;
        }
      }, {
        key: "setNetworkType",
        value: function value(e) {
          if (Ze(e)) we.warn("SSOLogData.setNetworkType value is undefined, please check!");else {
            var t = ma[e.toLowerCase()];
            Ze(t) || (this.networkType = t);
          }
          return this;
        }
      }, {
        key: "getStartTs",
        value: function value() {
          return this._startts;
        }
      }, {
        key: "setUIPlatform",
        value: function value(e) {
          this.uiPlatform = e;
        }
      }], [{
        key: "bindEventStatModule",
        value: function value(t) {
          e.prototype._eventStatModule = t;
        }
      }]), e;
    }(),
    ya = {
      SDK_CONSTRUCT: "sdkConstruct",
      SDK_READY: "sdkReady",
      LOGIN: "login",
      LOGOUT: "logout",
      KICKED_OUT: "kickedOut",
      REGISTER_PLUGIN: "registerPlugin",
      KICK_OTHER: "kickOther",
      WS_CONNECT: "wsConnect",
      WS_ON_OPEN: "wsOnOpen",
      WS_ON_CLOSE: "wsOnClose",
      WS_ON_ERROR: "wsOnError",
      NETWORK_CHANGE: "networkChange",
      GET_COS_AUTH_KEY: "getCosAuthKey",
      GET_COS_PRE_SIG_URL: "getCosPreSigUrl",
      GET_SNAPSHOT_INFO: "getSnapshotInfo",
      UPLOAD: "upload",
      SEND_MESSAGE: "sendMessage",
      SEND_MESSAGE_WITH_RECEIPT: "sendMessageWithReceipt",
      SEND_COMBO_MESSAGE: "sendComboMessage",
      GET_C2C_ROAMING_MESSAGES: "getC2CRoamingMessages",
      GET_GROUP_ROAMING_MESSAGES: "getGroupRoamingMessages",
      GET_C2C_ROAMING_MESSAGES_HOPPING: "getC2CRoamingMessagesHopping",
      GET_GROUP_ROAMING_MESSAGES_HOPPING: "getGroupRoamingMessagesHopping",
      GET_READ_RECEIPT: "getReadReceipt",
      GET_READ_RECEIPT_DETAIL: "getReadReceiptDetail",
      SEND_READ_RECEIPT: "sendReadReceipt",
      SEND_C2C_READ_RECEIPT: "sendC2CReadReceipt",
      REVOKE_MESSAGE: "revokeMessage",
      DELETE_MESSAGE: "deleteMessage",
      EDIT_MESSAGE: "modifyMessage",
      SET_C2C_MESSAGE_READ: "setC2CMessageRead",
      SET_GROUP_MESSAGE_READ: "setGroupMessageRead",
      EMPTY_MESSAGE_BODY: "emptyMessageBody",
      GET_PEER_READ_TIME: "getPeerReadTime",
      UPLOAD_MERGER_MESSAGE: "uploadMergerMessage",
      DOWNLOAD_MERGER_MESSAGE: "downloadMergerMessage",
      JSON_PARSE_ERROR: "jsonParseError",
      MESSAGE_E2E_DELAY_EXCEPTION: "messageE2EDelayException",
      GET_CONVERSATION_LIST: "getConversationList",
      GET_CONVERSATION_PROFILE: "getConversationProfile",
      DELETE_CONVERSATION: "deleteConversation",
      PIN_CONVERSATION: "pinConversation",
      GET_CONVERSATION_LIST_IN_STORAGE: "getConversationListInStorage",
      SYNC_CONVERSATION_LIST: "syncConversationList",
      SET_ALL_MESSAGE_READ: "setAllMessageRead",
      CREATE_GROUP: "createGroup",
      APPLY_JOIN_GROUP: "applyJoinGroup",
      QUIT_GROUP: "quitGroup",
      SEARCH_GROUP_BY_ID: "searchGroupByID",
      CHANGE_GROUP_OWNER: "changeGroupOwner",
      HANDLE_GROUP_APPLICATION: "handleGroupApplication",
      HANDLE_GROUP_INVITATION: "handleGroupInvitation",
      SET_MESSAGE_REMIND_TYPE: "setMessageRemindType",
      DISMISS_GROUP: "dismissGroup",
      UPDATE_GROUP_PROFILE: "updateGroupProfile",
      GET_GROUP_LIST: "getGroupList",
      GET_GROUP_PROFILE: "getGroupProfile",
      GET_GROUP_LIST_IN_STORAGE: "getGroupListInStorage",
      GET_GROUP_LAST_SEQUENCE: "getGroupLastSequence",
      GET_GROUP_MISSING_MESSAGE: "getGroupMissingMessage",
      PAGING_GET_GROUP_LIST: "pagingGetGroupList",
      PAGING_GET_GROUP_LIST_WITH_TOPIC: "pagingGetGroupListWithTopic",
      GET_GROUP_SIMPLIFIED_INFO: "getGroupSimplifiedInfo",
      JOIN_WITHOUT_AUTH: "joinWithoutAuth",
      INIT_GROUP_ATTRIBUTES: "initGroupAttributes",
      SET_GROUP_ATTRIBUTES: "setGroupAttributes",
      DELETE_GROUP_ATTRIBUTES: "deleteGroupAttributes",
      GET_GROUP_ATTRIBUTES: "getGroupAttributes",
      GET_GROUP_MEMBER_LIST: "getGroupMemberList",
      GET_GROUP_MEMBER_PROFILE: "getGroupMemberProfile",
      ADD_GROUP_MEMBER: "addGroupMember",
      DELETE_GROUP_MEMBER: "deleteGroupMember",
      SET_GROUP_MEMBER_MUTE_TIME: "setGroupMemberMuteTime",
      SET_GROUP_MEMBER_NAME_CARD: "setGroupMemberNameCard",
      SET_GROUP_MEMBER_ROLE: "setGroupMemberRole",
      SET_GROUP_MEMBER_CUSTOM_FIELD: "setGroupMemberCustomField",
      GET_GROUP_ONLINE_MEMBER_COUNT: "getGroupOnlineMemberCount",
      SYNC_MESSAGE: "syncMessage",
      LONG_POLLING_AV_ERROR: "longPollingAVError",
      MESSAGE_LOSS: "messageLoss",
      MESSAGE_STACKED: "messageStacked",
      GET_USER_PROFILE: "getUserProfile",
      UPDATE_MY_PROFILE: "updateMyProfile",
      GET_BLACKLIST: "getBlacklist",
      ADD_TO_BLACKLIST: "addToBlacklist",
      REMOVE_FROM_BLACKLIST: "removeFromBlacklist",
      ADD_FRIEND: "addFriend",
      CHECK_FRIEND: "checkFriend",
      DELETE_FRIEND: "removeFromFriendList",
      GET_FRIEND_PROFILE: "getFriendProfile",
      GET_FRIEND_LIST: "getFriendList",
      UPDATE_FRIEND: "updateFriend",
      GET_FRIEND_APPLICATION_LIST: "getFriendApplicationList",
      DELETE_FRIEND_APPLICATION: "deleteFriendApplication",
      ACCEPT_FRIEND_APPLICATION: "acceptFriendApplication",
      REFUSE_FRIEND_APPLICATION: "refuseFriendApplication",
      SET_FRIEND_APPLICATION_READ: "setFriendApplicationRead",
      CREATE_FRIEND_GROUP: "createFriendGroup",
      DELETE_FRIEND_GROUP: "deleteFriendGroup",
      RENAME_FRIEND_GROUP: "renameFriendGroup",
      ADD_TO_FRIEND_GROUP: "addToFriendGroup",
      REMOVE_FROM_FRIEND_GROUP: "removeFromFriendGroup",
      GET_FRIEND_GROUP_LIST: "getFriendGroupList",
      CREATE_TOPIC: "createTopic",
      DELETE_TOPIC: "deleteTopic",
      UPDATE_TOPIC_PROFILE: "updateTopicProfile",
      GET_TOPIC_LIST: "getTopicList",
      RELAY_GET_TOPIC_LIST: "relayGetTopicList",
      GET_TOPIC_LAST_SEQUENCE: "getTopicLastSequence",
      MP_HIDE_TO_SHOW: "mpHideToShow",
      CALLBACK_FUNCTION_ERROR: "callbackFunctionError",
      FETCH_CLOUD_CONTROL_CONFIG: "fetchCloudControlConfig",
      PUSHED_CLOUD_CONTROL_CONFIG: "pushedCloudControlConfig",
      FETCH_COMMERCIAL_CONFIG: "fetchCommercialConfig",
      PUSHED_COMMERCIAL_CONFIG: "pushedCommercialConfig",
      ERROR: "error",
      LAST_MESSAGE_NOT_EXIST: "lastMessageNotExist"
    },
    Ia = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_TEXT, this.content = {
          text: t.text || ""
        };
      }
      return s(e, [{
        key: "setText",
        value: function value(e) {
          this.content.text = e;
        }
      }, {
        key: "sendable",
        value: function value() {
          return 0 !== this.content.text.length;
        }
      }]), e;
    }(),
    Ea = function () {
      function e(t) {
        n(this, e), this._imageMemoryURL = "", te ? this.createImageDataASURLInWXMiniApp(t.file) : this.createImageDataASURLInWeb(t.file), this._initImageInfoModel(), this.type = D.MSG_IMAGE, this._percent = 0, this.content = {
          imageFormat: t.imageFormat || be.UNKNOWN,
          uuid: t.uuid,
          imageInfoArray: []
        }, this.initImageInfoArray(t.imageInfoArray), this._defaultImage = "http://imgcache.qq.com/open/qcloud/video/act/webim-images/default.jpg", this._autoFixUrl();
      }
      return s(e, [{
        key: "_initImageInfoModel",
        value: function value() {
          var e = this;
          this._ImageInfoModel = function (t) {
            this.instanceID = dt(9999999), this.sizeType = t.type || 0, this.type = 0, this.size = t.size || 0, this.width = t.width || 0, this.height = t.height || 0, this.imageUrl = t.url || "", this.url = t.url || e._imageMemoryURL || e._defaultImage;
          }, this._ImageInfoModel.prototype = {
            setSizeType: function setSizeType(e) {
              this.sizeType = e;
            },
            setType: function setType(e) {
              this.type = e;
            },
            setImageUrl: function setImageUrl(e) {
              e && (this.imageUrl = e);
            },
            getImageUrl: function getImageUrl() {
              return this.imageUrl;
            }
          };
        }
      }, {
        key: "initImageInfoArray",
        value: function value(e) {
          for (var t = 0, o = null, n = null; t <= 2;) {
            n = Ze(e) || Ze(e[t]) ? {
              type: 0,
              size: 0,
              width: 0,
              height: 0,
              url: ""
            } : e[t], (o = new this._ImageInfoModel(n)).setSizeType(t + 1), o.setType(t), this.addImageInfo(o), t++;
          }
          this.updateAccessSideImageInfoArray();
        }
      }, {
        key: "updateImageInfoArray",
        value: function value(e) {
          for (var t, o = this.content.imageInfoArray.length, n = 0; n < o; n++) {
            t = this.content.imageInfoArray[n], e[n].size && (t.size = e[n].size), e[n].url && t.setImageUrl(e[n].url), e[n].width && (t.width = e[n].width), e[n].height && (t.height = e[n].height);
          }
        }
      }, {
        key: "_autoFixUrl",
        value: function value() {
          for (var e = this.content.imageInfoArray.length, t = "", o = "", n = ["http", "https"], a = null, s = 0; s < e; s++) {
            this.content.imageInfoArray[s].url && "" !== (a = this.content.imageInfoArray[s]).imageUrl && (o = a.imageUrl.slice(0, a.imageUrl.indexOf("://") + 1), t = a.imageUrl.slice(a.imageUrl.indexOf("://") + 1), n.indexOf(o) < 0 && (o = "https:"), this.content.imageInfoArray[s].setImageUrl([o, t].join("")));
          }
        }
      }, {
        key: "updatePercent",
        value: function value(e) {
          this._percent = e, this._percent > 1 && (this._percent = 1);
        }
      }, {
        key: "updateImageFormat",
        value: function value(e) {
          this.content.imageFormat = be[e.toUpperCase()] || be.UNKNOWN;
        }
      }, {
        key: "createImageDataASURLInWeb",
        value: function value(e) {
          void 0 !== e && e.files.length > 0 && (this._imageMemoryURL = window.URL.createObjectURL(e.files[0]));
        }
      }, {
        key: "createImageDataASURLInWXMiniApp",
        value: function value(e) {
          e && e.url && (this._imageMemoryURL = e.url);
        }
      }, {
        key: "replaceImageInfo",
        value: function value(e, t) {
          this.content.imageInfoArray[t] instanceof this._ImageInfoModel || (this.content.imageInfoArray[t] = e);
        }
      }, {
        key: "addImageInfo",
        value: function value(e) {
          this.content.imageInfoArray.length >= 3 || this.content.imageInfoArray.push(e);
        }
      }, {
        key: "updateAccessSideImageInfoArray",
        value: function value() {
          var e = this.content.imageInfoArray,
            t = e[0],
            o = t.width,
            n = void 0 === o ? 0 : o,
            a = t.height,
            s = void 0 === a ? 0 : a;
          0 !== n && 0 !== s && (kt(e), Object.assign(e[2], Lt({
            originWidth: n,
            originHeight: s,
            min: 720
          })));
        }
      }, {
        key: "sendable",
        value: function value() {
          return 0 !== this.content.imageInfoArray.length && "" !== this.content.imageInfoArray[0].imageUrl && 0 !== this.content.imageInfoArray[0].size;
        }
      }]), e;
    }(),
    Ta = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_FACE, this.content = t || null;
      }
      return s(e, [{
        key: "sendable",
        value: function value() {
          return null !== this.content;
        }
      }]), e;
    }(),
    Ca = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_AUDIO, this._percent = 0, this.content = {
          downloadFlag: 2,
          second: t.second,
          size: t.size,
          url: t.url,
          remoteAudioUrl: t.url || "",
          uuid: t.uuid
        };
      }
      return s(e, [{
        key: "updatePercent",
        value: function value(e) {
          this._percent = e, this._percent > 1 && (this._percent = 1);
        }
      }, {
        key: "updateAudioUrl",
        value: function value(e) {
          this.content.remoteAudioUrl = e;
        }
      }, {
        key: "sendable",
        value: function value() {
          return "" !== this.content.remoteAudioUrl;
        }
      }]), e;
    }(),
    Sa = {
      from: !0,
      groupID: !0,
      groupName: !0,
      to: !0
    },
    Da = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_GRP_TIP, this.content = {}, this._initContent(t);
      }
      return s(e, [{
        key: "_initContent",
        value: function value(e) {
          var t = this;
          Object.keys(e).forEach(function (o) {
            switch (o) {
              case "remarkInfo":
                break;
              case "groupProfile":
                t.content.groupProfile = {}, t._initGroupProfile(e[o]);
                break;
              case "operatorInfo":
                break;
              case "memberInfoList":
              case "msgMemberInfo":
                t._updateMemberList(e[o]);
                break;
              case "onlineMemberInfo":
                break;
              case "memberNum":
                t.content[o] = e[o], t.content.memberCount = e[o];
                break;
              case "newGroupProfile":
                t.content.newGroupProfile = {}, t._initNewGroupProfile(e[o]);
                break;
              default:
                t.content[o] = e[o];
            }
          }), this.content.userIDList || (this.content.userIDList = [this.content.operatorID]);
        }
      }, {
        key: "_initGroupProfile",
        value: function value(e) {
          for (var t = Object.keys(e), o = 0; o < t.length; o++) {
            var n = t[o];
            Sa[n] && (this.content.groupProfile[n] = e[n]);
          }
        }
      }, {
        key: "_updateMemberList",
        value: function value(e) {
          Vt(this.content.memberList) ? this.content.memberList = e : this.content.memberList.forEach(function (t) {
            e.forEach(function (e) {
              t.userID === e.userID && Object.assign(t, e);
            });
          });
        }
      }, {
        key: "_initNewGroupProfile",
        value: function value(e) {
          for (var t = Object.keys(e), o = 0; o < t.length; o++) {
            var n = t[o];
            "muteAllMembers" !== n ? this.content.newGroupProfile[n] = e[n] : this.content.newGroupProfile[n] = 1 === e[n];
          }
        }
      }]), e;
    }(),
    Na = {
      from: !0,
      groupID: !0,
      groupName: !0,
      to: !0
    },
    Aa = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_GRP_SYS_NOTICE, this.content = {}, this._initContent(t);
      }
      return s(e, [{
        key: "_initContent",
        value: function value(e) {
          var t = this;
          Object.keys(e).forEach(function (o) {
            switch (o) {
              case "memberInfoList":
                break;
              case "remarkInfo":
                t.content.handleMessage = e[o];
                break;
              case "groupProfile":
                t.content.groupProfile = {}, t._initGroupProfile(e[o]);
                break;
              default:
                t.content[o] = e[o];
            }
          });
        }
      }, {
        key: "_initGroupProfile",
        value: function value(e) {
          for (var t = Object.keys(e), o = 0; o < t.length; o++) {
            var n = t[o];
            Na[n] && ("groupName" === n ? this.content.groupProfile.name = e[n] : this.content.groupProfile[n] = e[n]);
          }
        }
      }]), e;
    }(),
    Oa = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_FILE, this._percent = 0;
        var o = this._getFileInfo(t);
        this.content = {
          downloadFlag: 2,
          fileUrl: t.url || "",
          uuid: t.uuid,
          fileName: o.name || "",
          fileSize: o.size || 0
        };
      }
      return s(e, [{
        key: "_getFileInfo",
        value: function value(e) {
          if (!Ze(e.fileName) && !Ze(e.fileSize)) return {
            size: e.fileSize,
            name: e.fileName
          };
          var t = e.file.files[0];
          if (Z) {
            if (t.path && -1 !== t.path.indexOf(".")) {
              var o = t.path.slice(t.path.lastIndexOf(".") + 1).toLowerCase();
              t.type = o, t.name || (t.name = "".concat(dt(999999), ".").concat(o));
            }
            t.name || (t.type = "", t.name = t.path.slice(t.path.lastIndexOf("/") + 1).toLowerCase()), t.suffix && (t.type = t.suffix), t.url || (t.url = t.path);
          }
          return {
            size: t.size,
            name: t.name
          };
        }
      }, {
        key: "updatePercent",
        value: function value(e) {
          this._percent = e, this._percent > 1 && (this._percent = 1);
        }
      }, {
        key: "updateFileUrl",
        value: function value(e) {
          this.content.fileUrl = e;
        }
      }, {
        key: "sendable",
        value: function value() {
          return "" !== this.content.fileUrl && "" !== this.content.fileName && 0 !== this.content.fileSize;
        }
      }]), e;
    }(),
    Ra = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_CUSTOM, this.content = {
          data: t.data || "",
          description: t.description || "",
          extension: t.extension || ""
        };
      }
      return s(e, [{
        key: "setData",
        value: function value(e) {
          return this.content.data = e, this;
        }
      }, {
        key: "setDescription",
        value: function value(e) {
          return this.content.description = e, this;
        }
      }, {
        key: "setExtension",
        value: function value(e) {
          return this.content.extension = e, this;
        }
      }, {
        key: "sendable",
        value: function value() {
          return 0 !== this.content.data.length || 0 !== this.content.description.length || 0 !== this.content.extension.length;
        }
      }]), e;
    }(),
    La = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_VIDEO, this._percent = 0, this.content = {
          remoteVideoUrl: t.remoteVideoUrl || t.videoUrl || "",
          videoFormat: t.videoFormat,
          videoSecond: parseInt(t.videoSecond, 10),
          videoSize: t.videoSize,
          videoUrl: t.videoUrl,
          videoDownloadFlag: 2,
          videoUUID: t.videoUUID,
          thumbUUID: t.thumbUUID,
          thumbFormat: t.thumbFormat,
          thumbWidth: t.thumbWidth,
          snapshotWidth: t.thumbWidth,
          thumbHeight: t.thumbHeight,
          snapshotHeight: t.thumbHeight,
          thumbSize: t.thumbSize,
          snapshotSize: t.thumbSize,
          thumbDownloadFlag: 2,
          thumbUrl: t.thumbUrl,
          snapshotUrl: t.thumbUrl
        };
      }
      return s(e, [{
        key: "updatePercent",
        value: function value(e) {
          this._percent = e, this._percent > 1 && (this._percent = 1);
        }
      }, {
        key: "updateVideoUrl",
        value: function value(e) {
          e && (this.content.remoteVideoUrl = e);
        }
      }, {
        key: "updateSnapshotInfo",
        value: function value(e) {
          var t = e.snapshotUrl,
            o = e.snapshotWidth,
            n = e.snapshotHeight;
          Vt(t) || (this.content.thumbUrl = this.content.snapshotUrl = t), Vt(o) || (this.content.thumbWidth = this.content.snapshotWidth = Number(o)), Vt(n) || (this.content.thumbHeight = this.content.snapshotHeight = Number(n));
        }
      }, {
        key: "sendable",
        value: function value() {
          return "" !== this.content.remoteVideoUrl;
        }
      }]), e;
    }(),
    ka = function () {
      function e(t) {
        n(this, e), this.type = D.MSG_LOCATION;
        var o = t.description,
          a = t.longitude,
          s = t.latitude;
        this.content = {
          description: o,
          longitude: a,
          latitude: s
        };
      }
      return s(e, [{
        key: "sendable",
        value: function value() {
          return !0;
        }
      }]), e;
    }(),
    Ga = function () {
      function e(t) {
        if (n(this, e), this.from = t.from, this.messageSender = t.from, this.time = t.time, this.messageSequence = t.sequence, this.clientSequence = t.clientSequence || t.sequence, this.messageRandom = t.random, this.cloudCustomData = t.cloudCustomData || "", t.ID) this.nick = t.nick || "", this.avatar = t.avatar || "", this.messageBody = [{
          type: t.type,
          payload: t.payload
        }], t.conversationType.startsWith(D.CONV_C2C) ? this.receiverUserID = t.to : t.conversationType.startsWith(D.CONV_GROUP) && (this.receiverGroupID = t.to), this.messageReceiver = t.to;else {
          this.nick = t.nick || "", this.avatar = t.avatar || "", this.messageBody = [];
          var o = t.elements[0].type,
            a = t.elements[0].content;
          this._patchRichMediaPayload(o, a), o === D.MSG_MERGER ? this.messageBody.push({
            type: o,
            payload: new Pa(a).content
          }) : this.messageBody.push({
            type: o,
            payload: a
          }), t.groupID && (this.receiverGroupID = t.groupID, this.messageReceiver = t.groupID), t.to && (this.receiverUserID = t.to, this.messageReceiver = t.to);
        }
      }
      return s(e, [{
        key: "_patchRichMediaPayload",
        value: function value(e, t) {
          e === D.MSG_IMAGE ? t.imageInfoArray.forEach(function (e) {
            !e.imageUrl && e.url && (e.imageUrl = e.url, e.sizeType = e.type, 1 === e.type ? e.type = 0 : 3 === e.type && (e.type = 1));
          }) : e === D.MSG_VIDEO ? !t.remoteVideoUrl && t.videoUrl && (t.remoteVideoUrl = t.videoUrl) : e === D.MSG_AUDIO ? !t.remoteAudioUrl && t.url && (t.remoteAudioUrl = t.url) : e === D.MSG_FILE && !t.fileUrl && t.url && (t.fileUrl = t.url, t.url = void 0);
        }
      }]), e;
    }(),
    Pa = function () {
      function e(t) {
        if (n(this, e), this.type = D.MSG_MERGER, this.content = {
          downloadKey: "",
          pbDownloadKey: "",
          messageList: [],
          title: "",
          abstractList: [],
          compatibleText: "",
          version: 0,
          layersOverLimit: !1
        }, t.downloadKey) {
          var o = t.downloadKey,
            a = t.pbDownloadKey,
            s = t.title,
            r = t.abstractList,
            i = t.compatibleText,
            c = t.version;
          this.content.downloadKey = o, this.content.pbDownloadKey = a, this.content.title = s, this.content.abstractList = r, this.content.compatibleText = i, this.content.version = c || 0;
        } else if (Vt(t.messageList)) 1 === t.layersOverLimit && (this.content.layersOverLimit = !0);else {
          var u = t.messageList,
            l = t.title,
            d = t.abstractList,
            p = t.compatibleText,
            g = t.version,
            _ = [];
          u.forEach(function (e) {
            if (!Vt(e)) {
              var t = new Ga(e);
              _.push(t);
            }
          }), this.content.messageList = _, this.content.title = l, this.content.abstractList = d, this.content.compatibleText = p, this.content.version = g || 0;
        }
        we.debug("MergerElement.content:", this.content);
      }
      return s(e, [{
        key: "sendable",
        value: function value() {
          return !Vt(this.content.messageList) || !Vt(this.content.downloadKey);
        }
      }]), e;
    }(),
    Ua = {
      1: D.MSG_PRIORITY_HIGH,
      2: D.MSG_PRIORITY_NORMAL,
      3: D.MSG_PRIORITY_LOW,
      4: D.MSG_PRIORITY_LOWEST
    },
    wa = function () {
      function e(t) {
        n(this, e), this.ID = "", this.conversationID = t.conversationID || null, this.conversationType = t.conversationType || D.CONV_C2C, this.conversationSubType = t.conversationSubType, this.time = t.time || Math.ceil(Date.now() / 1e3), this.sequence = t.sequence || 0, this.clientSequence = t.clientSequence || t.sequence || 0, this.random = t.random || 0 === t.random ? t.random : dt(), this.priority = this._computePriority(t.priority), this.nick = t.nick || "", this.avatar = t.avatar || "", this.isPeerRead = 1 === t.isPeerRead || !1, this.nameCard = "", this._elements = [], this.isPlaceMessage = t.isPlaceMessage || 0, this.isRevoked = 2 === t.isPlaceMessage || 8 === t.msgFlagBits, this.from = t.from || null, this.to = t.to || null, this.flow = "", this.isSystemMessage = t.isSystemMessage || !1, this.protocol = t.protocol || "JSON", this.isResend = !1, this.isRead = !1, this.status = t.status || xt.SUCCESS, this._onlineOnlyFlag = !1, this._groupAtInfoList = [], this._relayFlag = !1, this.atUserList = [], this.cloudCustomData = t.cloudCustomData || "", this.isDeleted = !1, this.isModified = !1, this._isExcludedFromUnreadCount = !(!t.messageControlInfo || 1 !== t.messageControlInfo.excludedFromUnreadCount), this._isExcludedFromLastMessage = !(!t.messageControlInfo || 1 !== t.messageControlInfo.excludedFromLastMessage), this.clientTime = t.clientTime || ke() || 0, this.senderTinyID = t.senderTinyID || t.tinyID || "", this.readReceiptInfo = t.readReceiptInfo || {
          readCount: void 0,
          unreadCount: void 0
        }, this.needReadReceipt = !0 === t.needReadReceipt || 1 === t.needReadReceipt, this.version = t.messageVersion || 0, this.reInitialize(t.currentUser), this.extractGroupInfo(t.groupProfile || null), this.handleGroupAtInfo(t);
      }
      return s(e, [{
        key: "elements",
        get: function get() {
          return we.warn("！！！Message 实例的 elements 属性即将废弃，请尽快修改。使用 type 和 payload 属性处理单条消息，兼容组合消息使用 _elements 属性！！！"), this._elements;
        }
      }, {
        key: "getElements",
        value: function value() {
          return this._elements;
        }
      }, {
        key: "extractGroupInfo",
        value: function value(e) {
          if (null !== e) {
            ze(e.nick) && (this.nick = e.nick), ze(e.avatar) && (this.avatar = e.avatar);
            var t = e.messageFromAccountExtraInformation;
            Xe(t) && ze(t.nameCard) && (this.nameCard = t.nameCard);
          }
        }
      }, {
        key: "handleGroupAtInfo",
        value: function value(e) {
          var t = this;
          e.payload && e.payload.atUserList && e.payload.atUserList.forEach(function (e) {
            e !== D.MSG_AT_ALL ? (t._groupAtInfoList.push({
              groupAtAllFlag: 0,
              groupAtUserID: e
            }), t.atUserList.push(e)) : (t._groupAtInfoList.push({
              groupAtAllFlag: 1
            }), t.atUserList.push(D.MSG_AT_ALL));
          }), Qe(e.groupAtInfo) && e.groupAtInfo.forEach(function (e) {
            0 === e.groupAtAllFlag ? t.atUserList.push(e.groupAtUserID) : 1 === e.groupAtAllFlag && t.atUserList.push(D.MSG_AT_ALL);
          });
        }
      }, {
        key: "getGroupAtInfoList",
        value: function value() {
          return this._groupAtInfoList;
        }
      }, {
        key: "_initProxy",
        value: function value() {
          this._elements[0] && (this.payload = this._elements[0].content, this.type = this._elements[0].type);
        }
      }, {
        key: "reInitialize",
        value: function value(e) {
          e && (this.status = this.from ? xt.SUCCESS : xt.UNSEND, !this.from && (this.from = e)), this._initFlow(e), this._initSequence(e), this._concatConversationID(e), this.generateMessageID();
        }
      }, {
        key: "isSendable",
        value: function value() {
          return 0 !== this._elements.length && ("function" != typeof this._elements[0].sendable ? (we.warn("".concat(this._elements[0].type, ' need "boolean : sendable()" method')), !1) : this._elements[0].sendable());
        }
      }, {
        key: "_initTo",
        value: function value(e) {
          this.conversationType === D.CONV_GROUP && (this.to = e.groupID);
        }
      }, {
        key: "_initSequence",
        value: function value(e) {
          0 === this.clientSequence && e && (this.clientSequence = function (e) {
            if (!e) return we.error("autoIncrementIndex(string: key) need key parameter"), !1;
            if (void 0 === ht[e]) {
              var t = new Date(),
                o = "3".concat(t.getHours()).slice(-2),
                n = "0".concat(t.getMinutes()).slice(-2),
                a = "0".concat(t.getSeconds()).slice(-2);
              ht[e] = parseInt([o, n, a, "0001"].join("")), o = null, n = null, a = null, we.log("autoIncrementIndex start index:".concat(ht[e]));
            }
            return ht[e]++;
          }(e)), 0 === this.sequence && this.conversationType === D.CONV_C2C && (this.sequence = this.clientSequence);
        }
      }, {
        key: "generateMessageID",
        value: function value() {
          this.from === D.CONV_SYSTEM && (this.senderTinyID = "144115198244471703"), this.ID = "".concat(this.senderTinyID, "-").concat(this.clientTime, "-").concat(this.random);
        }
      }, {
        key: "_initFlow",
        value: function value(e) {
          "" !== e && (e === this.from ? (this.flow = "out", this.isRead = !0) : this.flow = "in");
        }
      }, {
        key: "_concatConversationID",
        value: function value(e) {
          var t = this.to,
            o = "",
            n = this.conversationType;
          n !== D.CONV_SYSTEM ? (o = n === D.CONV_C2C ? e === this.from ? t : this.from : this.to, this.conversationID = "".concat(n).concat(o)) : this.conversationID = D.CONV_SYSTEM;
        }
      }, {
        key: "isElement",
        value: function value(e) {
          return e instanceof Ia || e instanceof Ea || e instanceof Ta || e instanceof Ca || e instanceof Oa || e instanceof La || e instanceof Da || e instanceof Aa || e instanceof Ra || e instanceof ka || e instanceof Pa;
        }
      }, {
        key: "setElement",
        value: function value(e) {
          var t = this;
          if (this.isElement(e)) return this._elements = [e], void this._initProxy();
          var o = function o(e) {
            if (e.type && e.content) switch (e.type) {
              case D.MSG_TEXT:
                t.setTextElement(e.content);
                break;
              case D.MSG_IMAGE:
                t.setImageElement(e.content);
                break;
              case D.MSG_AUDIO:
                t.setAudioElement(e.content);
                break;
              case D.MSG_FILE:
                t.setFileElement(e.content);
                break;
              case D.MSG_VIDEO:
                t.setVideoElement(e.content);
                break;
              case D.MSG_CUSTOM:
                t.setCustomElement(e.content);
                break;
              case D.MSG_LOCATION:
                t.setLocationElement(e.content);
                break;
              case D.MSG_GRP_TIP:
                t.setGroupTipElement(e.content);
                break;
              case D.MSG_GRP_SYS_NOTICE:
                t.setGroupSystemNoticeElement(e.content);
                break;
              case D.MSG_FACE:
                t.setFaceElement(e.content);
                break;
              case D.MSG_MERGER:
                t.setMergerElement(e.content);
                break;
              default:
                we.warn(e.type, e.content, "no operation......");
            }
          };
          if (Qe(e)) for (var n = 0; n < e.length; n++) {
            o(e[n]);
          } else o(e);
          this._initProxy();
        }
      }, {
        key: "clearElement",
        value: function value() {
          this._elements.length = 0;
        }
      }, {
        key: "setTextElement",
        value: function value(e) {
          var t = "string" == typeof e ? e : e.text,
            o = new Ia({
              text: t
            });
          this._elements.push(o);
        }
      }, {
        key: "setImageElement",
        value: function value(e) {
          var t = new Ea(e);
          this._elements.push(t);
        }
      }, {
        key: "setAudioElement",
        value: function value(e) {
          var t = new Ca(e);
          this._elements.push(t);
        }
      }, {
        key: "setFileElement",
        value: function value(e) {
          var t = new Oa(e);
          this._elements.push(t);
        }
      }, {
        key: "setVideoElement",
        value: function value(e) {
          var t = new La(e);
          this._elements.push(t);
        }
      }, {
        key: "setLocationElement",
        value: function value(e) {
          var t = new ka(e);
          this._elements.push(t);
        }
      }, {
        key: "setCustomElement",
        value: function value(e) {
          var t = new Ra(e);
          this._elements.push(t);
        }
      }, {
        key: "setGroupTipElement",
        value: function value(e) {
          var t = {},
            o = e.operationType;
          Vt(e.memberInfoList) ? e.operatorInfo && (t = e.operatorInfo) : o !== D.GRP_TIP_MBR_JOIN && o !== D.GRP_TIP_MBR_KICKED_OUT && o !== D.GRP_TIP_MBR_SET_ADMIN && o !== D.GRP_TIP_MBR_CANCELED_ADMIN || (t = e.memberInfoList[0]);
          var n = t,
            a = n.nick,
            s = n.avatar;
          ze(a) && (this.nick = a), ze(s) && (this.avatar = s);
          var r = new Da(e);
          this._elements.push(r);
        }
      }, {
        key: "setGroupSystemNoticeElement",
        value: function value(e) {
          var t = new Aa(e);
          this._elements.push(t);
        }
      }, {
        key: "setFaceElement",
        value: function value(e) {
          var t = new Ta(e);
          this._elements.push(t);
        }
      }, {
        key: "setMergerElement",
        value: function value(e) {
          var t = new Pa(e);
          this._elements.push(t);
        }
      }, {
        key: "setIsRead",
        value: function value(e) {
          this.isRead = e;
        }
      }, {
        key: "setRelayFlag",
        value: function value(e) {
          this._relayFlag = e;
        }
      }, {
        key: "getRelayFlag",
        value: function value() {
          return this._relayFlag;
        }
      }, {
        key: "_computePriority",
        value: function value(e) {
          if (Ze(e)) return D.MSG_PRIORITY_NORMAL;
          if (ze(e) && -1 !== Object.values(Ua).indexOf(e)) return e;
          if ($e(e)) {
            var t = "" + e;
            if (-1 !== Object.keys(Ua).indexOf(t)) return Ua[t];
          }
          return D.MSG_PRIORITY_NORMAL;
        }
      }, {
        key: "setNickAndAvatar",
        value: function value(e) {
          var t = e.nick,
            o = e.avatar;
          ze(t) && (this.nick = t), ze(o) && (this.avatar = o);
        }
      }, {
        key: "setNameCard",
        value: function value(e) {
          ze(e) && (this.nameCard = e);
        }
      }]), e;
    }(),
    ba = function ba(e) {
      return {
        code: 0,
        data: e || {}
      };
    },
    Fa = "https://cloud.tencent.com/document/product/",
    qa = "您可以在即时通信 IM 控制台的【开发辅助工具(https://console.cloud.tencent.com/im-detail/tool-usersig)】 页面校验 UserSig。",
    Va = "UserSig 非法，请使用官网提供的 API 重新生成 UserSig(".concat(Fa, "269/32688)。"),
    Ka = "#.E6.B6.88.E6.81.AF.E5.85.83.E7.B4.A0-timmsgelement",
    Ha = {
      70001: "UserSig 已过期，请重新生成。建议 UserSig 有效期设置不小于24小时。",
      70002: "UserSig 长度为0，请检查传入的 UserSig 是否正确。",
      70003: Va,
      70005: Va,
      70009: "UserSig 验证失败，可能因为生成 UserSig 时混用了其他 SDKAppID 的私钥或密钥导致，请使用对应 SDKAppID 下的私钥或密钥重新生成 UserSig(".concat(Fa, "269/32688)。"),
      70013: "请求中的 UserID 与生成 UserSig 时使用的 UserID 不匹配。".concat(qa),
      70014: "请求中的 SDKAppID 与生成 UserSig 时使用的 SDKAppID 不匹配。".concat(qa),
      70016: "密钥不存在，UserSig 验证失败，请在即时通信 IM 控制台获取密钥(".concat(Fa, "269/32578#.E8.8E.B7.E5.8F.96.E5.AF.86.E9.92.A5)。"),
      70020: "SDKAppID 未找到，请在即时通信 IM 控制台确认应用信息。",
      70050: "UserSig 验证次数过于频繁。请检查 UserSig 是否正确，并于1分钟后重新验证。".concat(qa),
      70051: "帐号被拉入黑名单。",
      70052: "UserSig 已经失效，请重新生成，再次尝试。",
      70107: "因安全原因被限制登录，请不要频繁登录。",
      70169: "请求的用户帐号不存在。",
      70114: "".concat("服务端内部超时，请稍后重试。"),
      70202: "".concat("服务端内部超时，请稍后重试。"),
      70206: "请求中批量数量不合法。",
      70402: "参数非法，请检查必填字段是否填充，或者字段的填充是否满足协议要求。",
      70403: "请求失败，需要 App 管理员权限。",
      70398: "帐号数超限。如需创建多于100个帐号，请将应用升级为专业版，具体操作指引请参见购买指引(".concat(Fa, "269/32458)。"),
      70500: "".concat("服务端内部错误，请重试。"),
      71e3: "删除帐号失败。仅支持删除体验版帐号，您当前应用为专业版，暂不支持帐号删除。",
      20001: "请求包非法。",
      20002: "UserSig 或 A2 失效。",
      20003: "消息发送方或接收方 UserID 无效或不存在，请检查 UserID 是否已导入即时通信 IM。",
      20004: "网络异常，请重试。",
      20005: "".concat("服务端内部错误，请重试。"),
      20006: "触发发送".concat("单聊消息", "之前回调，App 后台返回禁止下发该消息。"),
      20007: "发送".concat("单聊消息", "，被对方拉黑，禁止发送。消息发送状态默认展示为失败，您可以登录控制台修改该场景下的消息发送状态展示结果，具体操作请参见消息保留设置(").concat(Fa, "269/38656)。"),
      20009: "消息发送双方互相不是好友，禁止发送（配置".concat("单聊消息", "校验好友关系才会出现）。"),
      20010: "发送".concat("单聊消息", "，自己不是对方的好友（单向关系），禁止发送。"),
      20011: "发送".concat("单聊消息", "，对方不是自己的好友（单向关系），禁止发送。"),
      20012: "发送方被禁言，该条消息被禁止发送。",
      20016: "消息撤回超过了时间限制（默认2分钟）。",
      20018: "删除漫游内部错误。",
      90001: "JSON 格式解析失败，请检查请求包是否符合 JSON 规范。",
      90002: "".concat("JSON 格式请求包体", "中 MsgBody 不符合消息格式描述，或者 MsgBody 不是 Array 类型，请参考 TIMMsgElement 对象的定义(").concat(Fa, "269/2720").concat(Ka, ")。"),
      90003: "".concat("JSON 格式请求包体", "中缺少 To_Account 字段或者 To_Account 帐号不存在。"),
      90005: "".concat("JSON 格式请求包体", "中缺少 MsgRandom 字段或者 MsgRandom 字段不是 Integer 类型。"),
      90006: "".concat("JSON 格式请求包体", "中缺少 MsgTimeStamp 字段或者 MsgTimeStamp 字段不是 Integer 类型。"),
      90007: "".concat("JSON 格式请求包体", "中 MsgBody 类型不是 Array 类型，请将其修改为 Array 类型。"),
      90008: "".concat("JSON 格式请求包体", "中缺少 From_Account 字段或者 From_Account 帐号不存在。"),
      90009: "请求需要 App 管理员权限。",
      90010: "".concat("JSON 格式请求包体", "不符合消息格式描述，请参考 TIMMsgElement 对象的定义(").concat(Fa, "269/2720").concat(Ka, ")。"),
      90011: "批量发消息目标帐号超过500，请减少 To_Account 中目标帐号数量。",
      90012: "To_Account 没有注册或不存在，请确认 To_Account 是否导入即时通信 IM 或者是否拼写错误。",
      90026: "消息离线存储时间错误（最多不能超过7天）。",
      90031: "".concat("JSON 格式请求包体", "中 SyncOtherMachine 字段不是 Integer 类型。"),
      90044: "".concat("JSON 格式请求包体", "中 MsgLifeTime 字段不是 Integer 类型。"),
      90048: "请求的用户帐号不存在。",
      90054: "撤回请求中的 MsgKey 不合法。",
      90994: "".concat("服务端内部错误，请重试。"),
      90995: "".concat("服务端内部错误，请重试。"),
      91e3: "".concat("服务端内部错误，请重试。"),
      90992: "".concat("服务端内部错误，请重试。", "如果所有请求都返回该错误码，且 App 配置了第三方回调，请检查 App 服务端是否正常向即时通信 IM 后台服务端返回回调结果。"),
      93e3: "JSON 数据包超长，消息包体请不要超过8k。",
      91101: "Web 端长轮询被踢（Web 端同时在线实例个数超出限制）。",
      10002: "".concat("服务端内部错误，请重试。"),
      10003: "请求中的接口名称错误，请核对接口名称并重试。",
      10004: "参数非法，请根据错误描述检查请求是否正确。",
      10005: "请求包体中携带的帐号数量过多。",
      10006: "操作频率限制，请尝试降低调用的频率。",
      10007: "操作权限不足，例如 Work ".concat("群组", "中普通成员尝试执行踢人操作，但只有 App 管理员才有权限。"),
      10008: "请求非法，可能是请求中携带的签名信息验证不正确，请再次尝试。",
      10009: "该群不允许群主主动退出。",
      10010: "".concat("群组", "不存在，或者曾经存在过，但是目前已经被解散。"),
      10011: "解析 JSON 包体失败，请检查包体的格式是否符合 JSON 格式。",
      10012: "发起操作的 UserID 非法，请检查发起操作的用户 UserID 是否填写正确。",
      10013: "被邀请加入的用户已经是群成员。",
      10014: "群已满员，无法将请求中的用户加入".concat("群组", "，如果是批量加人，可以尝试减少加入用户的数量。"),
      10015: "找不到指定 ID 的".concat("群组", "。"),
      10016: "App 后台通过第三方回调拒绝本次操作。",
      10017: "因被禁言而不能发送消息，请检查发送者是否被设置禁言。",
      10018: "应答包长度超过最大包长（1MB），请求的内容过多，请尝试减少单次请求的数据量。",
      10019: "请求的用户帐号不存在。",
      10021: "".concat("群组", " ID 已被使用，请选择其他的").concat("群组", " ID。"),
      10023: "发消息的频率超限，请延长两次发消息时间的间隔。",
      10024: "此邀请或者申请请求已经被处理。",
      10025: "".concat("群组", " ID 已被使用，并且操作者为群主，可以直接使用。"),
      10026: "该 SDKAppID 请求的命令字已被禁用。",
      10030: "请求撤回的消息不存在。",
      10031: "消息撤回超过了时间限制（默认2分钟）。",
      10032: "请求撤回的消息不支持撤回操作。",
      10033: "".concat("群组", "类型不支持消息撤回操作。"),
      10034: "该消息类型不支持删除操作。",
      10035: "直播群和在线成员广播大群不支持删除消息。",
      10036: "直播群创建数量超过了限制，请参考价格说明(".concat(Fa, "269/11673)购买预付费套餐“IM直播群”。"),
      10037: "单个用户可创建和加入的".concat("群组", "数量超过了限制，请参考价格说明(").concat(Fa, "269/11673)购买或升级预付费套餐“单人可创建与加入").concat("群组", "数”。"),
      10038: "群成员数量超过限制，请参考价格说明(".concat(Fa, "269/11673)购买或升级预付费套餐“扩展群人数上限”。"),
      10041: "该应用（SDKAppID）已配置不支持群消息撤回。",
      10050: "群属性 key 不存在",
      10056: "请在写入群属性前先使用 getGroupAttributes 接口更新本地群属性，避免冲突。",
      10059: "非旗舰版",
      10060: "群人数超过已读回执人数上限",
      10061: "在线消息不支持已读回执",
      10062: "找不到群消息的已读回执信息",
      20026: "消息不存在",
      20029: "该群类型不支持修改消息。",
      30001: "请求参数错误，请根据错误描述检查请求参数",
      30002: "SDKAppID 不匹配",
      30003: "请求的用户帐号不存在",
      30004: "请求需要 App 管理员权限",
      30005: "关系链字段中包含敏感词",
      30006: "".concat("服务端内部错误，请重试。"),
      30007: "".concat("网络超时，请稍后重试. "),
      30008: "并发写导致写冲突，建议使用批量方式",
      30009: "后台禁止该用户发起加好友请求",
      30010: "自己的好友数已达系统上限",
      30011: "分组已达系统上限",
      30012: "未决数已达系统上限",
      30014: "对方的好友数已达系统上限",
      30515: "请求添加好友时，对方在自己的黑名单中，不允许加好友",
      30516: "请求添加好友时，对方的加好友验证方式是不允许任何人添加自己为好友",
      30525: "请求添加好友时，自己在对方的黑名单中，不允许加好友",
      30539: "等待对方同意",
      30540: "添加好友请求被安全策略打击，请勿频繁发起添加好友请求",
      31704: "与请求删除的帐号之间不存在好友关系",
      31707: "删除好友请求被安全策略打击，请勿频繁发起删除好友请求"
    },
    Ba = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this)).code = e.code, a.message = Ha[e.code] || e.message, a.data = e.data || {}, a;
      }
      return s(o);
    }(p(Error)),
    xa = null,
    Wa = function Wa(e) {
      xa = e;
    },
    Ya = function Ya(e) {
      return Promise.resolve(ba(e));
    },
    ja = function ja(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      if (e instanceof Ba) return t && null !== xa && xa.emit(S.ERROR, e), Promise.reject(e);
      if (e instanceof Error) {
        var o = new Ba({
          code: na.UNCAUGHT_ERROR,
          message: e.message
        });
        return t && null !== xa && xa.emit(S.ERROR, o), Promise.reject(o);
      }
      if (Ze(e) || Ze(e.code) || Ze(e.message)) we.error("IMPromise.reject 必须指定code(错误码)和message(错误信息)!!!");else {
        if ($e(e.code) && ze(e.message)) {
          var n = new Ba(e);
          return t && null !== xa && xa.emit(S.ERROR, n), Promise.reject(n);
        }
        we.error("IMPromise.reject code(错误码)必须为数字，message(错误信息)必须为字符串!!!");
      }
    },
    $a = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        return n(this, a), (t = o.call(this, e))._className = "C2CModule", t;
      }
      return s(a, [{
        key: "onNewC2CMessage",
        value: function value(e) {
          var t = e.dataList,
            o = e.isInstantMessage,
            n = e.C2CRemainingUnreadList,
            a = e.C2CPairUnreadList;
          we.debug("".concat(this._className, ".onNewC2CMessage count:").concat(t.length, " isInstantMessage:").concat(o));
          var s = this._newC2CMessageStoredAndSummary({
              dataList: t,
              C2CRemainingUnreadList: n,
              C2CPairUnreadList: a,
              isInstantMessage: o
            }),
            r = s.conversationOptionsList,
            i = s.messageList,
            c = s.isUnreadC2CMessage;
          (this.filterModifiedMessage(i), r.length > 0) && this.getModule(co).onNewMessage({
            conversationOptionsList: r,
            isInstantMessage: o,
            isUnreadC2CMessage: c
          });
          var u = this.filterUnmodifiedMessage(i);
          o && u.length > 0 && this.emitOuterEvent(S.MESSAGE_RECEIVED, u), i.length = 0;
        }
      }, {
        key: "_newC2CMessageStoredAndSummary",
        value: function value(e) {
          for (var t = e.dataList, o = e.C2CRemainingUnreadList, n = e.C2CPairUnreadList, a = e.isInstantMessage, s = null, r = [], i = [], c = {}, u = this.getModule(_o), l = this.getModule(Co), d = !1, p = 0, g = t.length; p < g; p++) {
            var _ = t[p];
            _.currentUser = this.getMyUserID(), _.conversationType = D.CONV_C2C, _.isSystemMessage = !!_.isSystemMessage, (Ze(_.nick) || Ze(_.avatar)) && (d = !0, we.debug("".concat(this._className, "._newC2CMessageStoredAndSummary nick or avatar missing!"))), s = new wa(_), _.elements = u.parseElements(_.elements, _.from), s.setElement(_.elements), s.setNickAndAvatar({
              nick: _.nick,
              avatar: _.avatar
            });
            var h = s.conversationID;
            if (a) {
              var f = !1,
                m = this.getModule(co);
              if (s.from !== this.getMyUserID()) {
                var M = m.getLatestMessageSentByPeer(h);
                if (M) {
                  var v = M.nick,
                    y = M.avatar;
                  d ? s.setNickAndAvatar({
                    nick: v,
                    avatar: y
                  }) : v === s.nick && y === s.avatar || (f = !0);
                }
              } else {
                var I = m.getLatestMessageSentByMe(h);
                if (I) {
                  var E = I.nick,
                    T = I.avatar;
                  E === s.nick && T === s.avatar || m.modifyMessageSentByMe({
                    conversationID: h,
                    latestNick: s.nick,
                    latestAvatar: s.avatar
                  });
                }
              }
              var C = 1 === t[p].isModified;
              if (m.isMessageSentByCurrentInstance(s) ? s.isModified = C : C = !1, 0 === _.msgLifeTime) s._onlineOnlyFlag = !0, i.push(s);else {
                if (!m.pushIntoMessageList(i, s, C)) continue;
                f && (m.modifyMessageSentByPeer({
                  conversationID: h,
                  latestNick: s.nick,
                  latestAvatar: s.avatar
                }), m.updateUserProfileSpecifiedKey({
                  conversationID: h,
                  nick: s.nick,
                  avatar: s.avatar
                }));
              }
              a && s.clientTime > 0 && l.addMessageDelay(s.clientTime);
            }
            if (0 !== _.msgLifeTime) {
              if (!1 === s._onlineOnlyFlag) if (Ze(c[h])) {
                var S = 0;
                "in" === s.flow && (s._isExcludedFromUnreadCount || (S = 1)), c[h] = r.push({
                  conversationID: h,
                  unreadCount: S,
                  type: s.conversationType,
                  subType: s.conversationSubType,
                  lastMessage: s._isExcludedFromLastMessage ? "" : s
                }) - 1;
              } else {
                var N = c[h];
                r[N].type = s.conversationType, r[N].subType = s.conversationSubType, r[N].lastMessage = s._isExcludedFromLastMessage ? "" : s, "in" === s.flow && (s._isExcludedFromUnreadCount || r[N].unreadCount++);
              }
            } else s._onlineOnlyFlag = !0;
          }
          var A = !1;
          if (Qe(n)) for (var O = function O(e, t) {
              if (n[e].unreadCount > 0) {
                A = !0;
                var o = r.find(function (t) {
                  return t.conversationID === "C2C".concat(n[e].from);
                });
                o ? o.unreadCount = n[e].unreadCount : r.push({
                  conversationID: "C2C".concat(n[e].from),
                  unreadCount: n[e].unreadCount,
                  type: D.CONV_C2C
                });
              }
            }, R = 0, L = n.length; R < L; R++) {
            O(R);
          }
          if (Qe(o)) for (var k = function k(e, t) {
              r.find(function (t) {
                return t.conversationID === "C2C".concat(o[e].from);
              }) || r.push({
                conversationID: "C2C".concat(o[e].from),
                type: D.CONV_C2C,
                lastMsgTime: o[e].lastMsgTime
              });
            }, G = 0, P = o.length; G < P; G++) {
            k(G);
          }
          return {
            conversationOptionsList: r,
            messageList: i,
            isUnreadC2CMessage: A
          };
        }
      }, {
        key: "onC2CMessageRevoked",
        value: function value(e) {
          var t = this;
          we.debug("".concat(this._className, ".onC2CMessageRevoked count:").concat(e.dataList.length));
          var o = this.getModule(co),
            n = [],
            a = null;
          e.dataList.forEach(function (e) {
            if (e.c2cMessageRevokedNotify) {
              var s = e.c2cMessageRevokedNotify.revokedInfos;
              Ze(s) || s.forEach(function (e) {
                var s = t.getMyUserID() === e.from ? "".concat(D.CONV_C2C).concat(e.to) : "".concat(D.CONV_C2C).concat(e.from);
                (a = o.revoke(s, e.sequence, e.random)) && n.push(a);
              });
            }
          }), 0 !== n.length && (o.onMessageRevoked(n), this.emitOuterEvent(S.MESSAGE_REVOKED, n));
        }
      }, {
        key: "onC2CMessageReadReceipt",
        value: function value(e) {
          var t = this;
          e.dataList.forEach(function (e) {
            if (!Vt(e.c2cMessageReadReceipt)) {
              var o = e.c2cMessageReadReceipt.to;
              e.c2cMessageReadReceipt.uinPairReadArray.forEach(function (e) {
                var n = e.peerReadTime;
                we.debug("".concat(t._className, "._onC2CMessageReadReceipt to:").concat(o, " peerReadTime:").concat(n));
                var a = "".concat(D.CONV_C2C).concat(o),
                  s = t.getModule(co);
                s.recordPeerReadTime(a, n), s.updateMessageIsPeerReadProperty(a, n);
              });
            }
          });
        }
      }, {
        key: "onC2CMessageReadNotice",
        value: function value(e) {
          var t = this;
          e.dataList.forEach(function (e) {
            if (!Vt(e.c2cMessageReadNotice)) {
              var o = t.getModule(co);
              e.c2cMessageReadNotice.uinPairReadArray.forEach(function (e) {
                var n = e.from,
                  a = e.peerReadTime;
                we.debug("".concat(t._className, ".onC2CMessageReadNotice from:").concat(n, " lastReadTime:").concat(a));
                var s = "".concat(D.CONV_C2C).concat(n);
                o.updateIsReadAfterReadReport({
                  conversationID: s,
                  lastMessageTime: a
                }), o.updateUnreadCount(s);
              });
            }
          });
        }
      }, {
        key: "onC2CMessageModified",
        value: function value(e) {
          we.debug("".concat(this._className, ".onC2CMessageModified options:"), JSON.stringify(e));
          var o = this.getModule(co);
          e.dataList.forEach(function (e) {
            o.onMessageModified(t(t({}, e), {}, {
              conversationType: D.CONV_C2C
            }));
          });
        }
      }, {
        key: "onReadReceiptList",
        value: function value(e) {
          we.debug("".concat(this._className, ".onReadReceiptList options:"), JSON.stringify(e));
          var t = e.dataList,
            o = t.userID,
            n = t.readReceiptList;
          this.getModule(co).updateReadReceiptInfo({
            userID: o,
            readReceiptList: n
          });
        }
      }, {
        key: "sendMessage",
        value: function value(e, t) {
          var o = this._createC2CMessagePack(e, t);
          return this.request(o);
        }
      }, {
        key: "_createC2CMessagePack",
        value: function value(e, t) {
          var o = null;
          t && (t.offlinePushInfo && (o = t.offlinePushInfo), !0 === t.onlineUserOnly && (o ? o.disablePush = !0 : o = {
            disablePush: !0
          }));
          var n = "";
          ze(e.cloudCustomData) && e.cloudCustomData.length > 0 && (n = e.cloudCustomData);
          var a = [];
          if (Xe(t) && Xe(t.messageControlInfo)) {
            var s = t.messageControlInfo,
              r = s.excludedFromUnreadCount,
              i = s.excludedFromLastMessage;
            !0 === r && a.push("NoUnread"), !0 === i && a.push("NoLastMsg");
          }
          return {
            protocolName: Go,
            tjgID: this.generateTjgID(e),
            requestData: {
              fromAccount: this.getMyUserID(),
              toAccount: e.to,
              msgBody: e.getElements(),
              cloudCustomData: n,
              msgSeq: e.sequence,
              msgRandom: e.random,
              msgLifeTime: this.isOnlineMessage(e, t) ? 0 : void 0,
              nick: e.nick,
              avatar: e.avatar,
              offlinePushInfo: o ? {
                pushFlag: !0 === o.disablePush ? 1 : 0,
                title: o.title || "",
                desc: o.description || "",
                ext: o.extension || "",
                apnsInfo: {
                  badgeMode: !0 === o.ignoreIOSBadge ? 1 : 0
                },
                androidInfo: {
                  OPPOChannelID: o.androidOPPOChannelID || ""
                }
              } : void 0,
              messageControlInfo: a,
              clientTime: e.clientTime,
              needReadReceipt: !0 === e.needReadReceipt ? 1 : 0
            }
          };
        }
      }, {
        key: "isOnlineMessage",
        value: function value(e, t) {
          return !(!t || !0 !== t.onlineUserOnly);
        }
      }, {
        key: "revokeMessage",
        value: function value(e) {
          return this.request({
            protocolName: Vo,
            requestData: {
              msgInfo: {
                fromAccount: e.from,
                toAccount: e.to,
                msgSeq: e.sequence,
                msgRandom: e.random,
                msgTimeStamp: e.time
              }
            }
          });
        }
      }, {
        key: "deleteMessage",
        value: function value(e) {
          var t = e.to,
            o = e.keyList;
          return we.log("".concat(this._className, ".deleteMessage toAccount:").concat(t, " count:").concat(o.length)), this.request({
            protocolName: Yo,
            requestData: {
              fromAccount: this.getMyUserID(),
              to: t,
              keyList: o
            }
          });
        }
      }, {
        key: "modifyRemoteMessage",
        value: function value(e) {
          var t = e.from,
            o = e.to,
            n = e.version,
            a = void 0 === n ? 0 : n,
            s = e.sequence,
            r = e.random,
            i = e.time,
            c = e.payload,
            u = e.type,
            l = e.cloudCustomData;
          return this.request({
            protocolName: jo,
            requestData: {
              from: t,
              to: o,
              version: a,
              sequence: s,
              random: r,
              time: i,
              elements: [{
                type: u,
                content: c
              }],
              cloudCustomData: l
            }
          });
        }
      }, {
        key: "setMessageRead",
        value: function value(e) {
          var t = this,
            o = e.conversationID,
            n = e.lastMessageTime,
            a = "".concat(this._className, ".setMessageRead");
          we.log("".concat(a, " conversationID:").concat(o, " lastMessageTime:").concat(n)), $e(n) || we.warn("".concat(a, " 请勿修改 Conversation.lastMessage.lastTime，否则可能会导致已读上报结果不准确"));
          var s = new va(ya.SET_C2C_MESSAGE_READ);
          return s.setMessage("conversationID:".concat(o, " lastMessageTime:").concat(n)), this.request({
            protocolName: Ko,
            requestData: {
              C2CMsgReaded: {
                cookie: "",
                C2CMsgReadedItem: [{
                  toAccount: o.replace("C2C", ""),
                  lastMessageTime: n,
                  receipt: 1
                }]
              }
            }
          }).then(function () {
            s.setNetworkType(t.getNetworkType()).end(), we.log("".concat(a, " ok"));
            var e = t.getModule(co);
            return e.updateIsReadAfterReadReport({
              conversationID: o,
              lastMessageTime: n
            }), e.updateUnreadCount(o), ba();
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.log("".concat(a, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getRoamingMessage",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getRoamingMessage"),
            n = e.peerAccount,
            a = e.conversationID,
            s = e.count,
            r = e.lastMessageTime,
            i = e.messageKey,
            c = "peerAccount:".concat(n, " count:").concat(s || 15, " lastMessageTime:").concat(r || 0, " messageKey:").concat(i);
          we.log("".concat(o, " ").concat(c));
          var u = new va(ya.GET_C2C_ROAMING_MESSAGES);
          return this.request({
            protocolName: xo,
            requestData: {
              peerAccount: n,
              count: s || 15,
              lastMessageTime: r || 0,
              messageKey: i
            }
          }).then(function (e) {
            var n = e.data,
              s = n.complete,
              r = n.messageList,
              i = n.messageKey,
              l = n.lastMessageTime;
            Ze(r) ? we.log("".concat(o, " ok. complete:").concat(s, " but messageList is undefined!")) : we.log("".concat(o, " ok. complete:").concat(s, " count:").concat(r.length)), u.setNetworkType(t.getNetworkType()).setMessage("".concat(c, " complete:").concat(s, " length:").concat(r.length)).end();
            var d = t.getModule(co);
            1 === s && d.setCompleted(a);
            var p = d.onRoamingMessage(r, a);
            d.modifyMessageList(a), d.updateIsRead(a), d.updateRoamingMessageKeyAndTime(a, i, l);
            var g = d.getPeerReadTime(a);
            if (we.log("".concat(o, " update isPeerRead property. conversationID:").concat(a, " peerReadTime:").concat(g)), g) d.updateMessageIsPeerReadProperty(a, g);else {
              var _ = a.replace(D.CONV_C2C, "");
              t.getRemotePeerReadTime([_]).then(function () {
                d.updateMessageIsPeerReadProperty(a, d.getPeerReadTime(a));
              });
            }
            var h = "";
            if (p.length > 0) h = p[0].ID;else {
              var f = d.getLocalOldestMessage(a);
              f && (h = f.ID);
            }
            return we.log("".concat(o, " nextReqID:").concat(h, " stored message count:").concat(p.length)), {
              nextReqID: h,
              storedMessageList: p
            };
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              u.setMessage(c).setError(e, n, a).end();
            }), we.warn("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getRoamingMessagesHopping",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getRoamingMessagesHopping"),
            n = e.peerAccount,
            a = e.time,
            s = void 0 === a ? 0 : a,
            r = e.count,
            i = e.direction,
            c = "peerAccount:".concat(n, " count:").concat(r, " time:").concat(s, " direction:").concat(i);
          we.log("".concat(o, " ").concat(c));
          var u = new va(ya.GET_C2C_ROAMING_MESSAGES_HOPPING);
          return this.request({
            protocolName: xo,
            requestData: {
              peerAccount: n,
              count: r,
              lastMessageTime: s,
              direction: i
            }
          }).then(function (e) {
            var a = e.data,
              s = a.complete,
              r = a.messageList,
              i = void 0 === r ? [] : r;
            we.log("".concat(o, " ok. complete:").concat(s, " count:").concat(i.length)), u.setNetworkType(t.getNetworkType()).setMessage("".concat(c, " complete:").concat(s, " length:").concat(i.length)).end();
            var l = "".concat(D.CONV_C2C).concat(n),
              d = t.getModule(co).onRoamingMessage(i, l, !1);
            return t._modifyMessageList(l, d), d;
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              u.setMessage(c).setError(e, n, a).end();
            }), we.warn("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_modifyMessageList",
        value: function value(e, t) {
          var o = this.getModule(co).getLocalConversation(e);
          if (o) for (var n = o.userProfile.nick, a = o.userProfile.avatar, s = this.getModule(oo).getNickAndAvatarByUserID(this.getMyUserID()), r = s.nick, i = s.avatar, c = t.length - 1; c >= 0; c--) {
            var u = t[c];
            "in" === u.flow && (u.nick !== n && u.setNickAndAvatar({
              nick: n
            }), u.avatar !== a && u.setNickAndAvatar({
              avatar: a
            })), "out" === u.flow && (u.nick !== r && u.setNickAndAvatar({
              nick: r
            }), u.avatar !== i && u.setNickAndAvatar({
              avatar: i
            }));
          }
        }
      }, {
        key: "getRemotePeerReadTime",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getRemotePeerReadTime");
          if (Vt(e)) return we.warn("".concat(o, " userIDList is empty!")), Promise.resolve();
          var n = new va(ya.GET_PEER_READ_TIME);
          return we.log("".concat(o, " userIDList:").concat(e)), this.request({
            protocolName: Wo,
            requestData: {
              userIDList: e
            }
          }).then(function (a) {
            var s = a.data.peerReadTimeList;
            we.log("".concat(o, " ok. peerReadTimeList:").concat(s));
            for (var r = "", i = t.getModule(co), c = 0; c < e.length; c++) {
              r += "".concat(e[c], "-").concat(s[c], " "), s[c] > 0 && i.recordPeerReadTime("C2C".concat(e[c]), s[c]);
            }
            n.setNetworkType(t.getNetworkType()).setMessage(r).end();
          }).catch(function (e) {
            t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.warn("".concat(o, " failed. error:"), e);
          });
        }
      }, {
        key: "sendReadReceipt",
        value: function value(e) {
          var t = this,
            o = e[0].conversationID.replace(D.CONV_C2C, ""),
            n = new va(ya.SEND_C2C_READ_RECEIPT);
          n.setMessage("peerAccount:".concat(o));
          var a = this.getMyUserID(),
            s = e.filter(function (e) {
              return e.from !== a && !0 === e.needReadReceipt;
            }).map(function (e) {
              return {
                fromAccount: e.from,
                toAccount: e.to,
                sequence: e.sequence,
                random: e.random,
                time: e.time,
                clientTime: e.clientTime
              };
            });
          if (0 === s.length) return ja({
            code: na.READ_RECEIPT_MESSAGE_LIST_EMPTY,
            message: aa.READ_RECEIPT_MESSAGE_LIST_EMPTY
          });
          var r = "".concat(this._className, ".sendReadReceipt");
          return we.log("".concat(r, ". peerAccount:").concat(o, " messageInfoList length:").concat(s.length)), this.request({
            protocolName: Mn,
            requestData: {
              peerAccount: o,
              messageInfoList: s
            }
          }).then(function (e) {
            return n.end(), we.log("".concat(r, " ok")), ba();
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.warn("".concat(r, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getReadReceiptList",
        value: function value(e) {
          var t = "".concat(this._className, ".getReadReceiptList"),
            o = this.getMyUserID(),
            n = e.filter(function (e) {
              return e.from === o && !0 === e.needReadReceipt;
            });
          return we.log("".concat(t, " userID:").concat(o, " messageList length:").concat(n.length)), Ya({
            messageList: n
          });
        }
      }]), a;
    }(Do),
    za = function () {
      function e() {
        n(this, e), this.list = new Map(), this._className = "MessageListHandler", this._latestMessageSentByPeerMap = new Map(), this._latestMessageSentByMeMap = new Map(), this._groupLocalLastMessageSequenceMap = new Map();
      }
      return s(e, [{
        key: "getLocalOldestMessageByConversationID",
        value: function value(e) {
          if (!e) return null;
          if (!this.list.has(e)) return null;
          var t = this.list.get(e).values();
          return t ? t.next().value : null;
        }
      }, {
        key: "pushIn",
        value: function value(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            o = e.conversationID,
            n = !0;
          this.list.has(o) || this.list.set(o, new Map());
          var a = this._getUniqueIDOfMessage(e),
            s = this.list.get(o).has(a);
          if (s) {
            var r = this.list.get(o).get(a);
            if (!t || !0 === r.isModified) return n = !1;
          }
          return this.list.get(o).set(a, e), this._setLatestMessageSentByPeer(o, e), this._setLatestMessageSentByMe(o, e), this._setGroupLocalLastMessageSequence(o, e), n;
        }
      }, {
        key: "unshift",
        value: function value(e, t) {
          var o;
          if (Qe(e)) {
            if (e.length > 0) {
              o = e[0].conversationID;
              var n = e.length;
              this._unshiftMultipleMessages(e, t), this._setGroupLocalLastMessageSequence(o, e[n - 1]);
            }
          } else o = e.conversationID, this._unshiftSingleMessage(e, t), this._setGroupLocalLastMessageSequence(o, e);
          if (o && o.startsWith(D.CONV_C2C)) {
            var a = Array.from(this.list.get(o).values()),
              s = a.length;
            if (0 === s) return;
            for (var r = s - 1; r >= 0; r--) {
              if ("out" === a[r].flow) {
                this._setLatestMessageSentByMe(o, a[r]);
                break;
              }
            }
            for (var i = s - 1; i >= 0; i--) {
              if ("in" === a[i].flow) {
                this._setLatestMessageSentByPeer(o, a[i]);
                break;
              }
            }
          }
        }
      }, {
        key: "_unshiftSingleMessage",
        value: function value(e, t) {
          var o = e.conversationID,
            n = this._getUniqueIDOfMessage(e);
          if (!this.list.has(o)) return this.list.set(o, new Map()), this.list.get(o).set(n, e), void t.push(e);
          var a = this.list.get(o),
            s = Array.from(a);
          a.has(n) || (s.unshift([n, e]), this.list.set(o, new Map(s)), t.push(e));
        }
      }, {
        key: "_unshiftMultipleMessages",
        value: function value(e, t) {
          for (var o = e.length, n = [], a = e[0].conversationID, s = this.list.get(a), r = this.list.has(a) ? Array.from(s) : [], i = 0; i < o; i++) {
            var c = this._getUniqueIDOfMessage(e[i]);
            s && s.has(c) || (n.push([c, e[i]]), t.push(e[i]));
          }
          this.list.set(a, new Map(n.concat(r)));
        }
      }, {
        key: "remove",
        value: function value(e) {
          var t = e.conversationID,
            o = this._getUniqueIDOfMessage(e);
          this.list.has(t) && this.list.get(t).delete(o);
        }
      }, {
        key: "revoke",
        value: function value(e, t, o) {
          if (we.debug("revoke message", e, t, o), this.list.has(e)) {
            var n,
              a = C(this.list.get(e));
            try {
              for (a.s(); !(n = a.n()).done;) {
                var s = m(n.value, 2)[1];
                if (s.sequence === t && !s.isRevoked && (Ze(o) || s.random === o)) return s.isRevoked = !0, s;
              }
            } catch (r) {
              a.e(r);
            } finally {
              a.f();
            }
          }
          return null;
        }
      }, {
        key: "removeByConversationID",
        value: function value(e) {
          this.list.has(e) && (this.list.delete(e), this._latestMessageSentByPeerMap.delete(e), this._latestMessageSentByMeMap.delete(e));
        }
      }, {
        key: "findMessage",
        value: function value(e) {
          var t,
            o = null,
            n = C(this.list);
          try {
            for (n.s(); !(t = n.n()).done;) {
              for (var a = M(m(t.value, 2)[1].values()), s = a.length, r = 0; r < s; r++) {
                if (a[r].ID === e) {
                  o = a[r];
                  break;
                }
              }
            }
          } catch (i) {
            n.e(i);
          } finally {
            n.f();
          }
          return o;
        }
      }, {
        key: "updateMessageIsPeerReadProperty",
        value: function value(e, t) {
          var o = [];
          if (this.list.has(e)) {
            var n,
              a = C(this.list.get(e));
            try {
              for (a.s(); !(n = a.n()).done;) {
                var s = m(n.value, 2)[1];
                s.time <= t && !s.isPeerRead && "out" === s.flow && (s.isPeerRead = !0, o.push(s));
              }
            } catch (r) {
              a.e(r);
            } finally {
              a.f();
            }
            we.log("".concat(this._className, ".updateMessageIsPeerReadProperty conversationID:").concat(e, " peerReadTime:").concat(t, " count:").concat(o.length));
          }
          return o;
        }
      }, {
        key: "updateMessageIsModifiedProperty",
        value: function value(e) {
          var t = e.conversationID;
          if (this.list.has(t)) {
            var o = this._getUniqueIDOfMessage(e),
              n = this.list.get(t).get(o);
            n && (n.isModified = !0);
          }
        }
      }, {
        key: "hasLocalMessageList",
        value: function value(e) {
          return this.list.has(e);
        }
      }, {
        key: "getLocalMessageList",
        value: function value(e) {
          return this.hasLocalMessageList(e) ? M(this.list.get(e).values()) : [];
        }
      }, {
        key: "hasLocalMessage",
        value: function value(e, t) {
          for (var o = !1, n = this.getLocalMessageList(e), a = n.length, s = 0; s < a; s++) {
            n[s].ID === t && (o = !0);
          }
          return o;
        }
      }, {
        key: "getLocalMessage",
        value: function value(e, t) {
          for (var o = null, n = this.getLocalMessageList(e), a = n.length, s = 0; s < a; s++) {
            if (n[s].ID === t) {
              o = n[s];
              break;
            }
          }
          return o;
        }
      }, {
        key: "getLocalLastMessage",
        value: function value(e) {
          var t = this.getLocalMessageList(e);
          return t[t.length - 1];
        }
      }, {
        key: "getLocalOldestMessage",
        value: function value(e) {
          return this.getLocalMessageList(e)[0];
        }
      }, {
        key: "_setLatestMessageSentByPeer",
        value: function value(e, t) {
          e.startsWith(D.CONV_C2C) && "in" === t.flow && this._latestMessageSentByPeerMap.set(e, t);
        }
      }, {
        key: "_setLatestMessageSentByMe",
        value: function value(e, t) {
          e.startsWith(D.CONV_C2C) && "out" === t.flow && this._latestMessageSentByMeMap.set(e, t);
        }
      }, {
        key: "_setGroupLocalLastMessageSequence",
        value: function value(e, t) {
          e.startsWith(D.CONV_GROUP) && this._groupLocalLastMessageSequenceMap.set(e, t.sequence);
        }
      }, {
        key: "getLatestMessageSentByPeer",
        value: function value(e) {
          return this._latestMessageSentByPeerMap.get(e);
        }
      }, {
        key: "getLatestMessageSentByMe",
        value: function value(e) {
          return this._latestMessageSentByMeMap.get(e);
        }
      }, {
        key: "getGroupLocalLastMessageSequence",
        value: function value(e) {
          return this._groupLocalLastMessageSequenceMap.get(e) || 0;
        }
      }, {
        key: "modifyMessageSentByPeer",
        value: function value(e) {
          var t = e.conversationID,
            o = e.latestNick,
            n = e.latestAvatar,
            a = this.list.get(t);
          if (!Vt(a)) {
            var s = Array.from(a.values()),
              r = s.length;
            if (0 !== r) {
              for (var i = null, c = 0, u = !1, l = r - 1; l >= 0; l--) {
                "in" === s[l].flow && ((i = s[l]).nick !== o && (i.setNickAndAvatar({
                  nick: o
                }), u = !0), i.avatar !== n && (i.setNickAndAvatar({
                  avatar: n
                }), u = !0), u && (c += 1));
              }
              we.log("".concat(this._className, ".modifyMessageSentByPeer conversationID:").concat(t, " count:").concat(c));
            }
          }
        }
      }, {
        key: "modifyMessageSentByMe",
        value: function value(e) {
          var t = e.conversationID,
            o = e.latestNick,
            n = e.latestAvatar,
            a = this.list.get(t);
          if (!Vt(a)) {
            var s = Array.from(a.values()),
              r = s.length;
            if (0 !== r) {
              for (var i = null, c = 0, u = !1, l = r - 1; l >= 0; l--) {
                "out" === s[l].flow && ((i = s[l]).nick !== o && (i.setNickAndAvatar({
                  nick: o
                }), u = !0), i.avatar !== n && (i.setNickAndAvatar({
                  avatar: n
                }), u = !0), u && (c += 1));
              }
              we.log("".concat(this._className, ".modifyMessageSentByMe conversationID:").concat(t, " count:").concat(c));
            }
          }
        }
      }, {
        key: "getLocalMessageListHopping",
        value: function value(e) {
          var t = e.conversationID,
            o = e.sequence,
            n = e.time,
            a = e.count,
            s = e.direction,
            r = this.getLocalMessageList(t),
            i = -1;
          if (t.startsWith(D.CONV_C2C) ? i = r.findIndex(function (e) {
            return e.time === n;
          }) : t.startsWith(D.CONV_GROUP) && (i = r.findIndex(function (e) {
            return e.sequence === o;
          })), -1 === i) return [];
          var c = i + 1,
            u = c > a ? c - a : 0;
          return 1 === s && (u = i, c = i + a), r.slice(u, c);
        }
      }, {
        key: "getConversationIDList",
        value: function value(e) {
          return M(this.list.keys()).filter(function (t) {
            return t.startsWith(e);
          });
        }
      }, {
        key: "traversal",
        value: function value() {
          if (0 !== this.list.size && -1 === we.getLevel()) {
            console.group("conversationID-messageCount");
            var e,
              t = C(this.list);
            try {
              for (t.s(); !(e = t.n()).done;) {
                var o = m(e.value, 2),
                  n = o[0],
                  a = o[1];
                console.log("".concat(n, "-").concat(a.size));
              }
            } catch (s) {
              t.e(s);
            } finally {
              t.f();
            }
            console.groupEnd();
          }
        }
      }, {
        key: "onMessageModified",
        value: function value(e, t) {
          if (!this.list.has(e)) return {
            isUpdated: !1,
            message: null
          };
          var o = this._getUniqueIDOfMessage(t),
            n = this.list.get(e).has(o);
          if (we.debug("".concat(this._className, ".onMessageModified conversationID:").concat(e, " uniqueID:").concat(o, " has:").concat(n)), n) {
            var a = this.list.get(e).get(o),
              s = t.messageVersion,
              r = t.elements,
              i = t.cloudCustomData;
            return a.version < s ? (a.version = s, a._elements = JSON.parse(JSON.stringify(r)), a.payload = JSON.parse(JSON.stringify(r[0].content)), a.type = r[0].type, a.cloudCustomData = i, a.isModified = !0, {
              isUpdated: !0,
              message: a
            }) : {
              isUpdated: !1,
              message: a
            };
          }
          return {
            isUpdated: !1,
            message: null
          };
        }
      }, {
        key: "_getUniqueIDOfMessage",
        value: function value(e) {
          var t = e.from,
            o = e.to,
            n = e.random,
            a = e.sequence,
            s = e.time;
          return "".concat(t, "-").concat(o, "-").concat(n, "-").concat(a, "-").concat(s);
        }
      }, {
        key: "reset",
        value: function value() {
          this.list.clear(), this._latestMessageSentByPeerMap.clear(), this._latestMessageSentByMeMap.clear(), this._groupLocalLastMessageSequenceMap.clear();
        }
      }]), e;
    }(),
    Ja = "_a2KeyAndTinyIDUpdated",
    Xa = "_cloudConfigUpdated",
    Qa = "_profileUpdated";
  function Za(e) {
    this.mixin(e);
  }
  Za.mixin = function (e) {
    var t = e.prototype || e;
    t._isReady = !1, t.ready = function (e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      if (e) return this._isReady ? void (t ? e.call(this) : setTimeout(e, 1)) : (this._readyQueue = this._readyQueue || [], void this._readyQueue.push(e));
    }, t.triggerReady = function () {
      var e = this;
      this._isReady = !0, setTimeout(function () {
        var t = e._readyQueue;
        e._readyQueue = [], t && t.length > 0 && t.forEach(function (e) {
          e.call(this);
        }, e);
      }, 1);
    }, t.resetReady = function () {
      this._isReady = !1, this._readyQueue = [];
    }, t.isReady = function () {
      return this._isReady;
    };
  };
  var es = ["jpg", "jpeg", "gif", "png", "bmp", "image", "webp"],
    ts = ["mp4"],
    os = 1,
    ns = 2,
    as = 3,
    ss = 255,
    rs = function () {
      function e(t) {
        var o = this;
        n(this, e), Vt(t) || (this.userID = t.userID || "", this.nick = t.nick || "", this.gender = t.gender || "", this.birthday = t.birthday || 0, this.location = t.location || "", this.selfSignature = t.selfSignature || "", this.allowType = t.allowType || D.ALLOW_TYPE_ALLOW_ANY, this.language = t.language || 0, this.avatar = t.avatar || "", this.messageSettings = t.messageSettings || 0, this.adminForbidType = t.adminForbidType || D.FORBID_TYPE_NONE, this.level = t.level || 0, this.role = t.role || 0, this.lastUpdatedTime = 0, this.profileCustomField = [], Vt(t.profileCustomField) || t.profileCustomField.forEach(function (e) {
          o.profileCustomField.push({
            key: e.key,
            value: e.value
          });
        }));
      }
      return s(e, [{
        key: "validate",
        value: function value(e) {
          var t = !0,
            o = "";
          if (Vt(e)) return {
            valid: !1,
            tips: "empty options"
          };
          if (e.profileCustomField) for (var n = e.profileCustomField.length, a = null, s = 0; s < n; s++) {
            if (a = e.profileCustomField[s], !ze(a.key) || -1 === a.key.indexOf("Tag_Profile_Custom")) return {
              valid: !1,
              tips: "自定义资料字段的前缀必须是 Tag_Profile_Custom"
            };
            if (!ze(a.value)) return {
              valid: !1,
              tips: "自定义资料字段的 value 必须是字符串"
            };
          }
          for (var r in e) {
            if (Object.prototype.hasOwnProperty.call(e, r)) {
              if ("profileCustomField" === r) continue;
              if (Vt(e[r]) && !ze(e[r]) && !$e(e[r])) {
                o = "key:" + r + ", invalid value:" + e[r], t = !1;
                continue;
              }
              switch (r) {
                case "nick":
                  ze(e[r]) || (o = "nick should be a string", t = !1), lt(e[r]) > 500 && (o = "nick name limited: must less than or equal to ".concat(500, " bytes, current size: ").concat(lt(e[r]), " bytes"), t = !1);
                  break;
                case "gender":
                  _t(qe, e.gender) || (o = "key:gender, invalid value:" + e.gender, t = !1);
                  break;
                case "birthday":
                  $e(e.birthday) || (o = "birthday should be a number", t = !1);
                  break;
                case "location":
                  ze(e.location) || (o = "location should be a string", t = !1);
                  break;
                case "selfSignature":
                  ze(e.selfSignature) || (o = "selfSignature should be a string", t = !1);
                  break;
                case "allowType":
                  _t(Ke, e.allowType) || (o = "key:allowType, invalid value:" + e.allowType, t = !1);
                  break;
                case "language":
                  $e(e.language) || (o = "language should be a number", t = !1);
                  break;
                case "avatar":
                  ze(e.avatar) || (o = "avatar should be a string", t = !1);
                  break;
                case "messageSettings":
                  0 !== e.messageSettings && 1 !== e.messageSettings && (o = "messageSettings should be 0 or 1", t = !1);
                  break;
                case "adminForbidType":
                  _t(Ve, e.adminForbidType) || (o = "key:adminForbidType, invalid value:" + e.adminForbidType, t = !1);
                  break;
                case "level":
                  $e(e.level) || (o = "level should be a number", t = !1);
                  break;
                case "role":
                  $e(e.role) || (o = "role should be a number", t = !1);
                  break;
                default:
                  o = "unknown key:" + r + "  " + e[r], t = !1;
              }
            }
          }
          return {
            valid: t,
            tips: o
          };
        }
      }]), e;
    }(),
    is = s(function e(t) {
      n(this, e), this.value = t, this.next = null;
    }),
    cs = function () {
      function e(t) {
        n(this, e), this.MAX_LENGTH = t, this.pTail = null, this.pNodeToDel = null, this.map = new Map(), we.debug("SinglyLinkedList init MAX_LENGTH:".concat(this.MAX_LENGTH));
      }
      return s(e, [{
        key: "set",
        value: function value(e) {
          var t = new is(e);
          if (this.map.size < this.MAX_LENGTH) null === this.pTail ? (this.pTail = t, this.pNodeToDel = t) : (this.pTail.next = t, this.pTail = t), this.map.set(e, 1);else {
            var o = this.pNodeToDel;
            this.pNodeToDel = this.pNodeToDel.next, this.map.delete(o.value), o.next = null, o = null, this.pTail.next = t, this.pTail = t, this.map.set(e, 1);
          }
        }
      }, {
        key: "has",
        value: function value(e) {
          return this.map.has(e);
        }
      }, {
        key: "delete",
        value: function value(e) {
          this.has(e) && this.map.delete(e);
        }
      }, {
        key: "tail",
        value: function value() {
          return this.pTail;
        }
      }, {
        key: "size",
        value: function value() {
          return this.map.size;
        }
      }, {
        key: "data",
        value: function value() {
          return Array.from(this.map.keys());
        }
      }, {
        key: "reset",
        value: function value() {
          for (var e; null !== this.pNodeToDel;) {
            e = this.pNodeToDel, this.pNodeToDel = this.pNodeToDel.next, e.next = null, e = null;
          }
          this.pTail = null, this.map.clear();
        }
      }]), e;
    }(),
    us = ["groupID", "name", "avatar", "type", "introduction", "notification", "ownerID", "selfInfo", "createTime", "infoSequence", "lastInfoTime", "lastMessage", "nextMessageSeq", "memberNum", "maxMemberNum", "memberList", "joinOption", "groupCustomField", "muteAllMembers", "isSupportTopic"],
    ls = function () {
      function e(t) {
        n(this, e), this.groupID = "", this.name = "", this.avatar = "", this.type = "", this.introduction = "", this.notification = "", this.ownerID = "", this.createTime = "", this.infoSequence = "", this.lastInfoTime = "", this.selfInfo = {
          messageRemindType: "",
          joinTime: "",
          nameCard: "",
          role: "",
          userID: "",
          memberCustomField: void 0,
          readedSequence: 0,
          excludedUnreadSequenceList: void 0
        }, this.lastMessage = {
          lastTime: "",
          lastSequence: "",
          fromAccount: "",
          messageForShow: ""
        }, this.nextMessageSeq = "", this.memberNum = "", this.memberCount = "", this.maxMemberNum = "", this.maxMemberCount = "", this.joinOption = "", this.groupCustomField = [], this.muteAllMembers = !1, this.isSupportTopic = !1, this._initGroup(t);
      }
      return s(e, [{
        key: "memberNum",
        get: function get() {
          return we.warn("！！！v2.8.0起弃用memberNum，请使用 memberCount"), this.memberCount;
        },
        set: function set(e) {}
      }, {
        key: "maxMemberNum",
        get: function get() {
          return we.warn("！！！v2.8.0起弃用maxMemberNum，请使用 maxMemberCount"), this.maxMemberCount;
        },
        set: function set(e) {}
      }, {
        key: "_initGroup",
        value: function value(e) {
          for (var t in e) {
            us.indexOf(t) < 0 || ("selfInfo" !== t ? ("memberNum" === t && (this.memberCount = e[t]), "maxMemberNum" === t && (this.maxMemberCount = e[t]), "isSupportTopic" !== t ? this[t] = e[t] : this.isSupportTopic = 1 === e[t]) : this.updateSelfInfo(e[t]));
          }
        }
      }, {
        key: "updateGroup",
        value: function value(e) {
          var t = this,
            o = JSON.parse(JSON.stringify(e));
          o.lastMsgTime && (this.lastMessage.lastTime = o.lastMsgTime), Ze(o.muteAllMembers) || ("On" === o.muteAllMembers ? o.muteAllMembers = !0 : o.muteAllMembers = !1), o.groupCustomField && vt(this.groupCustomField, o.groupCustomField), Ze(o.memberNum) || (this.memberCount = o.memberNum), Ze(o.maxMemberNum) || (this.maxMemberCount = o.maxMemberNum), Ze(o.isSupportTopic) || (this.isSupportTopic = $e(o.isSupportTopic) ? 1 === o.isSupportTopic : o.isSupportTopic), ct(this, o, ["members", "errorCode", "lastMsgTime", "groupCustomField", "memberNum", "maxMemberNum", "isSupportTopic"]), Qe(o.members) && o.members.length > 0 && o.members.forEach(function (e) {
            e.userID === t.selfInfo.userID && ct(t.selfInfo, e, ["sequence"]);
          });
        }
      }, {
        key: "updateSelfInfo",
        value: function value(e) {
          var o = {
            nameCard: e.nameCard,
            joinTime: e.joinTime,
            role: e.role,
            messageRemindType: e.messageRemindType,
            readedSequence: e.readedSequence,
            excludedUnreadSequenceList: e.excludedUnreadSequenceList
          };
          ct(this.selfInfo, t({}, o), [], ["", null, void 0, 0, NaN]);
        }
      }, {
        key: "setSelfNameCard",
        value: function value(e) {
          this.selfInfo.nameCard = e;
        }
      }]), e;
    }(),
    ds = function ds(e) {
      return Ze(e) ? {
        lastTime: 0,
        lastSequence: 0,
        fromAccount: 0,
        messageForShow: "",
        payload: null,
        type: "",
        isRevoked: !1,
        cloudCustomData: "",
        onlineOnlyFlag: !1,
        nick: "",
        nameCard: "",
        version: 0,
        isPeerRead: !1
      } : e instanceof wa ? {
        lastTime: e.time || 0,
        lastSequence: e.sequence || 0,
        fromAccount: e.from || "",
        messageForShow: Ft(e.type, e.payload),
        payload: e.payload || null,
        type: e.type || null,
        isRevoked: e.isRevoked || !1,
        cloudCustomData: e.cloudCustomData || "",
        onlineOnlyFlag: e._onlineOnlyFlag || !1,
        nick: e.nick || "",
        nameCard: e.nameCard || "",
        version: e.version || 0,
        isPeerRead: e.isPeerRead || !1
      } : t(t({}, e), {}, {
        messageForShow: Ft(e.type, e.payload)
      });
    },
    ps = function () {
      function e(t) {
        n(this, e), this.conversationID = t.conversationID || "", this.unreadCount = t.unreadCount || 0, this.type = t.type || "", this.lastMessage = ds(t.lastMessage), t.lastMsgTime && (this.lastMessage.lastTime = t.lastMsgTime), this._isInfoCompleted = !1, this.peerReadTime = t.peerReadTime || 0, this.groupAtInfoList = [], this.remark = "", this.isPinned = t.isPinned || !1, this.messageRemindType = "", this._initProfile(t);
      }
      return s(e, [{
        key: "toAccount",
        get: function get() {
          return this.conversationID.startsWith(D.CONV_C2C) ? this.conversationID.replace(D.CONV_C2C, "") : this.conversationID.startsWith(D.CONV_GROUP) ? this.conversationID.replace(D.CONV_GROUP, "") : "";
        }
      }, {
        key: "subType",
        get: function get() {
          return this.groupProfile ? this.groupProfile.type : "";
        }
      }, {
        key: "_initProfile",
        value: function value(e) {
          var t = this;
          Object.keys(e).forEach(function (o) {
            switch (o) {
              case "userProfile":
                t.userProfile = e.userProfile;
                break;
              case "groupProfile":
                t.groupProfile = e.groupProfile;
            }
          }), Ze(this.userProfile) && this.type === D.CONV_C2C ? this.userProfile = new rs({
            userID: e.conversationID.replace("C2C", "")
          }) : Ze(this.groupProfile) && this.type === D.CONV_GROUP && (this.groupProfile = new ls({
            groupID: e.conversationID.replace("GROUP", "")
          }));
        }
      }, {
        key: "updateUnreadCount",
        value: function value(e) {
          var t = e.nextUnreadCount,
            o = e.isFromGetConversations,
            n = e.isUnreadC2CMessage;
          Ze(t) || (It(this.subType) ? this.unreadCount = 0 : o && this.type === D.CONV_GROUP || o && this.type === D.CONV_TOPIC || n && this.type === D.CONV_C2C ? this.unreadCount = t : this.unreadCount = this.unreadCount + t);
        }
      }, {
        key: "updateLastMessage",
        value: function value(e) {
          this.lastMessage = ds(e);
        }
      }, {
        key: "updateGroupAtInfoList",
        value: function value(e) {
          var t,
            o = (v(t = e.groupAtType) || y(t) || I(t) || T()).slice(0);
          -1 !== o.indexOf(D.CONV_AT_ME) && -1 !== o.indexOf(D.CONV_AT_ALL) && (o = [D.CONV_AT_ALL_AT_ME]);
          var n = {
            from: e.from,
            groupID: e.groupID,
            topicID: e.topicID,
            messageSequence: e.sequence,
            atTypeArray: o,
            __random: e.__random,
            __sequence: e.__sequence
          };
          this.groupAtInfoList.push(n), we.debug("Conversation.updateGroupAtInfoList conversationID:".concat(this.conversationID), this.groupAtInfoList);
        }
      }, {
        key: "clearGroupAtInfoList",
        value: function value() {
          this.groupAtInfoList.length = 0;
        }
      }, {
        key: "reduceUnreadCount",
        value: function value() {
          this.unreadCount >= 1 && (this.unreadCount -= 1);
        }
      }, {
        key: "isLastMessageRevoked",
        value: function value(e) {
          var t = e.sequence,
            o = e.time;
          return this.type === D.CONV_C2C && t === this.lastMessage.lastSequence && o === this.lastMessage.lastTime || this.type === D.CONV_GROUP && t === this.lastMessage.lastSequence;
        }
      }, {
        key: "setLastMessageRevoked",
        value: function value(e) {
          this.lastMessage.isRevoked = e;
        }
      }]), e;
    }(),
    gs = function () {
      function e(t) {
        n(this, e), this._conversationModule = t, this._className = "MessageRemindHandler", this._updateSequence = 0;
      }
      return s(e, [{
        key: "getC2CMessageRemindType",
        value: function value() {
          var e = this,
            t = "".concat(this._className, ".getC2CMessageRemindType");
          return this._conversationModule.request({
            protocolName: Bo,
            updateSequence: this._updateSequence
          }).then(function (o) {
            we.log("".concat(t, " ok"));
            var n = o.data,
              a = n.updateSequence,
              s = n.muteFlagList;
            e._updateSequence = a, e._patchC2CMessageRemindType(s);
          }).catch(function (e) {
            we.error("".concat(t, " failed. error:"), e);
          });
        }
      }, {
        key: "_patchC2CMessageRemindType",
        value: function value(e) {
          var t = this,
            o = 0,
            n = "";
          Qe(e) && e.length > 0 && e.forEach(function (e) {
            var a = e.userID,
              s = e.muteFlag;
            0 === s ? n = D.MSG_REMIND_ACPT_AND_NOTE : 1 === s ? n = D.MSG_REMIND_DISCARD : 2 === s && (n = D.MSG_REMIND_ACPT_NOT_NOTE), !0 === t._conversationModule.patchMessageRemindType({
              ID: a,
              isC2CConversation: !0,
              messageRemindType: n
            }) && (o += 1);
          }), we.log("".concat(this._className, "._patchC2CMessageRemindType count:").concat(o));
        }
      }, {
        key: "set",
        value: function value(e) {
          return e.groupID ? this._setGroupMessageRemindType(e) : Qe(e.userIDList) ? this._setC2CMessageRemindType(e) : void 0;
        }
      }, {
        key: "_setGroupMessageRemindType",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._setGroupMessageRemindType"),
            n = e.groupID,
            a = e.messageRemindType,
            s = "groupID:".concat(n, " messageRemindType:").concat(a),
            r = new va(ya.SET_MESSAGE_REMIND_TYPE);
          return r.setMessage(s), this._getModule(ro).modifyGroupMemberInfo({
            groupID: n,
            messageRemindType: a,
            userID: this._conversationModule.getMyUserID()
          }).then(function () {
            r.setNetworkType(t._conversationModule.getNetworkType()).end(), we.log("".concat(o, " ok. ").concat(s));
            var e = t._getModule(ao).getLocalGroupProfile(n);
            if (e && (e.selfInfo.messageRemindType = a), Tt(n)) {
              var i = t._getModule(io),
                c = bt(n),
                u = i.getLocalTopic(c, n);
              return u && (u.updateSelfInfo({
                messageRemindType: a
              }), t._conversationModule.emitOuterEvent(S.TOPIC_UPDATED, {
                groupID: n,
                topic: u
              })), ba({
                group: e
              });
            }
            return t._conversationModule.patchMessageRemindType({
              ID: n,
              isC2CConversation: !1,
              messageRemindType: a
            }) && t._emitConversationUpdate(), ba({
              group: e
            });
          }).catch(function (e) {
            return t._conversationModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              r.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_setC2CMessageRemindType",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._setC2CMessageRemindType"),
            n = e.userIDList,
            a = e.messageRemindType,
            s = n.slice(0, 30),
            r = 0;
          a === D.MSG_REMIND_DISCARD ? r = 1 : a === D.MSG_REMIND_ACPT_NOT_NOTE && (r = 2);
          var i = "userIDList:".concat(s, " messageRemindType:").concat(a),
            c = new va(ya.SET_MESSAGE_REMIND_TYPE);
          return c.setMessage(i), this._conversationModule.request({
            protocolName: Ho,
            requestData: {
              userIDList: s,
              muteFlag: r
            }
          }).then(function (e) {
            c.setNetworkType(t._conversationModule.getNetworkType()).end();
            var n = e.data,
              r = n.updateSequence,
              i = n.errorList;
            t._updateSequence = r;
            var u = [],
              l = [];
            Qe(i) && i.forEach(function (e) {
              u.push(e.userID), l.push({
                userID: e.userID,
                code: e.errorCode
              });
            });
            var d = s.filter(function (e) {
              return -1 === u.indexOf(e);
            });
            we.log("".concat(o, " ok. successUserIDList:").concat(d, " failureUserIDList:").concat(JSON.stringify(l)));
            var p = 0;
            return d.forEach(function (e) {
              t._conversationModule.patchMessageRemindType({
                ID: e,
                isC2CConversation: !0,
                messageRemindType: a
              }) && (p += 1);
            }), p >= 1 && t._emitConversationUpdate(), s.length = u.length = 0, Ya({
              successUserIDList: d.map(function (e) {
                return {
                  userID: e
                };
              }),
              failureUserIDList: l
            });
          }).catch(function (e) {
            return t._conversationModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              c.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_getModule",
        value: function value(e) {
          return this._conversationModule.getModule(e);
        }
      }, {
        key: "_emitConversationUpdate",
        value: function value() {
          this._conversationModule.emitConversationUpdate(!0, !1);
        }
      }, {
        key: "setUpdateSequence",
        value: function value(e) {
          this._updateSequence = e;
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._updateSequence = 0;
        }
      }]), e;
    }(),
    _s = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        return n(this, a), (t = o.call(this, e))._className = "ConversationModule", Za.mixin(_(t)), t._messageListHandler = new za(), t._messageRemindHandler = new gs(_(t)), t.singlyLinkedList = new cs(100), t._pagingStatus = Wt.NOT_START, t._pagingTimeStamp = 0, t._pagingStartIndex = 0, t._pagingPinnedTimeStamp = 0, t._pagingPinnedStartIndex = 0, t._conversationMap = new Map(), t._tmpGroupList = [], t._tmpGroupAtTipsList = [], t._peerReadTimeMap = new Map(), t._completedMap = new Map(), t._roamingMessageKeyAndTimeMap = new Map(), t._roamingMessageSequenceMap = new Map(), t._remoteGroupReadSequenceMap = new Map(), t._initListeners(), t;
      }
      return s(a, [{
        key: "_initListeners",
        value: function value() {
          var e = this.getInnerEmitterInstance();
          e.on(Ja, this._initLocalConversationList, this), e.on(Qa, this._onProfileUpdated, this);
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          e % 60 == 0 && this._messageListHandler.traversal();
        }
      }, {
        key: "_initLocalConversationList",
        value: function value() {
          var e = this,
            t = new va(ya.GET_CONVERSATION_LIST_IN_STORAGE);
          we.log("".concat(this._className, "._initLocalConversationList."));
          var o = "",
            n = this._getStorageConversationList();
          if (n) {
            for (var a = n.length, s = 0; s < a; s++) {
              var r = n[s];
              if (r) {
                if (r.conversationID === "".concat(D.CONV_C2C, "@TLS#ERROR") || r.conversationID === "".concat(D.CONV_C2C, "@TLS#NOT_FOUND")) continue;
                if (r.groupProfile) {
                  var i = r.groupProfile.type;
                  if (It(i)) continue;
                }
              }
              this._conversationMap.set(n[s].conversationID, new ps(n[s]));
            }
            this.emitConversationUpdate(!0, !1), o = "count:".concat(a);
          } else o = "count:0";
          t.setNetworkType(this.getNetworkType()).setMessage(o).end(), this.getModule(no) || this.triggerReady(), this.ready(function () {
            e._tmpGroupList.length > 0 && (e.updateConversationGroupProfile(e._tmpGroupList), e._tmpGroupList.length = 0);
          }), this._syncConversationList();
        }
      }, {
        key: "onMessageSent",
        value: function value(e) {
          this._onSendOrReceiveMessage({
            conversationOptionsList: e.conversationOptionsList,
            isInstantMessage: !0
          });
        }
      }, {
        key: "onNewMessage",
        value: function value(e) {
          this._onSendOrReceiveMessage(e);
        }
      }, {
        key: "_onSendOrReceiveMessage",
        value: function value(e) {
          var t = this,
            o = e.conversationOptionsList,
            n = e.isInstantMessage,
            a = void 0 === n || n,
            s = e.isUnreadC2CMessage,
            r = void 0 !== s && s;
          this._isReady ? 0 !== o.length && (this._getC2CPeerReadTime(o), this._updateLocalConversationList({
            conversationOptionsList: o,
            isInstantMessage: a,
            isUnreadC2CMessage: r,
            isFromGetConversations: !1
          }), this._setStorageConversationList(), o.filter(function (e) {
            return e.type === D.CONV_TOPIC;
          }).length > 0 || this.emitConversationUpdate()) : this.ready(function () {
            t._onSendOrReceiveMessage(e);
          });
        }
      }, {
        key: "updateConversationGroupProfile",
        value: function value(e) {
          var t = this;
          if (!Qe(e) || 0 !== e.length) if (0 !== this._conversationMap.size) {
            var o = !1;
            e.forEach(function (e) {
              var n = "GROUP".concat(e.groupID);
              if (t._conversationMap.has(n)) {
                o = !0;
                var a = t._conversationMap.get(n);
                a.groupProfile = JSON.parse(JSON.stringify(e)), a.lastMessage.lastSequence < e.nextMessageSeq && (a.lastMessage.lastSequence = e.nextMessageSeq - 1), a.subType || (a.subType = e.type);
              }
            }), o && this.emitConversationUpdate(!0, !1);
          } else this._tmpGroupList = e;
        }
      }, {
        key: "_updateConversationUserProfile",
        value: function value(e) {
          var t = this;
          e.data.forEach(function (e) {
            var o = "C2C".concat(e.userID);
            t._conversationMap.has(o) && (t._conversationMap.get(o).userProfile = e);
          }), this.emitConversationUpdate(!0, !1);
        }
      }, {
        key: "onMessageRevoked",
        value: function value(e) {
          var t = this;
          if (0 !== e.length) {
            var o = null,
              n = !1;
            e.forEach(function (e) {
              (o = t._conversationMap.get(e.conversationID)) && (o.reduceUnreadCount(), o.isLastMessageRevoked(e) && (n = !0, o.setLastMessageRevoked(!0)));
            }), n && this.emitConversationUpdate(!0, !1);
          }
        }
      }, {
        key: "onMessageDeleted",
        value: function value(e) {
          var t = this;
          if (0 !== e.length) {
            var o = null;
            e.forEach(function (e) {
              (o = t._messageListHandler.getLocalMessage(e.conversationID, e.ID)) && (o.isDeleted = !0), e !== o && (e.isDeleted = !0);
            });
            for (var n = e[0].conversationID, a = this._messageListHandler.getLocalMessageList(n), s = {}, r = a.length - 1; r >= 0; r--) {
              if (!a[r].isDeleted) {
                s = a[r];
                break;
              }
            }
            var i = this._conversationMap.get(n);
            if (i) {
              var c = !1;
              i.lastMessage.lastSequence === s.sequence && i.lastMessage.lastTime === s.time || (Vt(s) && (s = void 0), i.updateLastMessage(s), i.type !== D.CONV_TOPIC && (c = !0), we.log("".concat(this._className, ".onMessageDeleted. update conversationID:").concat(n, " with lastMessage:"), i.lastMessage)), n.startsWith(D.CONV_C2C) && this.updateUnreadCount(n), c && this.emitConversationUpdate(!0, !1);
            }
          }
        }
      }, {
        key: "onMessageModified",
        value: function value(e) {
          var t = e.conversationType,
            o = e.from,
            n = e.to,
            a = e.time,
            s = e.sequence,
            r = e.elements,
            i = e.cloudCustomData,
            c = e.messageVersion,
            u = this.getMyUserID(),
            l = "".concat(t).concat(n);
          n === u && t === D.CONV_C2C && (l = "".concat(t).concat(o));
          var d = this._messageListHandler.onMessageModified(l, e),
            p = d.isUpdated,
            g = d.message;
          !0 === p && this.emitOuterEvent(S.MESSAGE_MODIFIED, [g]);
          var _ = Tt(n);
          if (we.log("".concat(this._className, ".onMessageModified isUpdated:").concat(p, " isTopicMessage:").concat(_, " from:").concat(o, " to:").concat(n)), _) {
            this.getModule(io).onMessageModified(e);
          } else {
            var h = this._conversationMap.get(l);
            if (h) {
              var f = h.lastMessage;
              we.debug("".concat(this._className.onMessageModified, " lastMessage:"), JSON.stringify(f), "options:", JSON.stringify(e)), f && f.lastTime === a && f.lastSequence === s && f.version !== c && (f.type = r[0].type, f.payload = r[0].content, f.messageForShow = Ft(f.type, f.payload), f.cloudCustomData = i, f.version = c, this.emitConversationUpdate(!0, !1));
            }
          }
          return g;
        }
      }, {
        key: "onNewGroupAtTips",
        value: function value(e) {
          var o = this,
            n = e.dataList,
            a = null;
          n.forEach(function (e) {
            e.groupAtTips ? a = e.groupAtTips : e.elements && (a = t(t({}, e.elements), {}, {
              sync: !0
            })), a.__random = e.random, a.__sequence = e.clientSequence, o._tmpGroupAtTipsList.push(a);
          }), we.debug("".concat(this._className, ".onNewGroupAtTips isReady:").concat(this._isReady), this._tmpGroupAtTipsList), this._isReady && this._handleGroupAtTipsList();
        }
      }, {
        key: "_handleGroupAtTipsList",
        value: function value() {
          var e = this;
          if (0 !== this._tmpGroupAtTipsList.length) {
            var t = !1;
            this._tmpGroupAtTipsList.forEach(function (o) {
              var n = o.groupID,
                a = o.from,
                s = o.topicID,
                r = void 0 === s ? void 0 : s,
                i = o.sync,
                c = void 0 !== i && i;
              if (a !== e.getMyUserID()) if (Ze(r)) {
                var u = e._conversationMap.get("".concat(D.CONV_GROUP).concat(n));
                u && (u.updateGroupAtInfoList(o), t = !0);
              } else {
                var l = e._conversationMap.get("".concat(D.CONV_GROUP).concat(r));
                if (l) {
                  l.updateGroupAtInfoList(o);
                  var d = e.getModule(io),
                    p = l.groupAtInfoList;
                  d.onConversationProxy({
                    topicID: r,
                    groupAtInfoList: p
                  });
                }
                if (Vt(l) && c) e.updateTopicConversation([{
                  conversationID: "".concat(D.CONV_GROUP).concat(r),
                  type: D.CONV_TOPIC
                }]), e._conversationMap.get("".concat(D.CONV_GROUP).concat(r)).updateGroupAtInfoList(o);
              }
            }), t && this.emitConversationUpdate(!0, !1), this._tmpGroupAtTipsList.length = 0;
          }
        }
      }, {
        key: "_getC2CPeerReadTime",
        value: function value(e) {
          var t = this,
            o = [];
          if (e.forEach(function (e) {
            t._conversationMap.has(e.conversationID) || e.type !== D.CONV_C2C || o.push(e.conversationID.replace(D.CONV_C2C, ""));
          }), o.length > 0) {
            we.debug("".concat(this._className, "._getC2CPeerReadTime userIDList:").concat(o));
            var n = this.getModule(no);
            n && n.getRemotePeerReadTime(o);
          }
        }
      }, {
        key: "_getStorageConversationList",
        value: function value() {
          return this.getModule(lo).getItem("conversationMap");
        }
      }, {
        key: "_setStorageConversationList",
        value: function value() {
          var e = this.getLocalConversationList().slice(0, 20).map(function (e) {
            return {
              conversationID: e.conversationID,
              type: e.type,
              subType: e.subType,
              lastMessage: e.lastMessage,
              groupProfile: e.groupProfile,
              userProfile: e.userProfile
            };
          });
          this.getModule(lo).setItem("conversationMap", e);
        }
      }, {
        key: "emitConversationUpdate",
        value: function value() {
          var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
            t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            o = this.getLocalConversationList();
          if (t) {
            var n = this.getModule(ao);
            n && n.updateGroupLastMessage(o);
          }
          e && this.emitOuterEvent(S.CONVERSATION_LIST_UPDATED);
        }
      }, {
        key: "getLocalConversationList",
        value: function value() {
          return M(this._conversationMap.values()).filter(function (e) {
            return e.type !== D.CONV_TOPIC;
          });
        }
      }, {
        key: "getLocalConversation",
        value: function value(e) {
          return this._conversationMap.get(e);
        }
      }, {
        key: "getLocalOldestMessage",
        value: function value(e) {
          return this._messageListHandler.getLocalOldestMessage(e);
        }
      }, {
        key: "_syncConversationList",
        value: function value() {
          var e = this,
            t = new va(ya.SYNC_CONVERSATION_LIST);
          return this._pagingStatus === Wt.NOT_START && this._conversationMap.clear(), this._pagingGetConversationList().then(function (o) {
            return e._pagingStatus = Wt.RESOLVED, e._setStorageConversationList(), e._handleC2CPeerReadTime(), e._patchConversationProperties(), t.setMessage(e._conversationMap.size).setNetworkType(e.getNetworkType()).end(), o;
          }).catch(function (o) {
            return e._pagingStatus = Wt.REJECTED, t.setMessage(e._pagingTimeStamp), e.probeNetwork().then(function (e) {
              var n = m(e, 2),
                a = n[0],
                s = n[1];
              t.setError(o, a, s).end();
            }), ja(o);
          });
        }
      }, {
        key: "_patchConversationProperties",
        value: function value() {
          var e = this,
            t = Date.now(),
            o = this.checkAndPatchRemark(),
            n = this._messageRemindHandler.getC2CMessageRemindType(),
            a = this.getModule(ao).getGroupList();
          Promise.all([o, n, a]).then(function () {
            var o = Date.now() - t;
            we.log("".concat(e._className, "._patchConversationProperties ok. cost ").concat(o, " ms")), e.emitConversationUpdate(!0, !1);
          });
        }
      }, {
        key: "_pagingGetConversationList",
        value: function value() {
          var e = this,
            t = "".concat(this._className, "._pagingGetConversationList");
          return we.log("".concat(t, " timeStamp:").concat(this._pagingTimeStamp, " startIndex:").concat(this._pagingStartIndex) + " pinnedTimeStamp:".concat(this._pagingPinnedTimeStamp, " pinnedStartIndex:").concat(this._pagingPinnedStartIndex)), this._pagingStatus = Wt.PENDING, this.request({
            protocolName: $o,
            requestData: {
              fromAccount: this.getMyUserID(),
              timeStamp: this._pagingTimeStamp,
              startIndex: this._pagingStartIndex,
              pinnedTimeStamp: this._pagingPinnedTimeStamp,
              pinnedStartIndex: this._pagingStartIndex,
              orderType: 1
            }
          }).then(function (o) {
            var n = o.data,
              a = n.completeFlag,
              s = n.conversations,
              r = void 0 === s ? [] : s,
              i = n.timeStamp,
              c = n.startIndex,
              u = n.pinnedTimeStamp,
              l = n.pinnedStartIndex;
            if (we.log("".concat(t, " ok. completeFlag:").concat(a, " count:").concat(r.length, " isReady:").concat(e._isReady)), r.length > 0) {
              var d = e._getConversationOptions(r);
              e._updateLocalConversationList({
                conversationOptionsList: d,
                isFromGetConversations: !0
              }), e.isLoggedIn() && e.emitConversationUpdate();
            }
            if (!e._isReady) {
              if (!e.isLoggedIn()) return Ya();
              e.triggerReady();
            }
            return e._pagingTimeStamp = i, e._pagingStartIndex = c, e._pagingPinnedTimeStamp = u, e._pagingPinnedStartIndex = l, 1 !== a ? e._pagingGetConversationList() : (e._handleGroupAtTipsList(), Ya());
          }).catch(function (o) {
            throw e.isLoggedIn() && (e._isReady || (we.warn("".concat(t, " failed. error:"), o), e.triggerReady())), o;
          });
        }
      }, {
        key: "_updateLocalConversationList",
        value: function value(e) {
          var t,
            o = e.isFromGetConversations,
            n = Date.now();
          t = this._getTmpConversationListMapping(e), this._conversationMap = new Map(this._sortConversationList([].concat(M(t.toBeUpdatedConversationList), M(this._conversationMap)))), o || this._updateUserOrGroupProfile(t.newConversationList), we.debug("".concat(this._className, "._updateLocalConversationList cost ").concat(Date.now() - n, " ms"));
        }
      }, {
        key: "_getTmpConversationListMapping",
        value: function value(e) {
          for (var t = e.conversationOptionsList, o = e.isFromGetConversations, n = e.isInstantMessage, a = e.isUnreadC2CMessage, s = void 0 !== a && a, r = [], i = [], c = this.getModule(ao), u = this.getModule(so), l = 0, d = t.length; l < d; l++) {
            var p = new ps(t[l]),
              g = p.conversationID;
            if (g !== "".concat(D.CONV_C2C, "@TLS#ERROR") && g !== "".concat(D.CONV_C2C, "@TLS#NOT_FOUND")) if (this._conversationMap.has(g)) {
              var _ = this._conversationMap.get(g),
                h = ["unreadCount", "allowType", "adminForbidType", "payload", "isPinned"];
              !1 === n && h.push("lastMessage");
              var f = t[l].lastMessage,
                m = !Ze(f);
              m || t[l].type === D.CONV_TOPIC || this._onLastMessageNotExist(t[l]), Ze(n) && m && null === _.lastMessage.payload && (_.lastMessage.payload = f.payload), ct(_, p, h, [null, void 0, "", 0, NaN]), _.updateUnreadCount({
                nextUnreadCount: p.unreadCount,
                isFromGetConversations: o,
                isUnreadC2CMessage: s
              }), n && m && (_.lastMessage.payload = f.payload, _.type === D.CONV_GROUP && (_.lastMessage.nameCard = f.nameCard, _.lastMessage.nick = f.nick)), m && _.lastMessage.cloudCustomData !== f.cloudCustomData && (_.lastMessage.cloudCustomData = f.cloudCustomData || ""), this._conversationMap.delete(g), r.push([g, _]);
            } else {
              if (p.type === D.CONV_GROUP && c) {
                var M = p.groupProfile.groupID,
                  v = c.getLocalGroupProfile(M);
                v && (p.groupProfile = v, p.updateUnreadCount({
                  nextUnreadCount: 0
                }));
              } else if (p.type === D.CONV_C2C) {
                var y = g.replace(D.CONV_C2C, "");
                u && u.isMyFriend(y) && (p.remark = u.getFriendRemark(y));
              }
              i.push(p), r.push([g, p]);
            }
          }
          var I = this.getModule(io);
          return r.forEach(function (e) {
            if (e[1].type === D.CONV_TOPIC) {
              var t = e[1],
                o = t.conversationID,
                n = t.unreadCount,
                a = t.groupAtInfoList;
              I.onConversationProxy({
                topicID: o.replace(D.CONV_GROUP, ""),
                unreadCount: n,
                groupAtInfoList: Vt(a) ? void 0 : a
              });
            }
          }), {
            toBeUpdatedConversationList: r,
            newConversationList: i
          };
        }
      }, {
        key: "_onLastMessageNotExist",
        value: function value(e) {
          new va(ya.LAST_MESSAGE_NOT_EXIST).setMessage("".concat(JSON.stringify(e))).setNetworkType(this.getNetworkType()).end();
        }
      }, {
        key: "_sortConversationList",
        value: function value(e) {
          var t = [],
            o = [];
          return e.forEach(function (e) {
            !0 === e[1].isPinned ? t.push(e) : o.push(e);
          }), t.sort(function (e, t) {
            return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
          }).concat(o.sort(function (e, t) {
            return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
          }));
        }
      }, {
        key: "_sortConversationListAndEmitEvent",
        value: function value() {
          this._conversationMap = new Map(this._sortConversationList(M(this._conversationMap))), this.emitConversationUpdate(!0, !1);
        }
      }, {
        key: "_updateUserOrGroupProfile",
        value: function value(e) {
          var t = this;
          if (0 !== e.length) {
            var o = [],
              n = [],
              a = this.getModule(oo),
              s = this.getModule(ao);
            e.forEach(function (e) {
              if (e.type === D.CONV_C2C) o.push(e.toAccount);else if (e.type === D.CONV_GROUP) {
                var t = e.toAccount;
                s.hasLocalGroup(t) ? e.groupProfile = s.getLocalGroupProfile(t) : n.push(t);
              }
            }), we.log("".concat(this._className, "._updateUserOrGroupProfile c2cUserIDList:").concat(o, " groupIDList:").concat(n)), o.length > 0 && a.getUserProfile({
              userIDList: o
            }).then(function (e) {
              var o = e.data;
              Qe(o) ? o.forEach(function (e) {
                t._conversationMap.get("C2C".concat(e.userID)).userProfile = e;
              }) : t._conversationMap.get("C2C".concat(o.userID)).userProfile = o;
            }), n.length > 0 && s.getGroupProfileAdvance({
              groupIDList: n,
              responseFilter: {
                groupBaseInfoFilter: ["Type", "Name", "FaceUrl"]
              }
            }).then(function (e) {
              e.data.successGroupList.forEach(function (e) {
                var o = "GROUP".concat(e.groupID);
                if (t._conversationMap.has(o)) {
                  var n = t._conversationMap.get(o);
                  ct(n.groupProfile, e, [], [null, void 0, "", 0, NaN]), !n.subType && e.type && (n.subType = e.type);
                }
              });
            });
          }
        }
      }, {
        key: "_getConversationOptions",
        value: function value(e) {
          var o = this,
            n = [],
            a = e.filter(function (e) {
              var t = e.lastMsg;
              return Xe(t);
            }).filter(function (e) {
              var t = e.type,
                o = e.userID;
              return 1 === t && "@TLS#NOT_FOUND" !== o && "@TLS#ERROR" !== o || 2 === t;
            }),
            s = this.getMyUserID(),
            r = a.map(function (e) {
              if (1 === e.type) {
                var a = {
                  userID: e.userID,
                  nick: e.peerNick,
                  avatar: e.peerAvatar
                };
                return n.push(a), {
                  conversationID: "C2C".concat(e.userID),
                  type: "C2C",
                  lastMessage: {
                    lastTime: e.time,
                    lastSequence: e.sequence,
                    fromAccount: e.lastC2CMsgFromAccount,
                    messageForShow: e.messageShow,
                    type: e.lastMsg.elements[0] ? e.lastMsg.elements[0].type : null,
                    payload: e.lastMsg.elements[0] ? e.lastMsg.elements[0].content : null,
                    cloudCustomData: e.lastMsg.cloudCustomData || "",
                    isRevoked: 8 === e.lastMessageFlag,
                    onlineOnlyFlag: !1,
                    nick: "",
                    nameCard: "",
                    version: 0,
                    isPeerRead: e.lastC2CMsgFromAccount === s && e.time <= e.c2cPeerReadTime
                  },
                  userProfile: new rs(a),
                  peerReadTime: e.c2cPeerReadTime,
                  isPinned: 1 === e.isPinned,
                  messageRemindType: ""
                };
              }
              return {
                conversationID: "GROUP".concat(e.groupID),
                type: "GROUP",
                lastMessage: t(t({
                  lastTime: e.time,
                  lastSequence: e.messageReadSeq + e.unreadCount,
                  fromAccount: e.msgGroupFromAccount,
                  messageForShow: e.messageShow
                }, o._patchTypeAndPayload(e)), {}, {
                  cloudCustomData: e.lastMsg.cloudCustomData || "",
                  isRevoked: 2 === e.lastMessageFlag,
                  onlineOnlyFlag: !1,
                  nick: e.senderNick || "",
                  nameCard: e.senderNameCard || ""
                }),
                groupProfile: new ls({
                  groupID: e.groupID,
                  name: e.groupNick,
                  avatar: e.groupImage
                }),
                unreadCount: e.unreadCount,
                peerReadTime: 0,
                isPinned: 1 === e.isPinned,
                messageRemindType: "",
                version: 0
              };
            });
          n.length > 0 && this.getModule(oo).onConversationsProfileUpdated(n);
          return r;
        }
      }, {
        key: "_patchTypeAndPayload",
        value: function value(e) {
          var o = e.lastMsg,
            n = o.event,
            a = void 0 === n ? void 0 : n,
            s = o.elements,
            r = void 0 === s ? [] : s,
            i = o.groupTips,
            c = void 0 === i ? {} : i;
          if (!Ze(a) && !Vt(c)) {
            var u = new wa(c);
            u.setElement({
              type: D.MSG_GRP_TIP,
              content: t(t({}, c.elements), {}, {
                groupProfile: c.groupProfile
              })
            });
            var l = JSON.parse(JSON.stringify(u.payload));
            return u = null, {
              type: D.MSG_GRP_TIP,
              payload: l
            };
          }
          return {
            type: r[0] ? r[0].type : null,
            payload: r[0] ? r[0].content : null
          };
        }
      }, {
        key: "getLocalMessageList",
        value: function value(e) {
          return this._messageListHandler.getLocalMessageList(e);
        }
      }, {
        key: "deleteLocalMessage",
        value: function value(e) {
          e instanceof wa && this._messageListHandler.remove(e);
        }
      }, {
        key: "onConversationDeleted",
        value: function value(e) {
          var t = this;
          we.log("".concat(this._className, ".onConversationDeleted")), Qe(e) && e.forEach(function (e) {
            var o = e.type,
              n = e.userID,
              a = e.groupID,
              s = "";
            1 === o ? s = "".concat(D.CONV_C2C).concat(n) : 2 === o && (s = "".concat(D.CONV_GROUP).concat(a)), t.deleteLocalConversation(s);
          });
        }
      }, {
        key: "onConversationPinned",
        value: function value(e) {
          var t = this;
          if (Qe(e)) {
            var o = !1;
            e.forEach(function (e) {
              var n,
                a = e.type,
                s = e.userID,
                r = e.groupID;
              1 === a ? n = t.getLocalConversation("".concat(D.CONV_C2C).concat(s)) : 2 === a && (n = t.getLocalConversation("".concat(D.CONV_GROUP).concat(r))), n && (we.log("".concat(t._className, ".onConversationPinned conversationID:").concat(n.conversationID, " isPinned:").concat(n.isPinned)), n.isPinned || (n.isPinned = !0, o = !0));
            }), o && this._sortConversationListAndEmitEvent();
          }
        }
      }, {
        key: "onConversationUnpinned",
        value: function value(e) {
          var t = this;
          if (Qe(e)) {
            var o = !1;
            e.forEach(function (e) {
              var n,
                a = e.type,
                s = e.userID,
                r = e.groupID;
              1 === a ? n = t.getLocalConversation("".concat(D.CONV_C2C).concat(s)) : 2 === a && (n = t.getLocalConversation("".concat(D.CONV_GROUP).concat(r))), n && (we.log("".concat(t._className, ".onConversationUnpinned conversationID:").concat(n.conversationID, " isPinned:").concat(n.isPinned)), n.isPinned && (n.isPinned = !1, o = !0));
            }), o && this._sortConversationListAndEmitEvent();
          }
        }
      }, {
        key: "getMessageList",
        value: function value(e) {
          var t = this,
            o = e.conversationID,
            n = e.nextReqMessageID,
            a = e.count,
            s = "".concat(this._className, ".getMessageList"),
            r = this.getLocalConversation(o),
            i = "";
          if (r && r.groupProfile && (i = r.groupProfile.type), It(i)) return we.log("".concat(s, " not available in avchatroom. conversationID:").concat(o)), Ya({
            messageList: [],
            nextReqMessageID: "",
            isCompleted: !0
          });
          (Ze(a) || a > 15) && (a = 15), this._isFirstGetTopicMessageWithUnJoined(o, n) && this.removeConversationMessageCache(o);
          var c = this._computeRemainingCount({
              conversationID: o,
              nextReqMessageID: n
            }),
            u = this._completedMap.has(o);
          if (we.log("".concat(s, " conversationID:").concat(o, " nextReqMessageID:").concat(n) + " remainingCount:".concat(c, " count:").concat(a, " isCompleted:").concat(u)), this._needGetHistory({
            conversationID: o,
            remainingCount: c,
            count: a
          })) return this.getHistoryMessages({
            conversationID: o,
            nextReqMessageID: n,
            count: 20
          }).then(function (e) {
            var n = e.nextReqID,
              a = e.storedMessageList,
              r = t._completedMap.has(o),
              i = a;
            c > 0 && (i = t._messageListHandler.getLocalMessageList(o).slice(0, a.length + c));
            var u = {
              nextReqMessageID: r ? "" : n,
              messageList: i,
              isCompleted: r
            };
            return we.log("".concat(s, " ret.nextReqMessageID:").concat(u.nextReqMessageID, " ret.isCompleted:").concat(u.isCompleted, " ret.length:").concat(i.length)), ba(u);
          });
          this.modifyMessageList(o);
          var l = this._getMessageListFromMemory({
            conversationID: o,
            nextReqMessageID: n,
            count: a
          });
          return Ya(l);
        }
      }, {
        key: "_getMessageListFromMemory",
        value: function value(e) {
          var t = e.conversationID,
            o = e.nextReqMessageID,
            n = e.count,
            a = "".concat(this._className, "._getMessageListFromMemory"),
            s = this._messageListHandler.getLocalMessageList(t),
            r = s.length,
            i = 0,
            c = {
              isCompleted: !1,
              nextReqMessageID: "",
              messageList: []
            };
          return o ? (i = s.findIndex(function (e) {
            return e.ID === o;
          })) > n ? (c.messageList = s.slice(i - n, i), c.nextReqMessageID = s[i - n].ID) : (c.messageList = s.slice(0, i), c.isCompleted = !0) : r > n ? (i = r - n, c.messageList = s.slice(i, r), c.nextReqMessageID = s[i].ID) : (c.messageList = s.slice(0, r), c.isCompleted = !0), we.log("".concat(a, " conversationID:").concat(t) + " ret.nextReqMessageID:".concat(c.nextReqMessageID, " ret.isCompleted:").concat(c.isCompleted, " ret.length:").concat(c.messageList.length)), c;
        }
      }, {
        key: "getMessageListHopping",
        value: function value(e) {
          var t = "".concat(this._className, ".getMessageListHopping"),
            o = e.conversationID,
            n = e.sequence,
            a = e.time,
            s = e.count,
            r = e.direction,
            i = void 0 === r ? 0 : r;
          (Ze(s) || s > 15) && (s = 15);
          var c = this._messageListHandler.getLocalMessageListHopping({
            conversationID: o,
            sequence: n,
            time: a,
            count: s,
            direction: i
          });
          if (!Vt(c)) {
            var u = c.length;
            if (u === s || o.startsWith(D.CONV_GROUP) && 1 === c[0].sequence) return we.log("".concat(t, ". conversationID:").concat(o, " message from memory:").concat(c.length)), Ya({
              messageList: c
            });
            var l = s - u + 1,
              d = 1 === i ? c.pop() : c.shift();
            return this._getRoamingMessagesHopping({
              conversationID: o,
              sequence: d.sequence,
              time: d.time,
              count: l,
              direction: i
            }).then(function (e) {
              var n, a;
              (we.log("".concat(t, ". conversationID:").concat(o, " message from memory:").concat(c.length, ", message from remote:").concat(e.length)), 1 === i) ? (n = c).push.apply(n, M(e)) : (a = c).unshift.apply(a, M(e));
              if (o.startsWith(D.CONV_C2C)) {
                var s = [];
                c.forEach(function (e) {
                  s.push([e.ID, e]);
                }), c = M(new Map(s).values());
              }
              return ba({
                messageList: c
              });
            });
          }
          return this._getRoamingMessagesHopping({
            conversationID: o,
            sequence: n,
            time: a,
            count: s,
            direction: i
          }).then(function (e) {
            return we.log("".concat(t, ". conversationID:").concat(o, " message from remote:").concat(e.length)), ba({
              messageList: e
            });
          });
        }
      }, {
        key: "_getRoamingMessagesHopping",
        value: function value(e) {
          var t = e.conversationID,
            o = e.sequence,
            n = e.time,
            a = e.count,
            s = e.direction;
          if (t.startsWith(D.CONV_C2C)) {
            var r = this.getModule(no),
              i = t.replace(D.CONV_C2C, "");
            return r.getRoamingMessagesHopping({
              peerAccount: i,
              time: n,
              count: a,
              direction: s
            });
          }
          if (t.startsWith(D.CONV_GROUP)) {
            var c = this.getModule(ao),
              u = t.replace(D.CONV_GROUP, ""),
              l = o;
            return 1 === s && (l = o + a - 1), c.getRoamingMessagesHopping({
              groupID: u,
              sequence: l,
              count: a
            }).then(function (e) {
              var t = e.findIndex(function (e) {
                return e.sequence === o;
              });
              return 1 === s ? -1 === t ? [] : e.slice(t) : e;
            });
          }
        }
      }, {
        key: "_computeRemainingCount",
        value: function value(e) {
          var t = e.conversationID,
            o = e.nextReqMessageID,
            n = this._messageListHandler.getLocalMessageList(t),
            a = n.length;
          if (!o) return a;
          var s = 0;
          return Ct(t) ? s = n.findIndex(function (e) {
            return e.ID === o;
          }) : St(t) && (s = -1 !== o.indexOf("-") ? n.findIndex(function (e) {
            return e.ID === o;
          }) : n.findIndex(function (e) {
            return e.sequence === o;
          })), -1 === s && (s = 0), s;
        }
      }, {
        key: "_getMessageListSize",
        value: function value(e) {
          return this._messageListHandler.getLocalMessageList(e).length;
        }
      }, {
        key: "_needGetHistory",
        value: function value(e) {
          var t = e.conversationID,
            o = e.remainingCount,
            n = e.count,
            a = this.getLocalConversation(t),
            s = "";
          return a && a.groupProfile && (s = a.groupProfile.type), !Dt(t) && !It(s) && o <= n && !this._completedMap.has(t);
        }
      }, {
        key: "getHistoryMessages",
        value: function value(e) {
          var t = e.conversationID,
            o = e.count;
          if (t === D.CONV_SYSTEM) return Ya();
          var n = 15;
          o > 20 && (n = 20);
          var a = null;
          if (Ct(t)) {
            var s = this._roamingMessageKeyAndTimeMap.has(t);
            return (a = this.getModule(no)) ? a.getRoamingMessage({
              conversationID: t,
              peerAccount: t.replace(D.CONV_C2C, ""),
              count: n,
              lastMessageTime: s ? this._roamingMessageKeyAndTimeMap.get(t).lastMessageTime : 0,
              messageKey: s ? this._roamingMessageKeyAndTimeMap.get(t).messageKey : ""
            }) : ja({
              code: na.CANNOT_FIND_MODULE,
              message: aa.CANNOT_FIND_MODULE
            });
          }
          if (St(t)) {
            if (!(a = this.getModule(ao))) return ja({
              code: na.CANNOT_FIND_MODULE,
              message: aa.CANNOT_FIND_MODULE
            });
            var r = null;
            this._conversationMap.has(t) && (r = this._conversationMap.get(t).lastMessage);
            var i = 0;
            r && (i = r.lastSequence);
            var c = this._roamingMessageSequenceMap.get(t);
            return a.getRoamingMessage({
              conversationID: t,
              groupID: t.replace(D.CONV_GROUP, ""),
              count: n,
              sequence: c || i
            });
          }
          return Ya();
        }
      }, {
        key: "patchConversationLastMessage",
        value: function value(e) {
          var t = this.getLocalConversation(e);
          if (t) {
            var o = t.lastMessage,
              n = o.messageForShow,
              a = o.payload;
            if (Vt(n) || Vt(a)) {
              var s = this._messageListHandler.getLocalMessageList(e);
              if (0 === s.length) return;
              var r = s[s.length - 1];
              we.log("".concat(this._className, ".patchConversationLastMessage conversationID:").concat(e, " payload:"), r.payload), t.updateLastMessage(r);
            }
          }
        }
      }, {
        key: "onRoamingMessage",
        value: function value() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
            o = arguments.length > 1 ? arguments[1] : void 0,
            n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2],
            a = o.startsWith(D.CONV_C2C) ? D.CONV_C2C : D.CONV_GROUP,
            s = null,
            r = [],
            i = [],
            c = 0,
            u = e.length,
            l = null,
            d = a === D.CONV_GROUP,
            p = this.getModule(_o),
            g = function g() {
              c = d ? e.length - 1 : 0, u = d ? 0 : e.length;
            },
            _ = function _() {
              d ? --c : ++c;
            },
            h = function h() {
              return d ? c >= u : c < u;
            };
          for (g(); h(); _()) {
            if (d && 1 === e[c].sequence && n && this.setCompleted(o), 1 !== e[c].isPlaceMessage) if ((s = new wa(e[c])).to = e[c].to, a !== D.CONV_GROUP || Ze(e[c].topicID) || (s.to = e[c].topicID), s.isSystemMessage = !!e[c].isSystemMessage, s.conversationType = a, 4 === e[c].event ? l = {
              type: D.MSG_GRP_TIP,
              content: t(t({}, e[c].elements), {}, {
                groupProfile: e[c].groupProfile
              })
            } : (e[c].elements = p.parseElements(e[c].elements, e[c].from), l = e[c].elements), d || s.setNickAndAvatar({
              nick: e[c].nick,
              avatar: e[c].avatar
            }), Vt(l)) {
              var f = new va(ya.EMPTY_MESSAGE_BODY);
              f.setMessage("from:".concat(s.from, " to:").concat(s.to, " sequence:").concat(s.sequence, " event:").concat(e[c].event)), f.setNetworkType(this.getNetworkType()).setLevel("warning").end();
            } else s.setElement(l), s.reInitialize(this.getMyUserID()), r.push(s);
          }
          return g = _ = h = null, n ? (this._messageListHandler.unshift(r, i), r = null, i) : (i = null, r);
        }
      }, {
        key: "findMessage",
        value: function value(e) {
          return this._messageListHandler.findMessage(e);
        }
      }, {
        key: "_isFirstGetTopicMessageWithUnJoined",
        value: function value(e, t) {
          var o = !1;
          if (!t && e.startsWith(D.CONV_GROUP)) {
            var n = e.replace(D.CONV_GROUP, "");
            if (Tt(n)) {
              var a = bt(n);
              this.getModule(ao).hasLocalGroup(a) || (o = !0);
            }
          }
          return o;
        }
      }, {
        key: "removeConversationMessageCache",
        value: function value(e) {
          var t = this;
          this._messageListHandler.getConversationIDList(e).forEach(function (e) {
            t._messageListHandler.removeByConversationID(e), t._completedMap.delete(e);
          });
        }
      }, {
        key: "setMessageRead",
        value: function value(e) {
          var t = e.conversationID,
            o = this.getLocalConversation(t);
          if (we.log("".concat(this._className, ".setMessageRead conversationID:").concat(t, " unreadCount:").concat(o ? o.unreadCount : 0)), !o) return Ya();
          if (o.type !== D.CONV_GROUP && o.type !== D.CONV_TOPIC || Vt(o.groupAtInfoList) || this.deleteGroupAtTips(t), 0 === o.unreadCount) return Ya();
          var n = this._messageListHandler.getLocalLastMessage(t),
            a = o.lastMessage.lastTime;
          n && a < n.time && (a = n.time);
          var s = o.lastMessage.lastSequence;
          if (n && s < n.sequence && (s = n.sequence), o.type === D.CONV_TOPIC && Ze(n)) {
            var r = this.getModule(io),
              i = t.replace(D.CONV_GROUP, ""),
              c = bt(i),
              u = r.getLocalTopic(c, i);
            u && (s = u.nextMessageSeq - 1);
          }
          var l = null;
          switch (o.type) {
            case D.CONV_C2C:
              return (l = this.getModule(no)) ? l.setMessageRead({
                conversationID: t,
                lastMessageTime: a
              }) : ja({
                code: na.CANNOT_FIND_MODULE,
                message: aa.CANNOT_FIND_MODULE
              });
            case D.CONV_GROUP:
            case D.CONV_TOPIC:
              return (l = this.getModule(ao)) ? l.setMessageRead({
                conversationID: t,
                lastMessageSeq: s
              }) : ja({
                code: na.CANNOT_FIND_MODULE,
                message: aa.CANNOT_FIND_MODULE
              });
            case D.CONV_SYSTEM:
              return o.unreadCount = 0, this.emitConversationUpdate(!0, !1), Ya();
            default:
              return Ya();
          }
        }
      }, {
        key: "setAllMessageRead",
        value: function value() {
          var e = this,
            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            o = "".concat(this._className, ".setAllMessageRead");
          t.scope || (t.scope = D.READ_ALL_MSG), we.log("".concat(o, " options:"), t);
          var n = this._createSetAllMessageReadPack(t);
          if (0 === n.readAllC2CMessage && 0 === n.groupMessageReadInfoList.length) return Ya();
          var a = new va(ya.SET_ALL_MESSAGE_READ);
          return this.request({
            protocolName: _n,
            requestData: n
          }).then(function (o) {
            var n = o.data,
              s = e._handleAllMessageRead(n);
            return a.setMessage("scope:".concat(t.scope, " failureGroups:").concat(JSON.stringify(s))).setNetworkType(e.getNetworkType()).end(), Ya();
          }).catch(function (t) {
            return e.probeNetwork().then(function (e) {
              var o = m(e, 2),
                n = o[0],
                s = o[1];
              a.setError(t, n, s).end();
            }), we.warn("".concat(o, " failed. error:"), t), ja({
              code: t && t.code ? t.code : na.MESSAGE_UNREAD_ALL_FAIL,
              message: t && t.message ? t.message : aa.MESSAGE_UNREAD_ALL_FAIL
            });
          });
        }
      }, {
        key: "_getConversationLastMessageSequence",
        value: function value(e) {
          var t = this._messageListHandler.getLocalLastMessage(e.conversationID),
            o = e.lastMessage.lastSequence;
          return t && o < t.sequence && (o = t.sequence), o;
        }
      }, {
        key: "_getConversationLastMessageTime",
        value: function value(e) {
          var t = this._messageListHandler.getLocalLastMessage(e.conversationID),
            o = e.lastMessage.lastTime;
          return t && o < t.time && (o = t.time), o;
        }
      }, {
        key: "_createSetAllMessageReadPack",
        value: function value(e) {
          var t,
            o = {
              readAllC2CMessage: 0,
              groupMessageReadInfoList: []
            },
            n = e.scope,
            a = C(this._conversationMap);
          try {
            for (a.s(); !(t = a.n()).done;) {
              var s = m(t.value, 2)[1];
              if (s.unreadCount > 0) if (s.type === D.CONV_C2C && 0 === o.readAllC2CMessage) {
                if (n === D.READ_ALL_MSG) o.readAllC2CMessage = 1;else if (n === D.READ_ALL_C2C_MSG) {
                  o.readAllC2CMessage = 1;
                  break;
                }
              } else if (s.type === D.CONV_GROUP && (n === D.READ_ALL_GROUP_MSG || n === D.READ_ALL_MSG)) {
                var r = this._getConversationLastMessageSequence(s);
                o.groupMessageReadInfoList.push({
                  groupID: s.groupProfile.groupID,
                  messageSequence: r
                });
              }
            }
          } catch (i) {
            a.e(i);
          } finally {
            a.f();
          }
          return o;
        }
      }, {
        key: "onPushedAllMessageRead",
        value: function value(e) {
          this._handleAllMessageRead(e);
        }
      }, {
        key: "_handleAllMessageRead",
        value: function value(e) {
          var t = e.groupMessageReadInfoList,
            o = e.readAllC2CMessage,
            n = this._parseGroupReadInfo(t);
          return this._updateAllConversationUnreadCount({
            readAllC2CMessage: o
          }) >= 1 && this.emitConversationUpdate(!0, !1), n;
        }
      }, {
        key: "_parseGroupReadInfo",
        value: function value(e) {
          var t = [];
          if (e && e.length) for (var o = 0, n = e.length; o < n; o++) {
            var a = e[o],
              s = a.groupID,
              r = a.sequence,
              i = a.retCode,
              c = a.lastMessageSeq;
            Ze(i) ? this._remoteGroupReadSequenceMap.set(s, c) : (this._remoteGroupReadSequenceMap.set(s, r), 0 !== i && t.push("".concat(s, "-").concat(r, "-").concat(i)));
          }
          return t;
        }
      }, {
        key: "_updateAllConversationUnreadCount",
        value: function value(e) {
          var t,
            o = e.readAllC2CMessage,
            n = 0,
            a = C(this._conversationMap);
          try {
            for (a.s(); !(t = a.n()).done;) {
              var s = m(t.value, 2),
                r = s[0],
                i = s[1];
              if (i.unreadCount >= 1) {
                if (1 === o && i.type === D.CONV_C2C) {
                  var c = this._getConversationLastMessageTime(i);
                  this.updateIsReadAfterReadReport({
                    conversationID: r,
                    lastMessageTime: c
                  });
                } else if (i.type === D.CONV_GROUP) {
                  var u = r.replace(D.CONV_GROUP, "");
                  if (this._remoteGroupReadSequenceMap.has(u)) {
                    var l = this._remoteGroupReadSequenceMap.get(u),
                      d = this._getConversationLastMessageSequence(i);
                    this.updateIsReadAfterReadReport({
                      conversationID: r,
                      remoteReadSequence: l
                    }), d >= l && this._remoteGroupReadSequenceMap.delete(u);
                  }
                }
                this.updateUnreadCount(r, !1) && (n += 1);
              }
            }
          } catch (p) {
            a.e(p);
          } finally {
            a.f();
          }
          return n;
        }
      }, {
        key: "isRemoteRead",
        value: function value(e) {
          var t = e.conversationID,
            o = e.sequence,
            n = t.replace(D.CONV_GROUP, ""),
            a = !1;
          if (this._remoteGroupReadSequenceMap.has(n)) {
            var s = this._remoteGroupReadSequenceMap.get(n);
            o <= s && (a = !0, we.log("".concat(this._className, ".isRemoteRead conversationID:").concat(t, " messageSequence:").concat(o, " remoteReadSequence:").concat(s))), o >= s + 10 && this._remoteGroupReadSequenceMap.delete(n);
          }
          return a;
        }
      }, {
        key: "updateIsReadAfterReadReport",
        value: function value(e) {
          var t = e.conversationID,
            o = e.lastMessageSeq,
            n = e.lastMessageTime,
            a = this._messageListHandler.getLocalMessageList(t);
          if (0 !== a.length) for (var s, r = a.length - 1; r >= 0; r--) {
            if (s = a[r], !(n && s.time > n || o && s.sequence > o)) {
              if ("in" === s.flow && s.isRead) break;
              s.setIsRead(!0);
            }
          }
        }
      }, {
        key: "updateUnreadCount",
        value: function value(e) {
          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            o = !1,
            n = this.getLocalConversation(e),
            a = this._messageListHandler.getLocalMessageList(e);
          if (n) {
            var s = n.unreadCount,
              r = a.filter(function (e) {
                return !e.isRead && !e._onlineOnlyFlag && !e.isDeleted;
              }).length;
            if (s !== r && (n.unreadCount = r, o = !0, we.log("".concat(this._className, ".updateUnreadCount from ").concat(s, " to ").concat(r, ", conversationID:").concat(e)), !0 === t && this.emitConversationUpdate(!0, !1)), o && n.type === D.CONV_TOPIC) {
              var i = n.unreadCount,
                c = n.groupAtInfoList,
                u = this.getModule(io),
                l = e.replace(D.CONV_GROUP, "");
              u.onConversationProxy({
                topicID: l,
                unreadCount: i,
                groupAtInfoList: c
              });
            }
            return o;
          }
        }
      }, {
        key: "updateReadReceiptInfo",
        value: function value(e) {
          var t = this,
            o = e.userID,
            n = void 0 === o ? void 0 : o,
            a = e.groupID,
            s = void 0 === a ? void 0 : a,
            r = e.readReceiptList;
          if (!Vt(r)) {
            var i = [];
            if (Ze(n)) {
              if (!Ze(s)) {
                var c = "".concat(D.CONV_GROUP).concat(s);
                r.forEach(function (e) {
                  var o = e.tinyID,
                    n = e.clientTime,
                    a = e.random,
                    r = e.readCount,
                    u = e.unreadCount,
                    l = "".concat(o, "-").concat(n, "-").concat(a),
                    d = t._messageListHandler.getLocalMessage(c, l),
                    p = {
                      groupID: s,
                      messageID: l,
                      readCount: 0,
                      unreadCount: 0
                    };
                  d && ($e(r) && (d.readReceiptInfo.readCount = r, p.readCount = r), $e(u) && (d.readReceiptInfo.unreadCount = u, p.unreadCount = u), i.push(p));
                });
              }
            } else {
              var u = "".concat(D.CONV_C2C).concat(n);
              r.forEach(function (e) {
                var o = e.tinyID,
                  a = e.clientTime,
                  s = e.random,
                  r = "".concat(o, "-").concat(a, "-").concat(s),
                  c = t._messageListHandler.getLocalMessage(u, r);
                if (c && !c.isPeerRead) {
                  c.isPeerRead = !0;
                  var l = {
                    userID: n,
                    messageID: r,
                    isPeerRead: !0
                  };
                  i.push(l);
                }
              });
            }
            i.length > 0 && this.emitOuterEvent(S.MESSAGE_READ_RECEIPT_RECEIVED, i);
          }
        }
      }, {
        key: "recomputeGroupUnreadCount",
        value: function value(e) {
          var t = e.conversationID,
            o = e.count,
            n = this.getLocalConversation(t);
          if (n) {
            var a = n.unreadCount,
              s = a - o;
            s < 0 && (s = 0), n.unreadCount = s, we.log("".concat(this._className, ".recomputeGroupUnreadCount from ").concat(a, " to ").concat(s, ", conversationID:").concat(t));
          }
        }
      }, {
        key: "updateIsRead",
        value: function value(e) {
          var t = this.getLocalConversation(e),
            o = this.getLocalMessageList(e);
          if (t && 0 !== o.length && !Dt(t.type)) {
            for (var n = [], a = 0, s = o.length; a < s; a++) {
              "in" !== o[a].flow ? "out" !== o[a].flow || o[a].isRead || o[a].setIsRead(!0) : n.push(o[a]);
            }
            var r = 0;
            if (t.type === D.CONV_C2C) {
              var i = n.slice(-t.unreadCount).filter(function (e) {
                return e.isRevoked;
              }).length;
              r = n.length - t.unreadCount - i;
            } else r = n.length - t.unreadCount;
            for (var c = 0; c < r && !n[c].isRead; c++) {
              n[c].setIsRead(!0);
            }
          }
        }
      }, {
        key: "deleteGroupAtTips",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".deleteGroupAtTips");
          we.log("".concat(o));
          var n = this._conversationMap.get(e);
          if (!n) return Promise.resolve();
          var a = n.groupAtInfoList;
          if (0 === a.length) return Promise.resolve();
          var s = this.getMyUserID();
          return this.request({
            protocolName: Qo,
            requestData: {
              messageListToDelete: a.map(function (e) {
                return {
                  from: e.from,
                  to: s,
                  messageSeq: e.__sequence,
                  messageRandom: e.__random,
                  groupID: Ze(e.topicID) ? e.groupID : e.topicID
                };
              })
            }
          }).then(function () {
            if (we.log("".concat(o, " ok. count:").concat(a.length)), n.clearGroupAtInfoList(), e.startsWith(D.CONV_GROUP)) {
              var s = e.replace(D.CONV_GROUP, "");
              if (Tt(s)) t.getModule(io).onConversationProxy({
                topicID: s,
                groupAtInfoList: []
              });
            }
            return Promise.resolve();
          }).catch(function (e) {
            return we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "appendToMessageList",
        value: function value(e) {
          this._messageListHandler.pushIn(e);
        }
      }, {
        key: "setMessageRandom",
        value: function value(e) {
          this.singlyLinkedList.set(e.random);
        }
      }, {
        key: "deleteMessageRandom",
        value: function value(e) {
          this.singlyLinkedList.delete(e.random);
        }
      }, {
        key: "pushIntoMessageList",
        value: function value(e, t, o) {
          return !(!this._messageListHandler.pushIn(t, o) || this._isMessageFromCurrentInstance(t) && !o) && (e.push(t), !0);
        }
      }, {
        key: "_isMessageFromCurrentInstance",
        value: function value(e) {
          return this.singlyLinkedList.has(e.random);
        }
      }, {
        key: "revoke",
        value: function value(e, t, o) {
          return this._messageListHandler.revoke(e, t, o);
        }
      }, {
        key: "getPeerReadTime",
        value: function value(e) {
          return this._peerReadTimeMap.get(e);
        }
      }, {
        key: "recordPeerReadTime",
        value: function value(e, t) {
          this._peerReadTimeMap.has(e) ? this._peerReadTimeMap.get(e) < t && this._peerReadTimeMap.set(e, t) : this._peerReadTimeMap.set(e, t);
        }
      }, {
        key: "updateMessageIsPeerReadProperty",
        value: function value(e, t) {
          if (e.startsWith(D.CONV_C2C) && t > 0) {
            var o = this._messageListHandler.updateMessageIsPeerReadProperty(e, t);
            if (o.length > 0 && this.emitOuterEvent(S.MESSAGE_READ_BY_PEER, o), this._conversationMap.has(e)) {
              var n = this._conversationMap.get(e).lastMessage;
              Vt(n) || n.fromAccount === this.getMyUserID() && n.lastTime <= t && !n.isPeerRead && (n.isPeerRead = !0, this.emitConversationUpdate(!0, !1));
            }
          }
        }
      }, {
        key: "updateMessageIsModifiedProperty",
        value: function value(e) {
          this._messageListHandler.updateMessageIsModifiedProperty(e);
        }
      }, {
        key: "setCompleted",
        value: function value(e) {
          we.log("".concat(this._className, ".setCompleted. conversationID:").concat(e)), this._completedMap.set(e, !0);
        }
      }, {
        key: "updateRoamingMessageKeyAndTime",
        value: function value(e, t, o) {
          this._roamingMessageKeyAndTimeMap.set(e, {
            messageKey: t,
            lastMessageTime: o
          });
        }
      }, {
        key: "updateRoamingMessageSequence",
        value: function value(e, t) {
          this._roamingMessageSequenceMap.set(e, t);
        }
      }, {
        key: "getConversationList",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getConversationList"),
            n = "pagingStatus:".concat(this._pagingStatus, ", local conversation count:").concat(this._conversationMap.size, ", options:").concat(e);
          if (we.log("".concat(o, ". ").concat(n)), this._pagingStatus === Wt.REJECTED) {
            var a = new va(ya.GET_CONVERSATION_LIST);
            return a.setMessage(n), this._syncConversationList().then(function () {
              a.setNetworkType(t.getNetworkType()).end();
              var o = t._getConversationList(e);
              return ba({
                conversationList: o
              });
            }).catch(function (e) {
              return t.probeNetwork().then(function (t) {
                var o = m(t, 2),
                  n = o[0],
                  s = o[1];
                a.setError(e, n, s).end();
              }), we.error("".concat(o, " failed. error:"), e), ja(e);
            });
          }
          if (0 === this._conversationMap.size) {
            var s = new va(ya.GET_CONVERSATION_LIST);
            return s.setMessage(n), this._syncConversationList().then(function () {
              s.setNetworkType(t.getNetworkType()).end();
              var o = t._getConversationList(e);
              return ba({
                conversationList: o
              });
            }).catch(function (e) {
              return t.probeNetwork().then(function (t) {
                var o = m(t, 2),
                  n = o[0],
                  a = o[1];
                s.setError(e, n, a).end();
              }), we.error("".concat(o, " failed. error:"), e), ja(e);
            });
          }
          var r = this._getConversationList(e);
          return we.log("".concat(o, ". returned conversation count:").concat(r.length)), Ya({
            conversationList: r
          });
        }
      }, {
        key: "_getConversationList",
        value: function value(e) {
          var t = this;
          if (Ze(e)) return this.getLocalConversationList();
          if (Qe(e)) {
            var o = [];
            return e.forEach(function (e) {
              if (t._conversationMap.has(e)) {
                var n = t.getLocalConversation(e);
                o.push(n);
              }
            }), o;
          }
        }
      }, {
        key: "_handleC2CPeerReadTime",
        value: function value() {
          var e,
            t = C(this._conversationMap);
          try {
            for (t.s(); !(e = t.n()).done;) {
              var o = m(e.value, 2),
                n = o[0],
                a = o[1];
              a.type === D.CONV_C2C && (we.debug("".concat(this._className, "._handleC2CPeerReadTime conversationID:").concat(n, " peerReadTime:").concat(a.peerReadTime)), this.recordPeerReadTime(n, a.peerReadTime));
            }
          } catch (s) {
            t.e(s);
          } finally {
            t.f();
          }
        }
      }, {
        key: "getConversationProfile",
        value: function value(e) {
          var t,
            o = this;
          if ((t = this._conversationMap.has(e) ? this._conversationMap.get(e) : new ps({
            conversationID: e,
            type: e.slice(0, 3) === D.CONV_C2C ? D.CONV_C2C : D.CONV_GROUP
          }))._isInfoCompleted || t.type === D.CONV_SYSTEM) return Ya({
            conversation: t
          });
          var n = new va(ya.GET_CONVERSATION_PROFILE),
            a = "".concat(this._className, ".getConversationProfile");
          return we.log("".concat(a, ". conversationID:").concat(e, " remark:").concat(t.remark, " lastMessage:"), t.lastMessage), this._updateUserOrGroupProfileCompletely(t).then(function (s) {
            n.setNetworkType(o.getNetworkType()).setMessage("conversationID:".concat(e, " unreadCount:").concat(s.data.conversation.unreadCount)).end();
            var r = o.getModule(so);
            if (r && t.type === D.CONV_C2C) {
              var i = e.replace(D.CONV_C2C, "");
              if (r.isMyFriend(i)) {
                var c = r.getFriendRemark(i);
                t.remark !== c && (t.remark = c, we.log("".concat(a, ". conversationID:").concat(e, " patch remark:").concat(t.remark)));
              }
            }
            return we.log("".concat(a, " ok. conversationID:").concat(e)), s;
          }).catch(function (t) {
            return o.probeNetwork().then(function (o) {
              var a = m(o, 2),
                s = a[0],
                r = a[1];
              n.setError(t, s, r).setMessage("conversationID:".concat(e)).end();
            }), we.error("".concat(a, " failed. error:"), t), ja(t);
          });
        }
      }, {
        key: "_updateUserOrGroupProfileCompletely",
        value: function value(e) {
          var t = this;
          return e.type === D.CONV_C2C ? this.getModule(oo).getUserProfile({
            userIDList: [e.toAccount]
          }).then(function (o) {
            var n = o.data;
            return 0 === n.length ? ja(new Ba({
              code: na.USER_OR_GROUP_NOT_FOUND,
              message: aa.USER_OR_GROUP_NOT_FOUND
            })) : (e.userProfile = n[0], e._isInfoCompleted = !0, t._unshiftConversation(e), Ya({
              conversation: e
            }));
          }) : this.getModule(ao).getGroupProfile({
            groupID: e.toAccount
          }).then(function (o) {
            return e.groupProfile = o.data.group, e._isInfoCompleted = !0, t._unshiftConversation(e), Ya({
              conversation: e
            });
          });
        }
      }, {
        key: "_unshiftConversation",
        value: function value(e) {
          e instanceof ps && !this._conversationMap.has(e.conversationID) && (this._conversationMap = new Map([[e.conversationID, e]].concat(M(this._conversationMap))), this._setStorageConversationList(), this.emitConversationUpdate(!0, !1));
        }
      }, {
        key: "_onProfileUpdated",
        value: function value(e) {
          var t = this;
          e.data.forEach(function (e) {
            var o = e.userID;
            if (o === t.getMyUserID()) t._onMyProfileModified({
              latestNick: e.nick,
              latestAvatar: e.avatar
            });else {
              var n = t._conversationMap.get("".concat(D.CONV_C2C).concat(o));
              n && (n.userProfile = e);
            }
          });
        }
      }, {
        key: "deleteConversation",
        value: function value(e) {
          var t = this,
            o = {
              fromAccount: this.getMyUserID(),
              toAccount: void 0,
              type: void 0
            };
          if (!this._conversationMap.has(e)) {
            var n = new Ba({
              code: na.CONVERSATION_NOT_FOUND,
              message: aa.CONVERSATION_NOT_FOUND
            });
            return ja(n);
          }
          switch (this._conversationMap.get(e).type) {
            case D.CONV_C2C:
              o.type = 1, o.toAccount = e.replace(D.CONV_C2C, "");
              break;
            case D.CONV_GROUP:
              o.type = 2, o.toGroupID = e.replace(D.CONV_GROUP, "");
              break;
            case D.CONV_SYSTEM:
              return this.getModule(ao).deleteGroupSystemNotice({
                messageList: this._messageListHandler.getLocalMessageList(e)
              }), this.deleteLocalConversation(e), Ya({
                conversationID: e
              });
            default:
              var a = new Ba({
                code: na.CONVERSATION_UN_RECORDED_TYPE,
                message: aa.CONVERSATION_UN_RECORDED_TYPE
              });
              return ja(a);
          }
          var s = new va(ya.DELETE_CONVERSATION);
          s.setMessage("conversationID:".concat(e));
          var r = "".concat(this._className, ".deleteConversation");
          return we.log("".concat(r, ". conversationID:").concat(e)), this.setMessageRead({
            conversationID: e
          }).then(function () {
            return t.request({
              protocolName: Jo,
              requestData: o
            });
          }).then(function () {
            return s.setNetworkType(t.getNetworkType()).end(), we.log("".concat(r, " ok")), t.deleteLocalConversation(e), Ya({
              conversationID: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.error("".concat(r, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "pinConversation",
        value: function value(e) {
          var t = this,
            o = e.conversationID,
            n = e.isPinned;
          if (!this._conversationMap.has(o)) return ja({
            code: na.CONVERSATION_NOT_FOUND,
            message: aa.CONVERSATION_NOT_FOUND
          });
          var a = this.getLocalConversation(o);
          if (a.isPinned === n) return Ya({
            conversationID: o
          });
          var s = new va(ya.PIN_CONVERSATION);
          s.setMessage("conversationID:".concat(o, " isPinned:").concat(n));
          var r = "".concat(this._className, ".pinConversation");
          we.log("".concat(r, ". conversationID:").concat(o, " isPinned:").concat(n));
          var i = null;
          return Ct(o) ? i = {
            type: 1,
            toAccount: o.replace(D.CONV_C2C, "")
          } : St(o) && (i = {
            type: 2,
            groupID: o.replace(D.CONV_GROUP, "")
          }), this.request({
            protocolName: Xo,
            requestData: {
              fromAccount: this.getMyUserID(),
              operationType: !0 === n ? 1 : 2,
              itemList: [i]
            }
          }).then(function () {
            return s.setNetworkType(t.getNetworkType()).end(), we.log("".concat(r, " ok")), a.isPinned !== n && (a.isPinned = n, t._sortConversationListAndEmitEvent()), ba({
              conversationID: o
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.error("".concat(r, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "setMessageRemindType",
        value: function value(e) {
          return this._messageRemindHandler.set(e);
        }
      }, {
        key: "patchMessageRemindType",
        value: function value(e) {
          var t = e.ID,
            o = e.isC2CConversation,
            n = e.messageRemindType,
            a = !1,
            s = this.getLocalConversation(o ? "".concat(D.CONV_C2C).concat(t) : "".concat(D.CONV_GROUP).concat(t));
          return s && s.messageRemindType !== n && (s.messageRemindType = n, a = !0), a;
        }
      }, {
        key: "onC2CMessageRemindTypeSynced",
        value: function value(e) {
          var t = this;
          we.debug("".concat(this._className, ".onC2CMessageRemindTypeSynced options:"), e), e.dataList.forEach(function (e) {
            if (!Vt(e.muteNotificationsSync)) {
              var o,
                n = e.muteNotificationsSync,
                a = n.to,
                s = n.updateSequence,
                r = n.muteFlag;
              t._messageRemindHandler.setUpdateSequence(s), 0 === r ? o = D.MSG_REMIND_ACPT_AND_NOTE : 1 === r ? o = D.MSG_REMIND_DISCARD : 2 === r && (o = D.MSG_REMIND_ACPT_NOT_NOTE);
              var i = 0;
              t.patchMessageRemindType({
                ID: a,
                isC2CConversation: !0,
                messageRemindType: o
              }) && (i += 1), we.log("".concat(t._className, ".onC2CMessageRemindTypeSynced updateCount:").concat(i)), i >= 1 && t.emitConversationUpdate(!0, !1);
            }
          });
        }
      }, {
        key: "deleteLocalConversation",
        value: function value(e) {
          var t = this._conversationMap.has(e);
          we.log("".concat(this._className, ".deleteLocalConversation conversationID:").concat(e, " has:").concat(t)), t && (this._conversationMap.delete(e), this._roamingMessageKeyAndTimeMap.has(e) && this._roamingMessageKeyAndTimeMap.delete(e), this._roamingMessageSequenceMap.has(e) && this._roamingMessageSequenceMap.delete(e), this._setStorageConversationList(), this._messageListHandler.removeByConversationID(e), this._completedMap.delete(e), this.emitConversationUpdate(!0, !1));
        }
      }, {
        key: "isMessageSentByCurrentInstance",
        value: function value(e) {
          return !(!this._messageListHandler.hasLocalMessage(e.conversationID, e.ID) && !this.singlyLinkedList.has(e.random));
        }
      }, {
        key: "modifyMessageList",
        value: function value(e) {
          if (e.startsWith(D.CONV_C2C) && this._conversationMap.has(e)) {
            var t = this._conversationMap.get(e),
              o = Date.now();
            this._messageListHandler.modifyMessageSentByPeer({
              conversationID: e,
              latestNick: t.userProfile.nick,
              latestAvatar: t.userProfile.avatar
            });
            var n = this.getModule(oo).getNickAndAvatarByUserID(this.getMyUserID());
            this._messageListHandler.modifyMessageSentByMe({
              conversationID: e,
              latestNick: n.nick,
              latestAvatar: n.avatar
            }), we.log("".concat(this._className, ".modifyMessageList conversationID:").concat(e, " cost ").concat(Date.now() - o, " ms"));
          }
        }
      }, {
        key: "updateUserProfileSpecifiedKey",
        value: function value(e) {
          we.log("".concat(this._className, ".updateUserProfileSpecifiedKey options:"), e);
          var t = e.conversationID,
            o = e.nick,
            n = e.avatar;
          if (this._conversationMap.has(t)) {
            var a = this._conversationMap.get(t).userProfile;
            ze(o) && a.nick !== o && (a.nick = o), ze(n) && a.avatar !== n && (a.avatar = n), this.emitConversationUpdate(!0, !1);
          }
        }
      }, {
        key: "_onMyProfileModified",
        value: function value(e) {
          var o = this,
            n = this.getLocalConversationList(),
            a = Date.now();
          n.forEach(function (n) {
            o.modifyMessageSentByMe(t({
              conversationID: n.conversationID
            }, e));
          }), we.log("".concat(this._className, "._onMyProfileModified. modify all messages sent by me, cost ").concat(Date.now() - a, " ms"));
        }
      }, {
        key: "modifyMessageSentByMe",
        value: function value(e) {
          this._messageListHandler.modifyMessageSentByMe(e);
        }
      }, {
        key: "getLatestMessageSentByMe",
        value: function value(e) {
          return this._messageListHandler.getLatestMessageSentByMe(e);
        }
      }, {
        key: "modifyMessageSentByPeer",
        value: function value(e) {
          this._messageListHandler.modifyMessageSentByPeer(e);
        }
      }, {
        key: "getLatestMessageSentByPeer",
        value: function value(e) {
          return this._messageListHandler.getLatestMessageSentByPeer(e);
        }
      }, {
        key: "pushIntoNoticeResult",
        value: function value(e, t) {
          return !(!this._messageListHandler.pushIn(t) || this.singlyLinkedList.has(t.random)) && (e.push(t), !0);
        }
      }, {
        key: "getGroupLocalLastMessageSequence",
        value: function value(e) {
          return this._messageListHandler.getGroupLocalLastMessageSequence(e);
        }
      }, {
        key: "checkAndPatchRemark",
        value: function value() {
          var e = Promise.resolve();
          if (0 === this._conversationMap.size) return e;
          var t = this.getModule(so);
          if (!t) return e;
          var o = M(this._conversationMap.values()).filter(function (e) {
            return e.type === D.CONV_C2C;
          });
          if (0 === o.length) return e;
          var n = 0;
          return o.forEach(function (e) {
            var o = e.conversationID.replace(D.CONV_C2C, "");
            if (t.isMyFriend(o)) {
              var a = t.getFriendRemark(o);
              e.remark !== a && (e.remark = a, n += 1);
            }
          }), we.log("".concat(this._className, ".checkAndPatchRemark. c2c conversation count:").concat(o.length, ", patched count:").concat(n)), e;
        }
      }, {
        key: "updateTopicConversation",
        value: function value(e) {
          this._updateLocalConversationList({
            conversationOptionsList: e,
            isFromGetConversations: !0
          });
        }
      }, {
        key: "sendReadReceipt",
        value: function value(e) {
          var t = e[0],
            o = null;
          return t.conversationType === D.CONV_C2C ? o = this._moduleManager.getModule(no) : t.conversationType === D.CONV_GROUP && (o = this._moduleManager.getModule(ao)), o ? o.sendReadReceipt(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "getReadReceiptList",
        value: function value(e) {
          var t = e[0],
            o = null;
          return t.conversationType === D.CONV_C2C ? o = this._moduleManager.getModule(no) : t.conversationType === D.CONV_GROUP && (o = this._moduleManager.getModule(ao)), o ? o.getReadReceiptList(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._pagingStatus = Wt.NOT_START, this._messageListHandler.reset(), this._messageRemindHandler.reset(), this._roamingMessageKeyAndTimeMap.clear(), this._roamingMessageSequenceMap.clear(), this.singlyLinkedList.reset(), this._peerReadTimeMap.clear(), this._completedMap.clear(), this._conversationMap.clear(), this._pagingTimeStamp = 0, this._pagingStartIndex = 0, this._pagingPinnedTimeStamp = 0, this._pagingPinnedStartIndex = 0, this._remoteGroupReadSequenceMap.clear(), this.resetReady();
        }
      }]), a;
    }(Do),
    hs = function () {
      function e(t) {
        n(this, e), this._groupModule = t, this._className = "GroupTipsHandler", this._cachedGroupTipsMap = new Map(), this._checkCountMap = new Map(), this.MAX_CHECK_COUNT = 4, this._getTopicPendingMap = new Map();
      }
      return s(e, [{
        key: "onCheckTimer",
        value: function value(e) {
          e % 1 == 0 && this._cachedGroupTipsMap.size > 0 && this._checkCachedGroupTips();
        }
      }, {
        key: "_checkCachedGroupTips",
        value: function value() {
          var e = this;
          this._cachedGroupTipsMap.forEach(function (t, o) {
            var n = e._checkCountMap.get(o),
              a = e._groupModule.hasLocalGroup(o);
            we.log("".concat(e._className, "._checkCachedGroupTips groupID:").concat(o, " hasLocalGroup:").concat(a, " checkCount:").concat(n)), a ? (e._notifyCachedGroupTips(o), e._checkCountMap.delete(o), e._groupModule.deleteUnjoinedAVChatRoom(o)) : n >= e.MAX_CHECK_COUNT ? (e._deleteCachedGroupTips(o), e._checkCountMap.delete(o)) : (n++, e._checkCountMap.set(o, n));
          });
        }
      }, {
        key: "onNewGroupTips",
        value: function value(e) {
          we.debug("".concat(this._className, ".onReceiveGroupTips count:").concat(e.dataList.length));
          var t = this.newGroupTipsStoredAndSummary(e),
            o = t.eventDataList,
            n = t.result,
            a = t.AVChatRoomMessageList;
          (a.length > 0 && this._groupModule.onAVChatRoomMessage(a), o.length > 0) && (this._groupModule.updateNextMessageSeq(o), this._groupModule.getModule(co).onNewMessage({
            conversationOptionsList: o,
            isInstantMessage: !0
          }));
          n.length > 0 && (this._groupModule.emitOuterEvent(S.MESSAGE_RECEIVED, n), this.handleMessageList(n));
        }
      }, {
        key: "newGroupTipsStoredAndSummary",
        value: function value(e) {
          for (var o = this, n = e.event, a = e.dataList, s = null, r = [], i = [], c = {}, u = [], l = function l(e, _l) {
              var d = Mt(a[e]),
                p = d.groupProfile,
                g = p.groupID,
                _ = p.communityType,
                h = void 0 === _ ? 0 : _,
                f = p.topicID,
                m = void 0 === f ? void 0 : f,
                M = void 0,
                v = 2 === h && !Vt(m);
              if (v) {
                M = D.CONV_TOPIC, d.to = m;
                var y = o._groupModule.getModule(io);
                y.hasLocalTopic(g, m) || o._getTopicPendingMap.has(m) || (o._getTopicPendingMap.set(m, 1), y.getTopicList({
                  groupID: g,
                  topicIDList: [m]
                }).finally(function () {
                  o._getTopicPendingMap.delete(m);
                }));
              }
              if (2 === h && Vt(m)) return "continue";
              var I = o._groupModule.hasLocalGroup(g);
              if (!I && o._groupModule.isUnjoinedAVChatRoom(g)) return "continue";
              if (!I && !v) return o._cacheGroupTipsAndProbe({
                groupID: g,
                event: n,
                item: d
              }), "continue";
              if (o._groupModule.isMessageFromOrToAVChatroom(g)) return d.event = n, u.push(d), "continue";
              d.currentUser = o._groupModule.getMyUserID(), d.conversationType = D.CONV_GROUP, (s = new wa(d)).setElement({
                type: D.MSG_GRP_TIP,
                content: t(t({}, d.elements), {}, {
                  groupProfile: d.groupProfile
                })
              }), s.isSystemMessage = !1;
              var E = o._groupModule.getModule(co),
                T = s,
                C = T.conversationID,
                S = T.sequence;
              if (6 === n) s._onlineOnlyFlag = !0, i.push(s);else if (!E.pushIntoNoticeResult(i, s)) return "continue";
              if (6 === n && E.getLocalConversation(C)) return "continue";
              6 !== n && o._groupModule.getModule(Co).addMessageSequence({
                key: pa,
                message: s
              });
              var N = E.isRemoteRead({
                conversationID: C,
                sequence: S
              });
              if (Ze(c[C])) {
                var A = 0;
                "in" === s.flow && (s._isExcludedFromUnreadCount || s._onlineOnlyFlag || N || (A = 1)), c[C] = r.push({
                  conversationID: C,
                  unreadCount: A,
                  type: Ze(M) ? s.conversationType : M,
                  subType: s.conversationSubType,
                  lastMessage: s._isExcludedFromLastMessage ? "" : s
                }) - 1;
              } else {
                var O = c[C];
                r[O].type = s.conversationType, r[O].subType = s.conversationSubType, r[O].lastMessage = s._isExcludedFromLastMessage ? "" : s, "in" === s.flow && (s._isExcludedFromUnreadCount || s._onlineOnlyFlag || N || r[O].unreadCount++);
              }
            }, d = 0, p = a.length; d < p; d++) {
            l(d);
          }
          return {
            eventDataList: r,
            result: i,
            AVChatRoomMessageList: u
          };
        }
      }, {
        key: "handleMessageList",
        value: function value(e) {
          var t = this;
          e.forEach(function (e) {
            switch (e.payload.operationType) {
              case 1:
                t._onNewMemberComeIn(e);
                break;
              case 2:
                t._onMemberQuit(e);
                break;
              case 3:
                t._onMemberKickedOut(e);
                break;
              case 4:
                t._onMemberSetAdmin(e);
                break;
              case 5:
                t._onMemberCancelledAdmin(e);
                break;
              case 6:
                t._onGroupProfileModified(e);
                break;
              case 7:
                t._onMemberInfoModified(e);
                break;
              case 8:
                t._onTopicProfileUpdated(e);
                break;
              default:
                we.warn("".concat(t._className, ".handleMessageList unknown operationType:").concat(e.payload.operationType));
            }
          });
        }
      }, {
        key: "_onNewMemberComeIn",
        value: function value(e) {
          var t = e.payload,
            o = t.memberNum,
            n = t.groupProfile.groupID,
            a = this._groupModule.getLocalGroupProfile(n);
          a && $e(o) && a.memberCount !== o && (a.memberCount = o, this._updateConversationGroupProfile(a));
        }
      }, {
        key: "_onMemberQuit",
        value: function value(e) {
          var t = e.payload,
            o = t.memberNum,
            n = t.groupProfile.groupID,
            a = this._groupModule.getLocalGroupProfile(n);
          a && $e(o) && a.memberCount !== o && (a.memberCount = o, this._updateConversationGroupProfile(a)), this._groupModule.getModule(ro).deleteLocalGroupMembers(n, e.payload.userIDList);
        }
      }, {
        key: "_onMemberKickedOut",
        value: function value(e) {
          var t = e.payload,
            o = t.memberNum,
            n = t.groupProfile.groupID,
            a = this._groupModule.getLocalGroupProfile(n);
          a && $e(o) && a.memberCount !== o && (a.memberCount = o, this._updateConversationGroupProfile(a)), this._groupModule.getModule(ro).deleteLocalGroupMembers(n, e.payload.userIDList);
        }
      }, {
        key: "_updateConversationGroupProfile",
        value: function value(e) {
          this._groupModule.getModule(co).updateConversationGroupProfile([e]);
        }
      }, {
        key: "_onMemberSetAdmin",
        value: function value(e) {
          var t = e.payload.groupProfile.groupID,
            o = e.payload.userIDList,
            n = this._groupModule.getModule(ro);
          o.forEach(function (e) {
            var o = n.getLocalGroupMemberInfo(t, e);
            o && o.updateRole(D.GRP_MBR_ROLE_ADMIN);
          });
        }
      }, {
        key: "_onMemberCancelledAdmin",
        value: function value(e) {
          var t = e.payload.groupProfile.groupID,
            o = e.payload.userIDList,
            n = this._groupModule.getModule(ro);
          o.forEach(function (e) {
            var o = n.getLocalGroupMemberInfo(t, e);
            o && o.updateRole(D.GRP_MBR_ROLE_MEMBER);
          });
        }
      }, {
        key: "_onGroupProfileModified",
        value: function value(e) {
          var t = this,
            o = e.payload,
            n = o.newGroupProfile,
            a = o.groupProfile.groupID,
            s = this._groupModule.getLocalGroupProfile(a);
          Object.keys(n).forEach(function (e) {
            switch (e) {
              case "ownerID":
                t._ownerChanged(s, n);
                break;
              case "muteAllMembers":
                s.muteAllMembers = n.muteAllMembers;
                break;
              default:
                s[e] = n[e];
            }
          });
          var r = !s.isSupportTopic;
          this._groupModule.emitGroupListUpdate(!0, r);
        }
      }, {
        key: "_ownerChanged",
        value: function value(e, t) {
          var o = e.groupID,
            n = this._groupModule.getLocalGroupProfile(o),
            a = this._groupModule.getMyUserID();
          if (a === t.ownerID) {
            n.updateGroup({
              selfInfo: {
                role: D.GRP_MBR_ROLE_OWNER
              }
            });
            var s = this._groupModule.getModule(ro),
              r = s.getLocalGroupMemberInfo(o, a),
              i = this._groupModule.getLocalGroupProfile(o).ownerID,
              c = s.getLocalGroupMemberInfo(o, i);
            r && r.updateRole(D.GRP_MBR_ROLE_OWNER), c && c.updateRole(D.GRP_MBR_ROLE_MEMBER);
          }
        }
      }, {
        key: "_onMemberInfoModified",
        value: function value(e) {
          var t = e.to,
            o = e.payload,
            n = o.groupProfile,
            a = o.memberList,
            s = n.groupID;
          Tt(t) && this._updateTopicMuteTime(e);
          var r = this._groupModule.getModule(ro);
          a.forEach(function (e) {
            var t = r.getLocalGroupMemberInfo(s, e.userID);
            t && $e(e.muteTime) && t.updateMuteUntil(e.muteTime);
          });
        }
      }, {
        key: "_updateTopicMuteTime",
        value: function value(e) {
          var t = e.to,
            o = e.payload,
            n = o.groupProfile,
            a = o.memberList,
            s = void 0 === a ? [] : a,
            r = this._groupModule.getModule(io),
            i = n.groupID,
            c = r.getLocalTopic(i, t);
          if (c) {
            for (var u = !1, l = 0; l < s.length; l++) {
              var d = s[l];
              if (d.userID === this._groupModule.getMyUserID() && d.muteTime >= 0) {
                c.updateSelfInfo({
                  muteTime: d.muteTime
                }), u = !0;
                break;
              }
            }
            u && this._groupModule.emitOuterEvent(S.TOPIC_UPDATED, {
              groupID: i,
              topic: c
            });
          }
        }
      }, {
        key: "_onTopicProfileUpdated",
        value: function value(e) {
          var o = e.payload,
            n = o.groupProfile.groupID,
            a = o.newTopicInfo;
          this._groupModule.getModule(io).onTopicProfileUpdated(t({
            groupID: n,
            topicID: e.to
          }, a));
        }
      }, {
        key: "_cacheGroupTips",
        value: function value(e, t) {
          this._cachedGroupTipsMap.has(e) || this._cachedGroupTipsMap.set(e, []), this._cachedGroupTipsMap.get(e).push(t);
        }
      }, {
        key: "_deleteCachedGroupTips",
        value: function value(e) {
          this._cachedGroupTipsMap.has(e) && this._cachedGroupTipsMap.delete(e);
        }
      }, {
        key: "_notifyCachedGroupTips",
        value: function value(e) {
          var t = this,
            o = this._cachedGroupTipsMap.get(e) || [];
          o.forEach(function (e) {
            t.onNewGroupTips(e);
          }), this._deleteCachedGroupTips(e), we.log("".concat(this._className, "._notifyCachedGroupTips groupID:").concat(e, " count:").concat(o.length));
        }
      }, {
        key: "_cacheGroupTipsAndProbe",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.event,
            a = e.item;
          this._cacheGroupTips(o, {
            event: n,
            dataList: [a]
          }), this._groupModule.getGroupSimplifiedInfo(o).then(function (e) {
            e.type === D.GRP_AVCHATROOM ? t._groupModule.hasLocalGroup(o) ? t._notifyCachedGroupTips(o) : t._groupModule.setUnjoinedAVChatRoom(o) : (t._groupModule.updateGroupMap([e]), t._notifyCachedGroupTips(o));
          }), this._checkCountMap.has(o) || this._checkCountMap.set(o, 0), we.log("".concat(this._className, "._cacheGroupTipsAndProbe groupID:").concat(o));
        }
      }, {
        key: "reset",
        value: function value() {
          this._cachedGroupTipsMap.clear(), this._checkCountMap.clear(), this._getTopicPendingMap.clear();
        }
      }]), e;
    }(),
    fs = function () {
      function e(t) {
        n(this, e), this._groupModule = t, this._className = "CommonGroupHandler", this.tempConversationList = null, this._cachedGroupMessageMap = new Map(), this._checkCountMap = new Map(), this.MAX_CHECK_COUNT = 4, this._getTopicPendingMap = new Map(), t.getInnerEmitterInstance().once(Ja, this._initGroupList, this);
      }
      return s(e, [{
        key: "onCheckTimer",
        value: function value(e) {
          e % 1 == 0 && this._cachedGroupMessageMap.size > 0 && this._checkCachedGroupMessage();
        }
      }, {
        key: "_checkCachedGroupMessage",
        value: function value() {
          var e = this;
          this._cachedGroupMessageMap.forEach(function (t, o) {
            var n = e._checkCountMap.get(o),
              a = e._groupModule.hasLocalGroup(o);
            we.log("".concat(e._className, "._checkCachedGroupMessage groupID:").concat(o, " hasLocalGroup:").concat(a, " checkCount:").concat(n)), a ? (e._notifyCachedGroupMessage(o), e._checkCountMap.delete(o), e._groupModule.deleteUnjoinedAVChatRoom(o)) : n >= e.MAX_CHECK_COUNT ? (e._deleteCachedGroupMessage(o), e._checkCountMap.delete(o)) : (n++, e._checkCountMap.set(o, n));
          });
        }
      }, {
        key: "_initGroupList",
        value: function value() {
          var e = this;
          we.log("".concat(this._className, "._initGroupList"));
          var t = new va(ya.GET_GROUP_LIST_IN_STORAGE),
            o = this._groupModule.getStorageGroupList();
          if (Qe(o) && o.length > 0) {
            o.forEach(function (t) {
              e._groupModule.initGroupMap(t);
            }), this._groupModule.emitGroupListUpdate(!0, !1);
            var n = this._groupModule.getLocalGroupList().length;
            t.setNetworkType(this._groupModule.getNetworkType()).setMessage("group count:".concat(n)).end();
          } else t.setNetworkType(this._groupModule.getNetworkType()).setMessage("group count:0").end();
          we.log("".concat(this._className, "._initGroupList ok"));
        }
      }, {
        key: "handleUpdateGroupLastMessage",
        value: function value(e) {
          var t = "".concat(this._className, ".handleUpdateGroupLastMessage");
          if (we.debug("".concat(t, " conversation count:").concat(e.length, ", local group count:").concat(this._groupModule.getLocalGroupList().length)), 0 !== this._groupModule.getGroupMap().size) {
            for (var o, n, a, s = !1, r = 0, i = e.length; r < i; r++) {
              (o = e[r]).type === D.CONV_GROUP && (n = o.conversationID.split(/^GROUP/)[1], (a = this._groupModule.getLocalGroupProfile(n)) && (a.lastMessage = o.lastMessage, s = !0));
            }
            s && (this._groupModule.sortLocalGroupList(), this._groupModule.emitGroupListUpdate(!0, !1));
          } else this.tempConversationList = e;
        }
      }, {
        key: "onNewGroupMessage",
        value: function value(e) {
          we.debug("".concat(this._className, ".onNewGroupMessage count:").concat(e.dataList.length));
          var t = this._newGroupMessageStoredAndSummary(e),
            o = t.conversationOptionsList,
            n = t.messageList,
            a = t.AVChatRoomMessageList;
          (a.length > 0 && this._groupModule.onAVChatRoomMessage(a), this._groupModule.filterModifiedMessage(n), o.length > 0) && (this._groupModule.updateNextMessageSeq(o), this._groupModule.getModule(co).onNewMessage({
            conversationOptionsList: o,
            isInstantMessage: !0
          }));
          var s = this._groupModule.filterUnmodifiedMessage(n);
          s.length > 0 && this._groupModule.emitOuterEvent(S.MESSAGE_RECEIVED, s), n.length = 0;
        }
      }, {
        key: "_newGroupMessageStoredAndSummary",
        value: function value(e) {
          var t = this,
            o = e.dataList,
            n = e.event,
            a = e.isInstantMessage,
            s = null,
            r = [],
            i = [],
            c = [],
            u = {},
            l = this._groupModule.getModule(_o),
            d = this._groupModule.getModule(Co),
            p = o.length;
          p > 1 && o.sort(function (e, t) {
            return e.sequence - t.sequence;
          });
          for (var g = function g(e) {
              var p = Mt(o[e]),
                g = p.groupProfile,
                _ = g.groupID,
                h = g.communityType,
                f = void 0 === h ? 0 : h,
                m = g.topicID,
                M = void 0 === m ? void 0 : m,
                v = void 0,
                y = 2 === f && !Vt(M);
              if (y) {
                v = D.CONV_TOPIC, p.to = M;
                var I = t._groupModule.getModule(io);
                I.hasLocalTopic(_, M) || t._getTopicPendingMap.has(M) || (t._getTopicPendingMap.set(M, 1), I.getTopicList({
                  groupID: _,
                  topicIDList: [M]
                }).finally(function () {
                  t._getTopicPendingMap.delete(M);
                }));
              }
              if (2 === f && Vt(M)) return "continue";
              var E = t._groupModule.hasLocalGroup(_);
              if (!E && t._groupModule.isUnjoinedAVChatRoom(_)) return "continue";
              if (!E && !y) return t._cacheGroupMessageAndProbe({
                groupID: _,
                event: n,
                item: p
              }), "continue";
              if (t._groupModule.isMessageFromOrToAVChatroom(_)) return p.event = n, c.push(p), "continue";
              p.currentUser = t._groupModule.getMyUserID(), p.conversationType = D.CONV_GROUP, p.isSystemMessage = !!p.isSystemMessage, s = new wa(p), p.elements = l.parseElements(p.elements, p.from), s.setElement(p.elements);
              var T = 1 === o[e].isModified,
                C = t._groupModule.getModule(co);
              if (C.isMessageSentByCurrentInstance(s) ? s.isModified = T : T = !1, 1 === p.onlineOnlyFlag) s._onlineOnlyFlag = !0, i.push(s);else {
                if (!C.pushIntoMessageList(i, s, T)) return "continue";
                d.addMessageSequence({
                  key: pa,
                  message: s
                }), a && s.clientTime > 0 && d.addMessageDelay(s.clientTime);
                var S = s,
                  N = S.conversationID,
                  A = S.sequence,
                  O = C.isRemoteRead({
                    conversationID: N,
                    sequence: A
                  });
                if (Ze(u[N])) {
                  var R = 0;
                  "in" === s.flow && (s._isExcludedFromUnreadCount || O || (R = 1)), u[N] = r.push({
                    conversationID: N,
                    unreadCount: R,
                    type: Ze(v) ? s.conversationType : v,
                    subType: s.conversationSubType,
                    lastMessage: s._isExcludedFromLastMessage ? "" : s
                  }) - 1;
                } else {
                  var L = u[N];
                  r[L].type = Ze(v) ? s.conversationType : v, r[L].subType = s.conversationSubType, r[L].lastMessage = s._isExcludedFromLastMessage ? "" : s, "in" === s.flow && (s._isExcludedFromUnreadCount || O || r[L].unreadCount++);
                }
              }
            }, _ = 0; _ < p; _++) {
            g(_);
          }
          return {
            conversationOptionsList: r,
            messageList: i,
            AVChatRoomMessageList: c
          };
        }
      }, {
        key: "onGroupMessageRevoked",
        value: function value(e) {
          we.debug("".concat(this._className, ".onGroupMessageRevoked nums:").concat(e.dataList.length));
          var t = this._groupModule.getModule(co),
            o = [],
            n = null;
          e.dataList.forEach(function (e) {
            var a = e.elements.revokedInfos;
            Ze(a) || a.forEach(function (e) {
              var a = Ze(e.topicID) ? "GROUP".concat(e.groupID) : "GROUP".concat(e.topicID);
              (n = t.revoke(a, e.sequence, e.random)) && o.push(n);
            });
          }), 0 !== o.length && (t.onMessageRevoked(o), this._groupModule.emitOuterEvent(S.MESSAGE_REVOKED, o));
        }
      }, {
        key: "_groupListTreeShaking",
        value: function value(e) {
          for (var t = new Map(M(this._groupModule.getGroupMap())), o = 0, n = e.length; o < n; o++) {
            t.delete(e[o].groupID);
          }
          this._groupModule.hasJoinedAVChatRoom() && this._groupModule.getJoinedAVChatRoom().forEach(function (e) {
            t.delete(e);
          });
          this._groupModule.getGroupMap().forEach(function (e, o) {
            e.isSupportTopic && t.delete(o);
          });
          for (var a = M(t.keys()), s = 0, r = a.length; s < r; s++) {
            this._groupModule.deleteGroup(a[s]);
          }
        }
      }, {
        key: "getGroupList",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getGroupList"),
            n = new va(ya.GET_GROUP_LIST);
          we.log("".concat(o));
          var a = {
              introduction: "Introduction",
              notification: "Notification",
              createTime: "CreateTime",
              ownerID: "Owner_Account",
              lastInfoTime: "LastInfoTime",
              memberNum: "MemberNum",
              maxMemberNum: "MaxMemberNum",
              joinOption: "ApplyJoinOption",
              muteAllMembers: "ShutUpAllMember"
            },
            s = ["Type", "Name", "FaceUrl", "NextMsgSeq", "LastMsgTime"],
            r = [];
          e && e.groupProfileFilter && e.groupProfileFilter.forEach(function (e) {
            a[e] && s.push(a[e]);
          });
          var i = (e || {}).isGroupWithTopicOnly,
            c = void 0 !== i && i;
          return this._pagingGetGroupList({
            limit: 50,
            offset: 0,
            groupBaseInfoFilter: s,
            groupList: r,
            isGroupWithTopicOnly: c
          }).then(function () {
            we.log("".concat(o, " ok. count:").concat(r.length, " isGroupWithTopicOnly:").concat(c)), c || t._groupListTreeShaking(r), t._groupModule.updateGroupMap(r);
            var e = t._groupModule.getLocalGroupList().length;
            n.setNetworkType(t._groupModule.getNetworkType()).setMessage("remote count:".concat(r.length, ", after tree shaking, local count:").concat(e, ", isGroupWithTopicOnly:").concat(c)).end(), t.tempConversationList && (we.log("".concat(o, " update last message with tempConversationList, count:").concat(t.tempConversationList.length)), t.handleUpdateGroupLastMessage({
              data: t.tempConversationList
            }), t.tempConversationList = null), t._groupModule.patchGroupMessageRemindType(), t._groupModule.recomputeUnreadCount(), t._groupModule.emitGroupListUpdate(!0, !c);
            var a = t._groupModule.getLocalGroupList();
            if (c) {
              var s = a.filter(function (e) {
                return !0 === e.isSupportTopic;
              });
              return ba({
                groupList: s
              });
            }
            return ba({
              groupList: a
            });
          }).catch(function (e) {
            return t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_pagingGetGroupList",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._pagingGetGroupList"),
            n = e.isCommunityRelay,
            a = void 0 !== n && n,
            s = e.isGroupWithTopicOnly,
            r = void 0 !== s && s,
            i = e.limit,
            c = e.offset,
            u = e.groupBaseInfoFilter,
            l = e.groupList;
          if (r) return this._pagingGetGroupListWithTopic({
            limit: i,
            offset: c,
            groupBaseInfoFilter: u,
            groupList: l
          });
          var d = new va(ya.PAGING_GET_GROUP_LIST);
          return this._groupModule.request({
            protocolName: Zo,
            requestData: {
              type: a ? D.GRP_COMMUNITY : void 0,
              memberAccount: this._groupModule.getMyUserID(),
              limit: i,
              offset: c,
              responseFilter: {
                groupBaseInfoFilter: u,
                selfInfoFilter: ["Role", "JoinTime", "MsgFlag", "MsgSeq"]
              }
            }
          }).then(function (e) {
            var n = e.data,
              s = n.groups,
              r = void 0 === s ? [] : s,
              p = n.totalCount;
            l.push.apply(l, M(r));
            var g = c + i,
              _ = !(p > g),
              h = "offset:".concat(c, " totalCount:").concat(p, " isCompleted:").concat(_, " ") + "currentCount:".concat(l.length, " isCommunityRelay:").concat(a);
            return d.setNetworkType(t._groupModule.getNetworkType()).setMessage("".concat(h)).end(), a || _ ? !a && _ ? (we.log("".concat(o, " start to get community list")), c = 0, t._pagingGetGroupList({
              limit: i,
              offset: c,
              groupBaseInfoFilter: u,
              groupList: l,
              isCommunityRelay: !0
            })) : a && !_ ? (c = g, t._pagingGetGroupList({
              limit: i,
              offset: c,
              groupBaseInfoFilter: u,
              groupList: l,
              isCommunityRelay: !0
            })) : (we.log("".concat(o, " ok. totalCount:").concat(l.length)), ba({
              groupList: l
            })) : (c = g, t._pagingGetGroupList({
              limit: i,
              offset: c,
              groupBaseInfoFilter: u,
              groupList: l
            }));
          }).catch(function (e) {
            return 11e3 !== e.code && t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                s = o[1];
              d.setMessage("isCommunityRelay:".concat(a)).setError(e, n, s).end();
            }), a ? (11e3 === e.code && (d = null, we.log("".concat(o, " ok. community unavailable"))), Ya({
              groupList: l
            })) : ja(e);
          });
        }
      }, {
        key: "_pagingGetGroupListWithTopic",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._pagingGetGroupListWithTopic"),
            n = e.limit,
            a = e.offset,
            s = e.groupBaseInfoFilter,
            r = e.groupList,
            i = new va(ya.PAGING_GET_GROUP_LIST_WITH_TOPIC);
          return this._groupModule.request({
            protocolName: Zo,
            requestData: {
              type: D.GRP_COMMUNITY,
              memberAccount: this._groupModule.getMyUserID(),
              limit: n,
              offset: a,
              responseFilter: {
                groupBaseInfoFilter: s,
                selfInfoFilter: ["Role", "JoinTime", "MsgFlag", "MsgSeq"]
              },
              isSupportTopic: 1
            }
          }).then(function (e) {
            var c = e.data,
              u = c.groups,
              l = void 0 === u ? [] : u,
              d = c.totalCount;
            r.push.apply(r, M(l));
            var p = a + n,
              g = !(d > p),
              _ = "offset:".concat(a, " totalCount:").concat(d, " isCompleted:").concat(g, " ") + "currentCount:".concat(r.length);
            return i.setNetworkType(t._groupModule.getNetworkType()).setMessage("".concat(_)).end(), g ? (we.log("".concat(o, " ok. totalCount:").concat(r.length)), ba({
              groupList: r
            })) : (a = p, t._pagingGetGroupListWithTopic({
              limit: n,
              offset: a,
              groupBaseInfoFilter: s,
              groupList: r
            }));
          }).catch(function (e) {
            return t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              i.setError(e, n, a).end();
            }), ja(e);
          });
        }
      }, {
        key: "_cacheGroupMessage",
        value: function value(e, t) {
          this._cachedGroupMessageMap.has(e) || this._cachedGroupMessageMap.set(e, []), this._cachedGroupMessageMap.get(e).push(t);
        }
      }, {
        key: "_deleteCachedGroupMessage",
        value: function value(e) {
          this._cachedGroupMessageMap.has(e) && this._cachedGroupMessageMap.delete(e);
        }
      }, {
        key: "_notifyCachedGroupMessage",
        value: function value(e) {
          var t = this,
            o = this._cachedGroupMessageMap.get(e) || [];
          o.forEach(function (e) {
            t.onNewGroupMessage(e);
          }), this._deleteCachedGroupMessage(e), we.log("".concat(this._className, "._notifyCachedGroupMessage groupID:").concat(e, " count:").concat(o.length));
        }
      }, {
        key: "_cacheGroupMessageAndProbe",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.event,
            a = e.item;
          this._cacheGroupMessage(o, {
            event: n,
            dataList: [a]
          }), this._groupModule.getGroupSimplifiedInfo(o).then(function (e) {
            e.type === D.GRP_AVCHATROOM ? t._groupModule.hasLocalGroup(o) ? t._notifyCachedGroupMessage(o) : t._groupModule.setUnjoinedAVChatRoom(o) : (t._groupModule.updateGroupMap([e]), t._notifyCachedGroupMessage(o));
          }), this._checkCountMap.has(o) || this._checkCountMap.set(o, 0), we.log("".concat(this._className, "._cacheGroupMessageAndProbe groupID:").concat(o));
        }
      }, {
        key: "reset",
        value: function value() {
          this._cachedGroupMessageMap.clear(), this._checkCountMap.clear(), this._getTopicPendingMap.clear(), this._groupModule.getInnerEmitterInstance().once(Ja, this._initGroupList, this);
        }
      }]), e;
    }(),
    ms = {
      1: "init",
      2: "modify",
      3: "clear",
      4: "delete"
    },
    Ms = function () {
      function e(t) {
        n(this, e), this._groupModule = t, this._className = "GroupAttributesHandler", this._groupAttributesMap = new Map(), this.CACHE_EXPIRE_TIME = 3e4, this._groupModule.getInnerEmitterInstance().on(Xa, this._onCloudConfigUpdated, this);
      }
      return s(e, [{
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this._groupModule.getCloudConfig("grp_attr_cache_time");
          Ze(e) || (this.CACHE_EXPIRE_TIME = Number(e));
        }
      }, {
        key: "updateLocalMainSequenceOnReconnected",
        value: function value() {
          this._groupAttributesMap.forEach(function (e) {
            e.localMainSequence = 0;
          });
        }
      }, {
        key: "onGroupAttributesUpdated",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.groupAttributeOption,
            a = n.mainSequence,
            s = n.hasChangedAttributeInfo,
            r = n.groupAttributeList,
            i = void 0 === r ? [] : r,
            c = n.operationType;
          if (we.log("".concat(this._className, ".onGroupAttributesUpdated. hasChangedAttributeInfo:").concat(s, " operationType:").concat(c)), !Ze(c)) {
            if (1 === s) {
              if (4 === c) {
                var u = [];
                i.forEach(function (e) {
                  u.push(e.key);
                }), i = M(u), u = null;
              }
              return this._refreshCachedGroupAttributes({
                groupID: o,
                remoteMainSequence: a,
                groupAttributeList: i,
                operationType: ms[c]
              }), void this._emitGroupAttributesUpdated(o);
            }
            if (this._groupAttributesMap.has(o)) {
              var l = this._groupAttributesMap.get(o).avChatRoomKey;
              this._getGroupAttributes({
                groupID: o,
                avChatRoomKey: l
              }).then(function () {
                t._emitGroupAttributesUpdated(o);
              });
            }
          }
        }
      }, {
        key: "initGroupAttributesCache",
        value: function value(e) {
          var t = e.groupID,
            o = e.avChatRoomKey;
          this._groupAttributesMap.set(t, {
            lastUpdateTime: 0,
            localMainSequence: 0,
            remoteMainSequence: 0,
            attributes: new Map(),
            avChatRoomKey: o
          }), we.log("".concat(this._className, ".initGroupAttributesCache groupID:").concat(t, " avChatRoomKey:").concat(o));
        }
      }, {
        key: "initGroupAttributes",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.groupAttributes,
            a = this._checkCachedGroupAttributes({
              groupID: o,
              funcName: "initGroupAttributes"
            });
          if (!0 !== a) return ja(a);
          var s = this._groupAttributesMap.get(o),
            r = s.remoteMainSequence,
            i = s.avChatRoomKey,
            c = new va(ya.INIT_GROUP_ATTRIBUTES);
          return c.setMessage("groupID:".concat(o, " mainSequence:").concat(r, " groupAttributes:").concat(JSON.stringify(n))), this._groupModule.request({
            protocolName: Nn,
            requestData: {
              groupID: o,
              avChatRoomKey: i,
              mainSequence: r,
              groupAttributeList: this._transformGroupAttributes(n)
            }
          }).then(function (e) {
            var a = e.data,
              s = a.mainSequence,
              r = M(a.groupAttributeList);
            return r.forEach(function (e) {
              e.value = n[e.key];
            }), t._refreshCachedGroupAttributes({
              groupID: o,
              remoteMainSequence: s,
              groupAttributeList: r,
              operationType: "init"
            }), c.setNetworkType(t._groupModule.getNetworkType()).end(), we.log("".concat(t._className, ".initGroupAttributes ok. groupID:").concat(o)), ba({
              groupAttributes: n
            });
          }).catch(function (e) {
            return t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              c.setError(e, n, a).end();
            }), ja(e);
          });
        }
      }, {
        key: "setGroupAttributes",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.groupAttributes,
            a = this._checkCachedGroupAttributes({
              groupID: o,
              funcName: "setGroupAttributes"
            });
          if (!0 !== a) return ja(a);
          var s = this._groupAttributesMap.get(o),
            r = s.remoteMainSequence,
            i = s.avChatRoomKey,
            c = s.attributes,
            u = this._transformGroupAttributes(n);
          u.forEach(function (e) {
            var t = e.key;
            e.sequence = 0, c.has(t) && (e.sequence = c.get(t).sequence);
          });
          var l = new va(ya.SET_GROUP_ATTRIBUTES);
          return l.setMessage("groupID:".concat(o, " mainSequence:").concat(r, " groupAttributes:").concat(JSON.stringify(n))), this._groupModule.request({
            protocolName: An,
            requestData: {
              groupID: o,
              avChatRoomKey: i,
              mainSequence: r,
              groupAttributeList: u
            }
          }).then(function (e) {
            var a = e.data,
              s = a.mainSequence,
              r = M(a.groupAttributeList);
            return r.forEach(function (e) {
              e.value = n[e.key];
            }), t._refreshCachedGroupAttributes({
              groupID: o,
              remoteMainSequence: s,
              groupAttributeList: r,
              operationType: "modify"
            }), l.setNetworkType(t._groupModule.getNetworkType()).end(), we.log("".concat(t._className, ".setGroupAttributes ok. groupID:").concat(o)), ba({
              groupAttributes: n
            });
          }).catch(function (e) {
            return t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              l.setError(e, n, a).end();
            }), ja(e);
          });
        }
      }, {
        key: "deleteGroupAttributes",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.keyList,
            a = void 0 === n ? [] : n,
            s = this._checkCachedGroupAttributes({
              groupID: o,
              funcName: "deleteGroupAttributes"
            });
          if (!0 !== s) return ja(s);
          var r = this._groupAttributesMap.get(o),
            i = r.remoteMainSequence,
            c = r.avChatRoomKey,
            u = r.attributes,
            l = M(u.keys()),
            d = Rn,
            p = "clear",
            g = {
              groupID: o,
              avChatRoomKey: c,
              mainSequence: i
            };
          if (a.length > 0) {
            var _ = [];
            l = [], d = On, p = "delete", a.forEach(function (e) {
              var t = 0;
              u.has(e) && (t = u.get(e).sequence, l.push(e)), _.push({
                key: e,
                sequence: t
              });
            }), g.groupAttributeList = _;
          }
          var h = new va(ya.DELETE_GROUP_ATTRIBUTES);
          return h.setMessage("groupID:".concat(o, " mainSequence:").concat(i, " keyList:").concat(a, " protocolName:").concat(d)), this._groupModule.request({
            protocolName: d,
            requestData: g
          }).then(function (e) {
            var n = e.data.mainSequence;
            return t._refreshCachedGroupAttributes({
              groupID: o,
              remoteMainSequence: n,
              groupAttributeList: a,
              operationType: p
            }), h.setNetworkType(t._groupModule.getNetworkType()).end(), we.log("".concat(t._className, ".deleteGroupAttributes ok. groupID:").concat(o)), ba({
              keyList: l
            });
          }).catch(function (e) {
            return t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              h.setError(e, n, a).end();
            }), ja(e);
          });
        }
      }, {
        key: "getGroupAttributes",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = this._checkCachedGroupAttributes({
              groupID: o,
              funcName: "getGroupAttributes"
            });
          if (!0 !== n) return ja(n);
          var a = this._groupAttributesMap.get(o),
            s = a.avChatRoomKey,
            r = a.lastUpdateTime,
            i = a.localMainSequence,
            c = a.remoteMainSequence,
            u = new va(ya.GET_GROUP_ATTRIBUTES);
          if (u.setMessage("groupID:".concat(o, " localMainSequence:").concat(i, " remoteMainSequence:").concat(c, " keyList:").concat(e.keyList)), Date.now() - r >= this.CACHE_EXPIRE_TIME || i < c) return this._getGroupAttributes({
            groupID: o,
            avChatRoomKey: s
          }).then(function (n) {
            u.setMoreMessage("get attributes from remote. count:".concat(n.length)).setNetworkType(t._groupModule.getNetworkType()).end(), we.log("".concat(t._className, ".getGroupAttributes from remote. groupID:").concat(o));
            var a = t._getLocalGroupAttributes(e);
            return ba({
              groupAttributes: a
            });
          }).catch(function (e) {
            return t._groupModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              u.setError(e, n, a).end();
            }), ja(e);
          });
          u.setMoreMessage("get attributes from cache").setNetworkType(this._groupModule.getNetworkType()).end(), we.log("".concat(this._className, ".getGroupAttributes from cache. groupID:").concat(o));
          var l = this._getLocalGroupAttributes(e);
          return Ya({
            groupAttributes: l
          });
        }
      }, {
        key: "_getGroupAttributes",
        value: function value(e) {
          var o = this;
          return this._groupModule.request({
            protocolName: Ln,
            requestData: t({}, e)
          }).then(function (t) {
            var n = t.data,
              a = n.mainSequence,
              s = n.groupAttributeList,
              r = M(s);
            return Ze(a) || o._refreshCachedGroupAttributes({
              groupID: e.groupID,
              remoteMainSequence: a,
              groupAttributeList: r,
              operationType: "get"
            }), we.log("".concat(o._className, "._getGroupAttributes ok. groupID:").concat(e.groupID)), s;
          }).catch(function (e) {
            return ja(e);
          });
        }
      }, {
        key: "_getLocalGroupAttributes",
        value: function value(e) {
          var t = e.groupID,
            o = e.keyList,
            n = void 0 === o ? [] : o,
            a = {};
          if (!this._groupAttributesMap.has(t)) return a;
          var s = this._groupAttributesMap.get(t).attributes;
          if (n.length > 0) n.forEach(function (e) {
            s.has(e) && (a[e] = s.get(e).value);
          });else {
            var r,
              i = C(s.keys());
            try {
              for (i.s(); !(r = i.n()).done;) {
                var c = r.value;
                a[c] = s.get(c).value;
              }
            } catch (u) {
              i.e(u);
            } finally {
              i.f();
            }
          }
          return a;
        }
      }, {
        key: "_refreshCachedGroupAttributes",
        value: function value(e) {
          var t = e.groupID,
            o = e.remoteMainSequence,
            n = e.groupAttributeList,
            a = e.operationType;
          if (this._groupAttributesMap.has(t)) {
            var s = this._groupAttributesMap.get(t),
              r = s.localMainSequence;
            if ("get" === a || o - r == 1) s.remoteMainSequence = o, s.localMainSequence = o, s.lastUpdateTime = Date.now(), this._updateCachedAttributes({
              groupAttributes: s,
              groupAttributeList: n,
              operationType: a
            });else {
              if (r === o) return;
              s.remoteMainSequence = o;
            }
            this._groupAttributesMap.set(t, s);
            var i = "operationType:".concat(a, " localMainSequence:").concat(r, " remoteMainSequence:").concat(o);
            we.log("".concat(this._className, "._refreshCachedGroupAttributes. ").concat(i));
          }
        }
      }, {
        key: "_updateCachedAttributes",
        value: function value(e) {
          var t = e.groupAttributes,
            o = e.groupAttributeList,
            n = e.operationType;
          "clear" !== n ? "delete" !== n ? ("init" === n && t.attributes.clear(), o.forEach(function (e) {
            var o = e.key,
              n = e.value,
              a = e.sequence;
            t.attributes.set(o, {
              value: n,
              sequence: a
            });
          })) : o.forEach(function (e) {
            t.attributes.delete(e);
          }) : t.attributes.clear();
        }
      }, {
        key: "_checkCachedGroupAttributes",
        value: function value(e) {
          var t = e.groupID,
            o = e.funcName;
          if (this._groupModule.hasLocalGroup(t) && this._groupModule.getLocalGroupProfile(t).type !== D.GRP_AVCHATROOM) {
            return we.warn("".concat(this._className, "._checkCachedGroupAttributes. ").concat("非直播群不能使用群属性 API")), new Ba({
              code: na.CANNOT_USE_GRP_ATTR_NOT_AVCHATROOM,
              message: "非直播群不能使用群属性 API"
            });
          }
          var n = this._groupAttributesMap.get(t);
          if (Ze(n)) {
            var a = "如果 groupID:".concat(t, " 是直播群，使用 ").concat(o, " 前先使用 joinGroup 接口申请加入群组，详细请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#joinGroup");
            return we.warn("".concat(this._className, "._checkCachedGroupAttributes. ").concat(a)), new Ba({
              code: na.CANNOT_USE_GRP_ATTR_AVCHATROOM_UNJOIN,
              message: a
            });
          }
          return !0;
        }
      }, {
        key: "_transformGroupAttributes",
        value: function value(e) {
          var t = [];
          return Object.keys(e).forEach(function (o) {
            t.push({
              key: o,
              value: e[o]
            });
          }), t;
        }
      }, {
        key: "_emitGroupAttributesUpdated",
        value: function value(e) {
          var t = this._getLocalGroupAttributes({
            groupID: e
          });
          this._groupModule.emitOuterEvent(S.GROUP_ATTRIBUTES_UPDATED, {
            groupID: e,
            groupAttributes: t
          });
        }
      }, {
        key: "reset",
        value: function value() {
          this._groupAttributesMap.clear(), this.CACHE_EXPIRE_TIME = 3e4;
        }
      }]), e;
    }(),
    vs = function () {
      function e(t) {
        n(this, e);
        var o = t.manager,
          a = t.groupID,
          s = t.onInit,
          r = t.onSuccess,
          i = t.onFail;
        this._className = "Polling", this._manager = o, this._groupModule = o._groupModule, this._onInit = s, this._onSuccess = r, this._onFail = i, this._groupID = a, this._timeoutID = -1, this._isRunning = !1, this._protocolName = En;
      }
      return s(e, [{
        key: "start",
        value: function value() {
          var e = this._groupModule.isLoggedIn();
          e || (this._protocolName = Tn), we.log("".concat(this._className, ".start pollingInterval:").concat(this._manager.getPollingInterval(), " isLoggedIn:").concat(e)), this._isRunning = !0, this._request();
        }
      }, {
        key: "isRunning",
        value: function value() {
          return this._isRunning;
        }
      }, {
        key: "_request",
        value: function value() {
          var e = this,
            t = this._onInit(this._groupID);
          this._groupModule.request({
            protocolName: this._protocolName,
            requestData: t
          }).then(function (t) {
            e._onSuccess(e._groupID, t), e.isRunning() && (clearTimeout(e._timeoutID), e._timeoutID = setTimeout(e._request.bind(e), e._manager.getPollingInterval()));
          }).catch(function (t) {
            e._onFail(e._groupID, t), e.isRunning() && (clearTimeout(e._timeoutID), e._timeoutID = setTimeout(e._request.bind(e), e._manager.MAX_POLLING_INTERVAL));
          });
        }
      }, {
        key: "stop",
        value: function value() {
          we.log("".concat(this._className, ".stop")), this._timeoutID > 0 && (clearTimeout(this._timeoutID), this._timeoutID = -1), this._isRunning = !1;
        }
      }]), e;
    }(),
    ys = {
      3: !0,
      4: !0,
      5: !0,
      6: !0
    },
    Is = function () {
      function e(t) {
        n(this, e), this._groupModule = t, this._className = "AVChatRoomHandler", this._joinedGroupMap = new Map(), this._pollingRequestInfoMap = new Map(), this._pollingInstanceMap = new Map(), this.sequencesLinkedList = new cs(200), this.messageIDLinkedList = new cs(100), this.receivedMessageCount = 0, this._reportMessageStackedCount = 0, this._onlineMemberCountMap = new Map(), this.DEFAULT_EXPIRE_TIME = 60, this.DEFAULT_POLLING_INTERVAL = 300, this.MAX_POLLING_INTERVAL = 2e3, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0;
      }
      return s(e, [{
        key: "hasJoinedAVChatRoom",
        value: function value() {
          return this._joinedGroupMap.size > 0;
        }
      }, {
        key: "checkJoinedAVChatRoomByID",
        value: function value(e) {
          return this._joinedGroupMap.has(e);
        }
      }, {
        key: "getJoinedAVChatRoom",
        value: function value() {
          return this._joinedGroupMap.size > 0 ? M(this._joinedGroupMap.keys()) : null;
        }
      }, {
        key: "_updateRequestData",
        value: function value(e) {
          return t({}, this._pollingRequestInfoMap.get(e));
        }
      }, {
        key: "_handleSuccess",
        value: function value(e, t) {
          var o = t.data,
            n = o.key,
            a = o.nextSeq,
            s = o.rspMsgList;
          if (0 !== o.errorCode) {
            var r = this._pollingRequestInfoMap.get(e),
              i = new va(ya.LONG_POLLING_AV_ERROR),
              c = r ? "".concat(r.key, "-").concat(r.startSeq) : "requestInfo is undefined";
            i.setMessage("".concat(e, "-").concat(c, "-").concat(t.errorInfo)).setCode(t.errorCode).setNetworkType(this._groupModule.getNetworkType()).end(!0);
          } else {
            if (!this.checkJoinedAVChatRoomByID(e)) return;
            ze(n) && $e(a) && this._pollingRequestInfoMap.set(e, {
              key: n,
              startSeq: a
            }), Qe(s) && s.length > 0 ? (s.forEach(function (e) {
              e.to = e.groupID;
            }), this.onMessage(s)) : (this._pollingNoMessageCount += 1, this._pollingNoMessageCount === this.DEFAULT_POLLING_NO_MESSAGE_COUNT && (this._pollingInterval = this.DEFAULT_POLLING_INTERVAL + this.DEFAULT_POLLING_INTERVAL_PLUS));
          }
        }
      }, {
        key: "_handleFailure",
        value: function value(e, t) {}
      }, {
        key: "onMessage",
        value: function value(e) {
          if (Qe(e) && 0 !== e.length) {
            0 !== this._pollingNoMessageCount && (this._pollingNoMessageCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL);
            var t = null,
              o = [],
              n = this._getModule(co),
              a = this._getModule(Co),
              s = e.length;
            s > 1 && e.sort(function (e, t) {
              return e.sequence - t.sequence;
            });
            for (var r = this._getModule(uo), i = 0; i < s; i++) {
              if (ys[e[i].event]) {
                this.receivedMessageCount += 1, t = this.packMessage(e[i], e[i].event);
                var c = 1 === e[i].isModified,
                  u = 1 === e[i].isHistoryMessage;
                if ((r.isUnlimitedAVChatRoom() || !this.sequencesLinkedList.has(t.sequence)) && !this.messageIDLinkedList.has(t.ID)) {
                  var l = t.conversationID;
                  if (this.receivedMessageCount % 50 == 0 ? this._getModule(yo).detectFirstRound(l, this.sequencesLinkedList.data()) : this.receivedMessageCount % 80 == 0 && this._getModule(yo).detectSecondRound(l, this.sequencesLinkedList.data()), null !== this.sequencesLinkedList.tail()) {
                    var d = this.sequencesLinkedList.tail().value,
                      p = t.sequence - d;
                    p > 1 && p <= 20 ? this._getModule(yo).onMessageMaybeLost(l, d + 1, p - 1) : p < -1 && p >= -20 && this._getModule(yo).onMessageMaybeLost(l, t.sequence + 1, Math.abs(p) - 1);
                  }
                  this.sequencesLinkedList.set(t.sequence), this.messageIDLinkedList.set(t.ID);
                  var g = !1;
                  if (this._isMessageSentByCurrentInstance(t) ? c && (g = !0, t.isModified = c, n.updateMessageIsModifiedProperty(t)) : g = !0, g) {
                    if (!u && t.conversationType !== D.CONV_SYSTEM) {
                      var _ = t.conversationID.replace(D.CONV_GROUP, "");
                      this._pollingInstanceMap.has(_) ? a.addMessageSequence({
                        key: _a,
                        message: t
                      }) : (t.type !== D.MSG_GRP_TIP && t.clientTime > 0 && a.addMessageDelay(t.clientTime), a.addMessageSequence({
                        key: ga,
                        message: t
                      }));
                    }
                    o.push(t);
                  }
                }
              } else we.warn("".concat(this._className, ".onMessage 未处理的 event 类型: ").concat(e[i].event));
            }
            if (0 !== o.length) {
              this._groupModule.filterModifiedMessage(o);
              var h = this.packConversationOption(o);
              if (h.length > 0) this._getModule(co).onNewMessage({
                conversationOptionsList: h,
                isInstantMessage: !0
              });
              we.debug("".concat(this._className, ".onMessage count:").concat(o.length)), this._checkMessageStacked(o);
              var f = this._groupModule.filterUnmodifiedMessage(o);
              f.length > 0 && this._groupModule.emitOuterEvent(S.MESSAGE_RECEIVED, f), o.length = 0;
            }
          }
        }
      }, {
        key: "_checkMessageStacked",
        value: function value(e) {
          var t = e.length;
          t >= 100 && (we.warn("".concat(this._className, "._checkMessageStacked 直播群消息堆积数:").concat(e.length, '！可能会导致微信小程序渲染时遇到 "Dom limit exceeded" 的错误，建议接入侧此时只渲染最近的10条消息')), this._reportMessageStackedCount < 5 && (new va(ya.MESSAGE_STACKED).setNetworkType(this._groupModule.getNetworkType()).setMessage("count:".concat(t, " groupID:").concat(M(this._joinedGroupMap.keys()))).setLevel("warning").end(), this._reportMessageStackedCount += 1));
        }
      }, {
        key: "_isMessageSentByCurrentInstance",
        value: function value(e) {
          return !!this._getModule(co).isMessageSentByCurrentInstance(e);
        }
      }, {
        key: "packMessage",
        value: function value(e, t) {
          e.currentUser = this._groupModule.getMyUserID(), e.conversationType = 5 === t ? D.CONV_SYSTEM : D.CONV_GROUP, e.isSystemMessage = !!e.isSystemMessage;
          var o = new wa(e),
            n = this.packElements(e, t);
          return o.setElement(n), o;
        }
      }, {
        key: "packElements",
        value: function value(e, o) {
          return 4 === o || 6 === o ? (this._updateMemberCountByGroupTips(e), this._onGroupAttributesUpdated(e), {
            type: D.MSG_GRP_TIP,
            content: t(t({}, e.elements), {}, {
              groupProfile: e.groupProfile
            })
          }) : 5 === o ? {
            type: D.MSG_GRP_SYS_NOTICE,
            content: t(t({}, e.elements), {}, {
              groupProfile: t(t({}, e.groupProfile), {}, {
                groupID: e.groupID
              })
            })
          } : this._getModule(_o).parseElements(e.elements, e.from);
        }
      }, {
        key: "packConversationOption",
        value: function value(e) {
          for (var t = new Map(), o = 0; o < e.length; o++) {
            var n = e[o],
              a = n.conversationID;
            if (t.has(a)) {
              var s = t.get(a);
              s.lastMessage = n, "in" === n.flow && s.unreadCount++;
            } else t.set(a, {
              conversationID: n.conversationID,
              unreadCount: "out" === n.flow ? 0 : 1,
              type: n.conversationType,
              subType: n.conversationSubType,
              lastMessage: n
            });
          }
          return M(t.values());
        }
      }, {
        key: "_updateMemberCountByGroupTips",
        value: function value(e) {
          var t = e.groupProfile.groupID,
            o = e.elements.onlineMemberInfo,
            n = void 0 === o ? void 0 : o;
          if (!Vt(n)) {
            var a = n.onlineMemberNum,
              s = void 0 === a ? 0 : a,
              r = n.expireTime,
              i = void 0 === r ? this.DEFAULT_EXPIRE_TIME : r,
              c = this._onlineMemberCountMap.get(t) || {},
              u = Date.now();
            Vt(c) ? Object.assign(c, {
              lastReqTime: 0,
              lastSyncTime: 0,
              latestUpdateTime: u,
              memberCount: s,
              expireTime: i
            }) : (c.latestUpdateTime = u, c.memberCount = s), we.debug("".concat(this._className, "._updateMemberCountByGroupTips info:"), c), this._onlineMemberCountMap.set(t, c);
          }
        }
      }, {
        key: "start",
        value: function value(e) {
          if (this._pollingInstanceMap.has(e)) {
            var t = this._pollingInstanceMap.get(e);
            t.isRunning() || t.start();
          } else {
            var o = new vs({
              manager: this,
              groupID: e,
              onInit: this._updateRequestData.bind(this),
              onSuccess: this._handleSuccess.bind(this),
              onFail: this._handleFailure.bind(this)
            });
            o.start(), this._pollingInstanceMap.set(e, o), we.log("".concat(this._className, ".start groupID:").concat(e));
          }
        }
      }, {
        key: "handleJoinResult",
        value: function value(e) {
          var t = this;
          return this._preCheck().then(function () {
            var o = e.longPollingKey,
              n = e.group,
              a = n.groupID;
            return t._joinedGroupMap.set(a, n), t._groupModule.updateGroupMap([n]), t._groupModule.deleteUnjoinedAVChatRoom(a), t._groupModule.emitGroupListUpdate(!0, !1), Ze(o) ? Ya({
              status: He,
              group: n
            }) : Promise.resolve();
          });
        }
      }, {
        key: "startRunLoop",
        value: function value(e) {
          var t = this;
          return this.handleJoinResult(e).then(function () {
            var o = e.longPollingKey,
              n = e.group,
              a = n.groupID;
            return t._pollingRequestInfoMap.set(a, {
              key: o,
              startSeq: 0
            }), t.start(a), t._groupModule.isLoggedIn() ? Ya({
              status: He,
              group: n
            }) : Ya({
              status: He
            });
          });
        }
      }, {
        key: "_preCheck",
        value: function value() {
          if (this._getModule(uo).isUnlimitedAVChatRoom()) return Promise.resolve();
          if (!this.hasJoinedAVChatRoom()) return Promise.resolve();
          var e = m(this._joinedGroupMap.entries().next().value, 2),
            t = e[0],
            o = e[1];
          if (this._groupModule.isLoggedIn()) {
            if (!(o.selfInfo.role === D.GRP_MBR_ROLE_OWNER || o.ownerID === this._groupModule.getMyUserID())) return this._groupModule.quitGroup(t);
            this._groupModule.deleteLocalGroupAndConversation(t);
          } else this._groupModule.deleteLocalGroupAndConversation(t);
          return this.reset(t), Promise.resolve();
        }
      }, {
        key: "joinWithoutAuth",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = "".concat(this._className, ".joinWithoutAuth"),
            a = new va(ya.JOIN_WITHOUT_AUTH);
          return this._groupModule.request({
            protocolName: sn,
            requestData: e
          }).then(function (e) {
            var s = e.data.longPollingKey;
            if (t._groupModule.probeNetwork().then(function (e) {
              var t = m(e, 2),
                n = (t[0], t[1]);
              a.setNetworkType(n).setMessage("groupID:".concat(o, " longPollingKey:").concat(s)).end(!0);
            }), Ze(s)) return ja(new Ba({
              code: na.CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN,
              message: aa.CANNOT_JOIN_NON_AVCHATROOM_WITHOUT_LOGIN
            }));
            we.log("".concat(n, " ok. groupID:").concat(o)), t._getModule(co).setCompleted("".concat(D.CONV_GROUP).concat(o));
            var r = new ls({
              groupID: o
            });
            return t.startRunLoop({
              group: r,
              longPollingKey: s
            }), ba({
              status: He
            });
          }).catch(function (e) {
            return we.error("".concat(n, " failed. groupID:").concat(o, " error:"), e), t._groupModule.probeNetwork().then(function (t) {
              var n = m(t, 2),
                s = n[0],
                r = n[1];
              a.setError(e, s, r).setMessage("groupID:".concat(o)).end(!0);
            }), ja(e);
          }).finally(function () {
            t._groupModule.getModule(po).reportAtOnce();
          });
        }
      }, {
        key: "getGroupOnlineMemberCount",
        value: function value(e) {
          var t = this._onlineMemberCountMap.get(e) || {},
            o = Date.now();
          return Vt(t) || o - t.lastSyncTime > 1e3 * t.expireTime && o - t.latestUpdateTime > 1e4 && o - t.lastReqTime > 3e3 ? (t.lastReqTime = o, this._onlineMemberCountMap.set(e, t), this._getGroupOnlineMemberCount(e).then(function (e) {
            return ba({
              memberCount: e.memberCount
            });
          }).catch(function (e) {
            return ja(e);
          })) : Ya({
            memberCount: t.memberCount
          });
        }
      }, {
        key: "_getGroupOnlineMemberCount",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._getGroupOnlineMemberCount");
          return this._groupModule.request({
            protocolName: Cn,
            requestData: {
              groupID: e
            }
          }).then(function (n) {
            var a = t._onlineMemberCountMap.get(e) || {},
              s = n.data,
              r = s.onlineMemberNum,
              i = void 0 === r ? 0 : r,
              c = s.expireTime,
              u = void 0 === c ? t.DEFAULT_EXPIRE_TIME : c;
            we.log("".concat(o, " ok. groupID:").concat(e, " memberCount:").concat(i, " expireTime:").concat(u));
            var l = Date.now();
            return Vt(a) && (a.lastReqTime = l), t._onlineMemberCountMap.set(e, Object.assign(a, {
              lastSyncTime: l,
              latestUpdateTime: l,
              memberCount: i,
              expireTime: u
            })), {
              memberCount: i
            };
          }).catch(function (n) {
            return we.warn("".concat(o, " failed. error:"), n), new va(ya.GET_GROUP_ONLINE_MEMBER_COUNT).setCode(n.code).setMessage("groupID:".concat(e, " error:").concat(JSON.stringify(n))).setNetworkType(t._groupModule.getNetworkType()).end(), Promise.reject(n);
          });
        }
      }, {
        key: "_onGroupAttributesUpdated",
        value: function value(e) {
          var t = e.groupProfile.groupID,
            o = e.elements,
            n = o.operationType,
            a = o.newGroupProfile;
          if (6 === n) {
            var s = (void 0 === a ? void 0 : a).groupAttributeOption;
            Vt(s) || this._groupModule.onGroupAttributesUpdated({
              groupID: t,
              groupAttributeOption: s
            });
          }
        }
      }, {
        key: "_getModule",
        value: function value(e) {
          return this._groupModule.getModule(e);
        }
      }, {
        key: "setPollingInterval",
        value: function value(e) {
          Ze(e) || ($e(e) ? this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = e : this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = parseInt(e, 10));
        }
      }, {
        key: "setPollingIntervalPlus",
        value: function value(e) {
          Ze(e) || ($e(e) ? this.DEFAULT_POLLING_INTERVAL_PLUS = e : this.DEFAULT_POLLING_INTERVAL_PLUS = parseInt(e, 10));
        }
      }, {
        key: "setPollingNoMessageCount",
        value: function value(e) {
          Ze(e) || ($e(e) ? this.DEFAULT_POLLING_NO_MESSAGE_COUNT = e : this.DEFAULT_POLLING_NO_MESSAGE_COUNT = parseInt(e, 10));
        }
      }, {
        key: "getPollingInterval",
        value: function value() {
          return this._pollingInterval;
        }
      }, {
        key: "reset",
        value: function value(e) {
          if (e) {
            we.log("".concat(this._className, ".reset groupID:").concat(e));
            var t = this._pollingInstanceMap.get(e);
            t && t.stop(), this._pollingInstanceMap.delete(e), this._joinedGroupMap.delete(e), this._pollingRequestInfoMap.delete(e), this._onlineMemberCountMap.delete(e);
          } else {
            we.log("".concat(this._className, ".reset all"));
            var o,
              n = C(this._pollingInstanceMap.values());
            try {
              for (n.s(); !(o = n.n()).done;) {
                o.value.stop();
              }
            } catch (a) {
              n.e(a);
            } finally {
              n.f();
            }
            this._pollingInstanceMap.clear(), this._joinedGroupMap.clear(), this._pollingRequestInfoMap.clear(), this._onlineMemberCountMap.clear();
          }
          this.sequencesLinkedList.reset(), this.messageIDLinkedList.reset(), this.receivedMessageCount = 0, this._reportMessageStackedCount = 0, this._pollingInterval = this.DEFAULT_POLLING_INTERVAL = 300, this.DEFAULT_POLLING_NO_MESSAGE_COUNT = 20, this.DEFAULT_POLLING_INTERVAL_PLUS = 2e3, this._pollingNoMessageCount = 0;
        }
      }]), e;
    }(),
    Es = 1,
    Ts = 15,
    Cs = function () {
      function e(t) {
        n(this, e), this._groupModule = t, this._className = "GroupSystemNoticeHandler", this.pendencyMap = new Map();
      }
      return s(e, [{
        key: "onNewGroupSystemNotice",
        value: function value(e) {
          var t = e.dataList,
            o = e.isSyncingEnded,
            n = e.isInstantMessage;
          we.debug("".concat(this._className, ".onReceiveSystemNotice count:").concat(t.length));
          var a = this.newSystemNoticeStoredAndSummary({
              notifiesList: t,
              isInstantMessage: n
            }),
            s = a.eventDataList,
            r = a.result;
          s.length > 0 && (this._groupModule.getModule(co).onNewMessage({
            conversationOptionsList: s,
            isInstantMessage: n
          }), this._onReceivedGroupSystemNotice({
            result: r,
            isInstantMessage: n
          }));
          n ? r.length > 0 && this._groupModule.emitOuterEvent(S.MESSAGE_RECEIVED, r) : !0 === o && this._clearGroupSystemNotice();
        }
      }, {
        key: "newSystemNoticeStoredAndSummary",
        value: function value(e) {
          var o = e.notifiesList,
            n = e.isInstantMessage,
            a = null,
            s = o.length,
            r = 0,
            i = [],
            c = {
              conversationID: D.CONV_SYSTEM,
              unreadCount: 0,
              type: D.CONV_SYSTEM,
              subType: null,
              lastMessage: null
            };
          for (r = 0; r < s; r++) {
            var u = o[r],
              l = u.groupProfile,
              d = l.communityType,
              p = void 0 === d ? 0 : d,
              g = l.topicID,
              _ = void 0 === g ? void 0 : g,
              h = u.elements.topicIDList,
              f = void 0 === h ? void 0 : h;
            if (2 !== p || Vt(_) && Vt(f)) {
              if (u.elements.operationType !== Ts) u.currentUser = this._groupModule.getMyUserID(), u.conversationType = D.CONV_SYSTEM, u.conversationID = D.CONV_SYSTEM, (a = new wa(u)).setElement({
                type: D.MSG_GRP_SYS_NOTICE,
                content: t(t({}, u.elements), {}, {
                  groupProfile: u.groupProfile
                })
              }), a.isSystemMessage = !0, (1 === a.sequence && 1 === a.random || 2 === a.sequence && 2 === a.random) && (a.sequence = dt(), a.random = dt(), a.generateMessageID(), we.log("".concat(this._className, ".newSystemNoticeStoredAndSummary sequence and random maybe duplicated, regenerate. ID:").concat(a.ID))), this._groupModule.getModule(co).pushIntoNoticeResult(i, a) && (n ? c.unreadCount++ : a.setIsRead(!0), c.subType = a.conversationSubType);
            } else this._handleTopicSystemNotice(u);
          }
          return c.lastMessage = i[i.length - 1], {
            eventDataList: i.length > 0 ? [c] : [],
            result: i
          };
        }
      }, {
        key: "_clearGroupSystemNotice",
        value: function value() {
          var e = this;
          this.getPendencyList().then(function (t) {
            t.forEach(function (t) {
              e.pendencyMap.set("".concat(t.from, "_").concat(t.groupID, "_").concat(t.to), t);
            });
            var o = e._groupModule.getModule(co).getLocalMessageList(D.CONV_SYSTEM),
              n = [];
            o.forEach(function (t) {
              var o = t.payload,
                a = o.operatorID,
                s = o.operationType,
                r = o.groupProfile;
              if (s === Es) {
                var i = "".concat(a, "_").concat(r.groupID, "_").concat(r.to),
                  c = e.pendencyMap.get(i);
                c && $e(c.handled) && 0 !== c.handled && n.push(t);
              }
            }), e.deleteGroupSystemNotice({
              messageList: n
            });
          });
        }
      }, {
        key: "deleteGroupSystemNotice",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".deleteGroupSystemNotice");
          return Qe(e.messageList) && 0 !== e.messageList.length ? (we.log("".concat(o, " ") + e.messageList.map(function (e) {
            return e.ID;
          })), this._groupModule.request({
            protocolName: In,
            requestData: {
              messageListToDelete: e.messageList.map(function (e) {
                return {
                  from: D.CONV_SYSTEM,
                  messageSeq: e.clientSequence,
                  messageRandom: e.random
                };
              })
            }
          }).then(function () {
            we.log("".concat(o, " ok"));
            var n = t._groupModule.getModule(co);
            return e.messageList.forEach(function (e) {
              n.deleteLocalMessage(e);
            }), ba();
          }).catch(function (e) {
            return we.error("".concat(o, " error:"), e), ja(e);
          })) : Ya();
        }
      }, {
        key: "getPendencyList",
        value: function value(e) {
          var t = this;
          return this._groupModule.request({
            protocolName: yn,
            requestData: {
              startTime: e && e.startTime ? e.startTime : 0,
              limit: e && e.limit ? e.limit : 10,
              handleAccount: this._groupModule.getMyUserID()
            }
          }).then(function (e) {
            var o = e.data.pendencyList;
            return 0 !== e.data.nextStartTime ? t.getPendencyList({
              startTime: e.data.nextStartTime
            }).then(function (e) {
              return [].concat(M(o), M(e));
            }) : o;
          });
        }
      }, {
        key: "_onReceivedGroupSystemNotice",
        value: function value(e) {
          var t = this,
            o = e.result;
          e.isInstantMessage && o.forEach(function (e) {
            switch (e.payload.operationType) {
              case 1:
                break;
              case 2:
                t._onApplyGroupRequestAgreed(e);
                break;
              case 3:
                break;
              case 4:
                t._onMemberKicked(e);
                break;
              case 5:
                t._onGroupDismissed(e);
                break;
              case 6:
                break;
              case 7:
                t._onInviteGroup(e);
                break;
              case 8:
                t._onQuitGroup(e);
                break;
              case 9:
                t._onSetManager(e);
                break;
              case 10:
                t._onDeleteManager(e);
            }
          });
        }
      }, {
        key: "_onApplyGroupRequestAgreed",
        value: function value(e) {
          var t = this,
            o = e.payload.groupProfile.groupID;
          this._groupModule.hasLocalGroup(o) || this._groupModule.getGroupProfile({
            groupID: o
          }).then(function (e) {
            var o = e.data.group;
            if (o) {
              t._groupModule.updateGroupMap([o]);
              var n = !o.isSupportTopic;
              t._groupModule.emitGroupListUpdate(!0, n);
            }
          });
        }
      }, {
        key: "_onMemberKicked",
        value: function value(e) {
          var t = e.payload.groupProfile.groupID;
          this._groupModule.hasLocalGroup(t) && this._groupModule.deleteLocalGroupAndConversation(t);
        }
      }, {
        key: "_onGroupDismissed",
        value: function value(e) {
          var t = e.payload.groupProfile.groupID;
          this._groupModule.hasLocalGroup(t) && this._groupModule.deleteLocalGroupAndConversation(t);
          var o = this._groupModule._AVChatRoomHandler;
          o && o.checkJoinedAVChatRoomByID(t) && o.reset(t);
        }
      }, {
        key: "_onInviteGroup",
        value: function value(e) {
          var t = this,
            o = e.payload.groupProfile.groupID;
          this._groupModule.hasLocalGroup(o) || this._groupModule.getGroupProfile({
            groupID: o
          }).then(function (e) {
            var o = e.data.group;
            o && (t._groupModule.updateGroupMap([o]), t._groupModule.emitGroupListUpdate());
          });
        }
      }, {
        key: "_onQuitGroup",
        value: function value(e) {
          var t = e.payload.groupProfile.groupID;
          this._groupModule.hasLocalGroup(t) && this._groupModule.deleteLocalGroupAndConversation(t);
        }
      }, {
        key: "_onSetManager",
        value: function value(e) {
          var t = e.payload.groupProfile,
            o = t.to,
            n = t.groupID,
            a = this._groupModule.getModule(ro).getLocalGroupMemberInfo(n, o);
          a && a.updateRole(D.GRP_MBR_ROLE_ADMIN);
        }
      }, {
        key: "_onDeleteManager",
        value: function value(e) {
          var t = e.payload.groupProfile,
            o = t.to,
            n = t.groupID,
            a = this._groupModule.getModule(ro).getLocalGroupMemberInfo(n, o);
          a && a.updateRole(D.GRP_MBR_ROLE_MEMBER);
        }
      }, {
        key: "_handleTopicSystemNotice",
        value: function value(e) {
          var t = e.groupProfile,
            o = t.groupID,
            n = t.topicID,
            a = e.elements,
            s = a.operationType,
            r = a.topicIDList,
            i = this._groupModule.getModule(io);
          17 === s ? i.onTopicCreated({
            groupID: o,
            topicID: n
          }) : 18 === s && i.onTopicDeleted({
            groupID: o,
            topicIDList: r
          });
        }
      }, {
        key: "reset",
        value: function value() {
          this.pendencyMap.clear();
        }
      }]), e;
    }(),
    Ss = ["relayFlag"],
    Ds = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        return n(this, a), (t = o.call(this, e))._className = "GroupModule", t._commonGroupHandler = null, t._AVChatRoomHandler = null, t._groupSystemNoticeHandler = null, t._commonGroupHandler = new fs(_(t)), t._groupAttributesHandler = new Ms(_(t)), t._AVChatRoomHandler = new Is(_(t)), t._groupTipsHandler = new hs(_(t)), t._groupSystemNoticeHandler = new Cs(_(t)), t.groupMap = new Map(), t._unjoinedAVChatRoomList = new Map(), t._receiptDetailCompleteMap = new Map(), t.getInnerEmitterInstance().on(Xa, t._onCloudConfigUpdated, _(t)), t;
      }
      return s(a, [{
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this.getCloudConfig("polling_interval"),
            t = this.getCloudConfig("polling_interval_plus"),
            o = this.getCloudConfig("polling_no_msg_count");
          this._AVChatRoomHandler && (we.log("".concat(this._className, "._onCloudConfigUpdated pollingInterval:").concat(e) + " pollingIntervalPlus:".concat(t, " pollingNoMessageCount:").concat(o)), this._AVChatRoomHandler.setPollingInterval(e), this._AVChatRoomHandler.setPollingIntervalPlus(t), this._AVChatRoomHandler.setPollingNoMessageCount(o));
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          this.isLoggedIn() && (this._commonGroupHandler.onCheckTimer(e), this._groupTipsHandler.onCheckTimer(e));
        }
      }, {
        key: "guardForAVChatRoom",
        value: function value(e) {
          var t = this;
          if (e.conversationType === D.CONV_GROUP) {
            var o = Tt(e.to) ? bt(e.to) : e.to;
            return this.hasLocalGroup(o) ? Ya() : this.getGroupProfile({
              groupID: o
            }).then(function (n) {
              var a = n.data.group.type;
              if (we.log("".concat(t._className, ".guardForAVChatRoom. groupID:").concat(o, " type:").concat(a)), a === D.GRP_AVCHATROOM) {
                var s = "userId:".concat(e.from, " 未加入群 groupID:").concat(o, "。发消息前先使用 joinGroup 接口申请加群，详细请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#joinGroup");
                return we.warn("".concat(t._className, ".guardForAVChatRoom sendMessage not allowed. ").concat(s)), ja(new Ba({
                  code: na.MESSAGE_SEND_FAIL,
                  message: s,
                  data: {
                    message: e
                  }
                }));
              }
              return Ya();
            });
          }
          return Ya();
        }
      }, {
        key: "checkJoinedAVChatRoomByID",
        value: function value(e) {
          return !!this._AVChatRoomHandler && this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e);
        }
      }, {
        key: "onNewGroupMessage",
        value: function value(e) {
          this._commonGroupHandler && this._commonGroupHandler.onNewGroupMessage(e);
        }
      }, {
        key: "updateNextMessageSeq",
        value: function value(e) {
          var t = this;
          if (Qe(e)) {
            var o = this.getModule(io);
            e.forEach(function (e) {
              var n = e.conversationID.replace(D.CONV_GROUP, "");
              if (Tt(n)) {
                var a = e.lastMessage.sequence + 1,
                  s = bt(n),
                  r = o.getLocalTopic(s, n);
                r && (r.updateNextMessageSeq(a), r.updateLastMessage(e.lastMessage));
              }
              t.groupMap.has(n) && (t.groupMap.get(n).nextMessageSeq = e.lastMessage.sequence + 1);
            });
          }
        }
      }, {
        key: "onNewGroupTips",
        value: function value(e) {
          this._groupTipsHandler && this._groupTipsHandler.onNewGroupTips(e);
        }
      }, {
        key: "onGroupMessageRevoked",
        value: function value(e) {
          this._commonGroupHandler && this._commonGroupHandler.onGroupMessageRevoked(e);
        }
      }, {
        key: "onNewGroupSystemNotice",
        value: function value(e) {
          this._groupSystemNoticeHandler && this._groupSystemNoticeHandler.onNewGroupSystemNotice(e);
        }
      }, {
        key: "onGroupMessageReadNotice",
        value: function value(e) {
          var t = this;
          e.dataList.forEach(function (e) {
            var o = e.elements.groupMessageReadNotice;
            if (!Ze(o)) {
              var n = t.getModule(co);
              o.forEach(function (e) {
                var o = e.groupID,
                  a = e.topicID,
                  s = void 0 === a ? void 0 : a,
                  r = e.lastMessageSeq;
                we.debug("".concat(t._className, ".onGroupMessageReadNotice groupID:").concat(o, " lastMessageSeq:").concat(r));
                var i = "".concat(D.CONV_GROUP).concat(o),
                  c = !0;
                Vt(s) || (i = "".concat(D.CONV_GROUP).concat(s), c = !1), n.updateIsReadAfterReadReport({
                  conversationID: i,
                  lastMessageSeq: r
                }), n.updateUnreadCount(i, c);
              });
            }
          });
        }
      }, {
        key: "onReadReceiptList",
        value: function value(e) {
          var t = this;
          we.debug("".concat(this._className, ".onReadReceiptList options:"), JSON.stringify(e)), e.dataList.forEach(function (e) {
            var o = e.groupProfile,
              n = e.elements,
              a = o.groupID,
              s = t.getModule(co),
              r = n.readReceiptList;
            s.updateReadReceiptInfo({
              groupID: a,
              readReceiptList: r
            });
          });
        }
      }, {
        key: "onGroupMessageModified",
        value: function value(e) {
          we.debug("".concat(this._className, ".onGroupMessageModified options:"), JSON.stringify(e));
          var o = this.getModule(co);
          e.dataList.forEach(function (e) {
            o.onMessageModified(t(t({}, e), {}, {
              conversationType: D.CONV_GROUP,
              to: e.topicID ? e.topicID : e.groupID
            }));
          });
        }
      }, {
        key: "deleteGroupSystemNotice",
        value: function value(e) {
          this._groupSystemNoticeHandler && this._groupSystemNoticeHandler.deleteGroupSystemNotice(e);
        }
      }, {
        key: "initGroupMap",
        value: function value(e) {
          this.groupMap.set(e.groupID, new ls(e));
        }
      }, {
        key: "deleteGroup",
        value: function value(e) {
          this.groupMap.delete(e);
        }
      }, {
        key: "updateGroupMap",
        value: function value(e) {
          var t = this;
          e.forEach(function (e) {
            t.groupMap.has(e.groupID) ? t.groupMap.get(e.groupID).updateGroup(e) : t.groupMap.set(e.groupID, new ls(e));
          });
          var o,
            n = this.getMyUserID(),
            a = C(this.groupMap);
          try {
            for (a.s(); !(o = a.n()).done;) {
              m(o.value, 2)[1].selfInfo.userID = n;
            }
          } catch (s) {
            a.e(s);
          } finally {
            a.f();
          }
          this._setStorageGroupList();
        }
      }, {
        key: "getStorageGroupList",
        value: function value() {
          return this.getModule(lo).getItem("groupMap");
        }
      }, {
        key: "_setStorageGroupList",
        value: function value() {
          var e = this.getLocalGroupList().filter(function (e) {
            var t = e.type;
            return !It(t);
          }).filter(function (e) {
            return !e.isSupportTopic;
          }).slice(0, 20).map(function (e) {
            return {
              groupID: e.groupID,
              name: e.name,
              avatar: e.avatar,
              type: e.type
            };
          });
          this.getModule(lo).setItem("groupMap", e);
        }
      }, {
        key: "getGroupMap",
        value: function value() {
          return this.groupMap;
        }
      }, {
        key: "getLocalGroupList",
        value: function value() {
          return M(this.groupMap.values());
        }
      }, {
        key: "getLocalGroupProfile",
        value: function value(e) {
          return this.groupMap.get(e);
        }
      }, {
        key: "sortLocalGroupList",
        value: function value() {
          var e = M(this.groupMap).filter(function (e) {
            var t = m(e, 2);
            t[0];
            return !Vt(t[1].lastMessage);
          });
          e.sort(function (e, t) {
            return t[1].lastMessage.lastTime - e[1].lastMessage.lastTime;
          }), this.groupMap = new Map(M(e));
        }
      }, {
        key: "updateGroupLastMessage",
        value: function value(e) {
          this._commonGroupHandler && this._commonGroupHandler.handleUpdateGroupLastMessage(e);
        }
      }, {
        key: "emitGroupListUpdate",
        value: function value() {
          var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
            t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1],
            o = this.getLocalGroupList();
          if (e && this.emitOuterEvent(S.GROUP_LIST_UPDATED), t) {
            var n = JSON.parse(JSON.stringify(o)),
              a = this.getModule(co);
            a.updateConversationGroupProfile(n);
          }
        }
      }, {
        key: "patchGroupMessageRemindType",
        value: function value() {
          var e = this.getLocalGroupList(),
            t = this.getModule(co),
            o = 0;
          e.forEach(function (e) {
            !0 === t.patchMessageRemindType({
              ID: e.groupID,
              isC2CConversation: !1,
              messageRemindType: e.selfInfo.messageRemindType
            }) && (o += 1);
          }), we.log("".concat(this._className, ".patchGroupMessageRemindType count:").concat(o));
        }
      }, {
        key: "recomputeUnreadCount",
        value: function value() {
          var e = this.getLocalGroupList(),
            t = this.getModule(co);
          e.forEach(function (e) {
            var o = e.groupID,
              n = e.selfInfo,
              a = n.excludedUnreadSequenceList,
              s = n.readedSequence;
            if (Qe(a)) {
              var r = 0;
              a.forEach(function (t) {
                t >= s && t <= e.nextMessageSeq - 1 && (r += 1);
              }), r >= 1 && t.recomputeGroupUnreadCount({
                conversationID: "".concat(D.CONV_GROUP).concat(o),
                count: r
              });
            }
          });
        }
      }, {
        key: "getMyNameCardByGroupID",
        value: function value(e) {
          var t = this.getLocalGroupProfile(e);
          return t ? t.selfInfo.nameCard : "";
        }
      }, {
        key: "getGroupList",
        value: function value(e) {
          return this._commonGroupHandler ? this._commonGroupHandler.getGroupList(e) : Ya();
        }
      }, {
        key: "getGroupProfile",
        value: function value(e) {
          var t = this,
            o = new va(ya.GET_GROUP_PROFILE),
            n = "".concat(this._className, ".getGroupProfile"),
            a = e.groupID,
            s = e.groupCustomFieldFilter;
          we.log("".concat(n, " groupID:").concat(a));
          var r = {
            groupIDList: [a],
            responseFilter: {
              groupBaseInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "Owner_Account", "CreateTime", "InfoSeq", "LastInfoTime", "LastMsgTime", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "NextMsgSeq", "ShutUpAllMember"],
              groupCustomFieldFilter: s,
              memberInfoFilter: ["Role", "JoinTime", "MsgSeq", "MsgFlag", "NameCard"]
            }
          };
          return this.getGroupProfileAdvance(r).then(function (e) {
            var s,
              r = e.data,
              i = r.successGroupList,
              c = r.failureGroupList;
            if (we.log("".concat(n, " ok")), c.length > 0) return ja(c[0]);
            (It(i[0].type) && !t.hasLocalGroup(a) ? s = new ls(i[0]) : (t.updateGroupMap(i), s = t.getLocalGroupProfile(a)), s.isSupportTopic) || t.getModule(co).updateConversationGroupProfile([s]);
            return o.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(a, " type:").concat(s.type, " muteAllMembers:").concat(s.muteAllMembers, " ownerID:").concat(s.ownerID)).end(), ba({
              group: s
            });
          }).catch(function (a) {
            return t.probeNetwork().then(function (t) {
              var n = m(t, 2),
                s = n[0],
                r = n[1];
              o.setError(a, s, r).setMessage("groupID:".concat(e.groupID)).end();
            }), we.error("".concat(n, " failed. error:"), a), ja(a);
          });
        }
      }, {
        key: "getGroupProfileAdvance",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".getGroupProfileAdvance"),
            a = e.groupIDList;
          Qe(a) && a.length > 50 && (we.warn("".concat(n, " 获取群资料的数量不能超过50个")), a.length = 50);
          var s = [],
            r = [];
          a.forEach(function (e) {
            Et({
              groupID: e
            }) ? r.push(e) : s.push(e);
          });
          var i = [];
          if (s.length > 0) {
            var c = this._getGroupProfileAdvance(t(t({}, e), {}, {
              groupIDList: s
            }));
            i.push(c);
          }
          if (r.length > 0) {
            var u = this._getGroupProfileAdvance(t(t({}, e), {}, {
              groupIDList: r,
              relayFlag: s.length > 0
            }));
            i.push(u);
          }
          return Promise.all(i).then(function (e) {
            var t = [],
              o = [];
            return e.forEach(function (e) {
              t.push.apply(t, M(e.successGroupList)), o.push.apply(o, M(e.failureGroupList));
            }), ba({
              successGroupList: t,
              failureGroupList: o
            });
          }).catch(function (e) {
            return we.error("".concat(o._className, "._getGroupProfileAdvance failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_getGroupProfileAdvance",
        value: function value(e) {
          var t = this,
            o = e.relayFlag,
            n = void 0 !== o && o,
            a = g(e, Ss);
          return this.request({
            protocolName: en,
            requestData: a
          }).then(function (e) {
            we.log("".concat(t._className, "._getGroupProfileAdvance ok."));
            var o = e.data.groups;
            return {
              successGroupList: o.filter(function (e) {
                return Ze(e.errorCode) || 0 === e.errorCode;
              }),
              failureGroupList: o.filter(function (e) {
                return e.errorCode && 0 !== e.errorCode;
              }).map(function (e) {
                return new Ba({
                  code: e.errorCode,
                  message: e.errorInfo,
                  data: {
                    groupID: e.groupID
                  }
                });
              })
            };
          }).catch(function (t) {
            return n && Et({
              groupID: e.groupIDList[0]
            }) ? {
              successGroupList: [],
              failureGroupList: []
            } : ja(t);
          });
        }
      }, {
        key: "createGroup",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".createGroup"),
            a = e.type,
            s = e.groupID;
          if (!["Public", "Private", "ChatRoom", "AVChatRoom", "Community"].includes(a)) return ja({
            code: na.ILLEGAL_GROUP_TYPE,
            message: aa.ILLEGAL_GROUP_TYPE
          });
          if (!Et({
            type: a
          })) {
            if (!Vt(s) && Et({
              groupID: s
            })) return ja({
              code: na.ILLEGAL_GROUP_ID,
              message: aa.ILLEGAL_GROUP_ID
            });
            e.isSupportTopic = void 0;
          }
          if (It(a) && !Ze(e.memberList) && e.memberList.length > 0 && (we.warn("".concat(n, " 创建 AVChatRoom 时不能添加群成员，自动忽略该字段")), e.memberList = void 0), yt(a) || Ze(e.joinOption) || (we.warn("".concat(n, " 创建 Work/Meeting/AVChatRoom/Community 群时不能设置字段 joinOption，自动忽略该字段")), e.joinOption = void 0), Et({
            type: a
          })) {
            if (!Vt(s) && !Et({
              groupID: s
            })) return ja({
              code: na.ILLEGAL_GROUP_ID,
              message: aa.ILLEGAL_GROUP_ID
            });
            e.isSupportTopic = !0 === e.isSupportTopic ? 1 : 0;
          }
          var r = new va(ya.CREATE_GROUP);
          we.log("".concat(n, " options:"), e);
          var i = [];
          return this.request({
            protocolName: tn,
            requestData: t(t({}, e), {}, {
              ownerID: this.getMyUserID(),
              webPushFlag: 1
            })
          }).then(function (a) {
            var s = a.data,
              c = s.groupID,
              u = s.overLimitUserIDList,
              l = void 0 === u ? [] : u;
            if (i = l, r.setNetworkType(o.getNetworkType()).setMessage("groupType:".concat(e.type, " groupID:").concat(c, " overLimitUserIDList=").concat(l)).end(), we.log("".concat(n, " ok groupID:").concat(c, " overLimitUserIDList:"), l), e.type === D.GRP_AVCHATROOM) return o.getGroupProfile({
              groupID: c
            });
            if (e.type === D.GRP_COMMUNITY && 1 === e.isSupportTopic) return o.getGroupProfile({
              groupID: c
            });
            Vt(e.memberList) || Vt(l) || (e.memberList = e.memberList.filter(function (e) {
              return -1 === l.indexOf(e.userID);
            })), o.updateGroupMap([t(t({}, e), {}, {
              groupID: c
            })]);
            var d = o.getModule(to),
              p = d.createCustomMessage({
                to: c,
                conversationType: D.CONV_GROUP,
                payload: {
                  data: "group_create",
                  extension: "".concat(o.getMyUserID(), "创建群组")
                }
              });
            return d.sendMessageInstance(p), o.emitGroupListUpdate(), o.getGroupProfile({
              groupID: c
            });
          }).then(function (e) {
            var t = e.data.group,
              o = t.selfInfo,
              n = o.nameCard,
              a = o.joinTime;
            return t.updateSelfInfo({
              nameCard: n,
              joinTime: a,
              messageRemindType: D.MSG_REMIND_ACPT_AND_NOTE,
              role: D.GRP_MBR_ROLE_OWNER
            }), ba({
              group: t,
              overLimitUserIDList: i
            });
          }).catch(function (t) {
            return r.setMessage("groupType:".concat(e.type)), o.probeNetwork().then(function (e) {
              var o = m(e, 2),
                n = o[0],
                a = o[1];
              r.setError(t, n, a).end();
            }), we.error("".concat(n, " failed. error:"), t), ja(t);
          });
        }
      }, {
        key: "dismissGroup",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".dismissGroup");
          if (this.hasLocalGroup(e) && this.getLocalGroupProfile(e).type === D.GRP_WORK) return ja(new Ba({
            code: na.CANNOT_DISMISS_WORK,
            message: aa.CANNOT_DISMISS_WORK
          }));
          var n = new va(ya.DISMISS_GROUP);
          return n.setMessage("groupID:".concat(e)), we.log("".concat(o, " groupID:").concat(e)), this.request({
            protocolName: on,
            requestData: {
              groupID: e
            }
          }).then(function () {
            return n.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok")), t.deleteLocalGroupAndConversation(e), t.checkJoinedAVChatRoomByID(e) && t._AVChatRoomHandler.reset(e), ba({
              groupID: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "updateGroupProfile",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".updateGroupProfile");
          !this.hasLocalGroup(e.groupID) || yt(this.getLocalGroupProfile(e.groupID).type) || Ze(e.joinOption) || (we.warn("".concat(o, " Work/Meeting/AVChatRoom/Community 群不能设置字段 joinOption，自动忽略该字段")), e.joinOption = void 0), Ze(e.muteAllMembers) || (e.muteAllMembers ? e.muteAllMembers = "On" : e.muteAllMembers = "Off");
          var n = new va(ya.UPDATE_GROUP_PROFILE);
          return n.setMessage(JSON.stringify(e)), we.log("".concat(o, " groupID:").concat(e.groupID)), this.request({
            protocolName: nn,
            requestData: e
          }).then(function () {
            (n.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok")), t.hasLocalGroup(e.groupID)) && (t.groupMap.get(e.groupID).updateGroup(e), t._setStorageGroupList());
            return ba({
              group: t.groupMap.get(e.groupID)
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.log("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "joinGroup",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.type,
            a = "".concat(this._className, ".joinGroup");
          if (n === D.GRP_WORK) {
            var s = new Ba({
              code: na.CANNOT_JOIN_WORK,
              message: aa.CANNOT_JOIN_WORK
            });
            return ja(s);
          }
          if (this.deleteUnjoinedAVChatRoom(o), this.hasLocalGroup(o)) {
            if (!this.isLoggedIn()) return Ya({
              status: D.JOIN_STATUS_ALREADY_IN_GROUP
            });
            var r = new va(ya.APPLY_JOIN_GROUP);
            return this.getGroupProfile({
              groupID: o
            }).then(function () {
              return r.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(o, " joinedStatus:").concat(D.JOIN_STATUS_ALREADY_IN_GROUP)).end(), Ya({
                status: D.JOIN_STATUS_ALREADY_IN_GROUP
              });
            }).catch(function (n) {
              return r.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(o, " unjoined")).end(), we.warn("".concat(a, " ").concat(o, " was unjoined, now join!")), t.groupMap.delete(o), t.applyJoinGroup(e);
            });
          }
          return we.log("".concat(a, " groupID:").concat(o)), this.isLoggedIn() ? this.applyJoinGroup(e) : this._AVChatRoomHandler.joinWithoutAuth(e);
        }
      }, {
        key: "applyJoinGroup",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".applyJoinGroup"),
            a = e.groupID,
            s = new va(ya.APPLY_JOIN_GROUP),
            r = t({}, e),
            i = this.canIUse(B.AVCHATROOM_HISTORY_MSG);
          return i && (r.historyMessageFlag = 1), this.getModule(co).removeConversationMessageCache("".concat(D.CONV_GROUP).concat(a)), this.request({
            protocolName: an,
            requestData: r
          }).then(function (e) {
            var t = e.data,
              r = t.joinedStatus,
              c = t.longPollingKey,
              u = t.avChatRoomFlag,
              l = t.avChatRoomKey,
              d = t.messageList,
              p = "groupID:".concat(a, " joinedStatus:").concat(r, " longPollingKey:").concat(c) + " avChatRoomFlag:".concat(u, " canGetAVChatRoomHistoryMessage:").concat(i, ",") + " history message count:".concat(Vt(d) ? 0 : d.length);
            switch (s.setNetworkType(o.getNetworkType()).setMessage("".concat(p)).end(), we.log("".concat(n, " ok. ").concat(p)), r) {
              case Be:
                return ba({
                  status: Be
                });
              case He:
                return o.getGroupProfile({
                  groupID: a
                }).then(function (e) {
                  var t,
                    n = e.data.group,
                    s = {
                      status: He,
                      group: n
                    };
                  return 1 === u ? (o.getModule(co).setCompleted("".concat(D.CONV_GROUP).concat(a)), o._groupAttributesHandler.initGroupAttributesCache({
                    groupID: a,
                    avChatRoomKey: l
                  }), (t = Ze(c) ? o._AVChatRoomHandler.handleJoinResult({
                    group: n
                  }) : o._AVChatRoomHandler.startRunLoop({
                    longPollingKey: c,
                    group: n
                  })).then(function () {
                    o._onAVChatRoomHistoryMessage(d);
                  }), t) : (o.emitGroupListUpdate(!0, !1), ba(s));
                });
              default:
                var g = new Ba({
                  code: na.JOIN_GROUP_FAIL,
                  message: aa.JOIN_GROUP_FAIL
                });
                return we.error("".concat(n, " error:"), g), ja(g);
            }
          }).catch(function (t) {
            return s.setMessage("groupID:".concat(e.groupID)), o.probeNetwork().then(function (e) {
              var o = m(e, 2),
                n = o[0],
                a = o[1];
              s.setError(t, n, a).end();
            }), we.error("".concat(n, " error:"), t), ja(t);
          });
        }
      }, {
        key: "quitGroup",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".quitGroup");
          we.log("".concat(o, " groupID:").concat(e));
          var n = this.checkJoinedAVChatRoomByID(e);
          if (!n && !this.hasLocalGroup(e)) {
            var a = new Ba({
              code: na.MEMBER_NOT_IN_GROUP,
              message: aa.MEMBER_NOT_IN_GROUP
            });
            return ja(a);
          }
          if (n && !this.isLoggedIn()) return we.log("".concat(o, " anonymously ok. groupID:").concat(e)), this.deleteLocalGroupAndConversation(e), this._AVChatRoomHandler.reset(e), Ya({
            groupID: e
          });
          var s = new va(ya.QUIT_GROUP);
          return s.setMessage("groupID:".concat(e)), this.request({
            protocolName: rn,
            requestData: {
              groupID: e
            }
          }).then(function () {
            return s.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok")), n && t._AVChatRoomHandler.reset(e), t.deleteLocalGroupAndConversation(e), ba({
              groupID: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "searchGroupByID",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".searchGroupByID"),
            n = {
              groupIDList: [e]
            },
            a = new va(ya.SEARCH_GROUP_BY_ID);
          return a.setMessage("groupID:".concat(e)), we.log("".concat(o, " groupID:").concat(e)), this.request({
            protocolName: cn,
            requestData: n
          }).then(function (e) {
            var n = e.data.groupProfile;
            if (0 !== n[0].errorCode) throw new Ba({
              code: n[0].errorCode,
              message: n[0].errorInfo
            });
            return a.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok")), ba({
              group: new ls(n[0])
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                s = o[1];
              a.setError(e, n, s).end();
            }), we.warn("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "changeGroupOwner",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".changeGroupOwner");
          if (this.hasLocalGroup(e.groupID) && this.getLocalGroupProfile(e.groupID).type === D.GRP_AVCHATROOM) return ja(new Ba({
            code: na.CANNOT_CHANGE_OWNER_IN_AVCHATROOM,
            message: aa.CANNOT_CHANGE_OWNER_IN_AVCHATROOM
          }));
          if (e.newOwnerID === this.getMyUserID()) return ja(new Ba({
            code: na.CANNOT_CHANGE_OWNER_TO_SELF,
            message: aa.CANNOT_CHANGE_OWNER_TO_SELF
          }));
          var n = new va(ya.CHANGE_GROUP_OWNER);
          return n.setMessage("groupID:".concat(e.groupID, " newOwnerID:").concat(e.newOwnerID)), we.log("".concat(o, " groupID:").concat(e.groupID)), this.request({
            protocolName: un,
            requestData: e
          }).then(function () {
            n.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok"));
            var a = e.groupID,
              s = e.newOwnerID;
            t.groupMap.get(a).ownerID = s;
            var r = t.getModule(ro).getLocalGroupMemberList(a);
            if (r instanceof Map) {
              var i = r.get(t.getMyUserID());
              Ze(i) || (i.updateRole("Member"), t.groupMap.get(a).selfInfo.role = "Member");
              var c = r.get(s);
              Ze(c) || c.updateRole("Owner");
            }
            return t.emitGroupListUpdate(!0, !1), ba({
              group: t.groupMap.get(a)
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "handleGroupApplication",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".handleGroupApplication"),
            a = e.message.payload,
            s = a.groupProfile.groupID,
            r = a.authentication,
            i = a.messageKey,
            c = a.operatorID,
            u = new va(ya.HANDLE_GROUP_APPLICATION);
          return u.setMessage("groupID:".concat(s)), we.log("".concat(n, " groupID:").concat(s)), this.request({
            protocolName: ln,
            requestData: t(t({}, e), {}, {
              applicant: c,
              groupID: s,
              authentication: r,
              messageKey: i
            })
          }).then(function () {
            return u.setNetworkType(o.getNetworkType()).end(), we.log("".concat(n, " ok")), o._groupSystemNoticeHandler.deleteGroupSystemNotice({
              messageList: [e.message]
            }), ba({
              group: o.getLocalGroupProfile(s)
            });
          }).catch(function (e) {
            return o.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              u.setError(e, n, a).end();
            }), we.error("".concat(n, " failed. error"), e), ja(e);
          });
        }
      }, {
        key: "handleGroupInvitation",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".handleGroupInvitation"),
            a = e.message.payload,
            s = a.groupProfile.groupID,
            r = a.authentication,
            i = a.messageKey,
            c = a.operatorID,
            u = e.handleAction,
            l = new va(ya.HANDLE_GROUP_INVITATION);
          return l.setMessage("groupID:".concat(s, " inviter:").concat(c, " handleAction:").concat(u)), we.log("".concat(n, " groupID:").concat(s, " inviter:").concat(c, " handleAction:").concat(u)), this.request({
            protocolName: dn,
            requestData: t(t({}, e), {}, {
              inviter: c,
              groupID: s,
              authentication: r,
              messageKey: i
            })
          }).then(function () {
            return l.setNetworkType(o.getNetworkType()).end(), we.log("".concat(n, " ok")), o._groupSystemNoticeHandler.deleteGroupSystemNotice({
              messageList: [e.message]
            }), ba({
              group: o.getLocalGroupProfile(s)
            });
          }).catch(function (e) {
            return o.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              l.setError(e, n, a).end();
            }), we.error("".concat(n, " failed. error"), e), ja(e);
          });
        }
      }, {
        key: "getGroupOnlineMemberCount",
        value: function value(e) {
          return this._AVChatRoomHandler ? this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e) ? this._AVChatRoomHandler.getGroupOnlineMemberCount(e) : Ya({
            memberCount: 0
          }) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "hasLocalGroup",
        value: function value(e) {
          return this.groupMap.has(e);
        }
      }, {
        key: "deleteLocalGroupAndConversation",
        value: function value(e) {
          this._deleteLocalGroup(e), this.getModule(co).deleteLocalConversation("GROUP".concat(e)), this.emitGroupListUpdate(!0, !1);
        }
      }, {
        key: "_deleteLocalGroup",
        value: function value(e) {
          this.groupMap.delete(e), this.getModule(ro).deleteGroupMemberList(e), this._setStorageGroupList();
        }
      }, {
        key: "sendMessage",
        value: function value(e, t) {
          var o = this.createGroupMessagePack(e, t);
          return this.request(o);
        }
      }, {
        key: "createGroupMessagePack",
        value: function value(e, t) {
          var o = null;
          t && t.offlinePushInfo && (o = t.offlinePushInfo);
          var n = "";
          ze(e.cloudCustomData) && e.cloudCustomData.length > 0 && (n = e.cloudCustomData);
          var a = [];
          if (Xe(t) && Xe(t.messageControlInfo)) {
            var s = t.messageControlInfo,
              r = s.excludedFromUnreadCount,
              i = s.excludedFromLastMessage;
            !0 === r && a.push("NoUnread"), !0 === i && a.push("NoLastMsg");
          }
          var c = e.getGroupAtInfoList(),
            u = {
              fromAccount: this.getMyUserID(),
              groupID: e.to,
              msgBody: e.getElements(),
              cloudCustomData: n,
              random: e.random,
              priority: e.priority,
              clientSequence: e.clientSequence,
              groupAtInfo: e.type !== D.MSG_TEXT || Vt(c) ? void 0 : c,
              onlineOnlyFlag: this.isOnlineMessage(e, t) ? 1 : 0,
              clientTime: e.clientTime,
              offlinePushInfo: o ? {
                pushFlag: !0 === o.disablePush ? 1 : 0,
                title: o.title || "",
                desc: o.description || "",
                ext: o.extension || "",
                apnsInfo: {
                  badgeMode: !0 === o.ignoreIOSBadge ? 1 : 0
                },
                androidInfo: {
                  OPPOChannelID: o.androidOPPOChannelID || ""
                }
              } : void 0,
              messageControlInfo: a,
              needReadReceipt: !0 !== e.needReadReceipt || this.isMessageFromOrToAVChatroom(e.to) ? 0 : 1
            };
          return Tt(e.to) && (u.groupID = bt(e.to), u.topicID = e.to), {
            protocolName: Po,
            tjgID: this.generateTjgID(e),
            requestData: u
          };
        }
      }, {
        key: "revokeMessage",
        value: function value(e) {
          var t = {
            groupID: e.to,
            msgSeqList: [{
              msgSeq: e.sequence
            }]
          };
          return Tt(e.to) && (t.groupID = bt(e.to), t.topicID = e.to), this.request({
            protocolName: pn,
            requestData: t
          });
        }
      }, {
        key: "deleteMessage",
        value: function value(e) {
          var t = e.to,
            o = e.keyList;
          we.log("".concat(this._className, ".deleteMessage groupID:").concat(t, " count:").concat(o.length));
          var n = {
            groupID: t,
            deleter: this.getMyUserID(),
            keyList: o
          };
          return Tt(t) && (n.groupID = bt(t), n.topicID = t), this.request({
            protocolName: Sn,
            requestData: n
          });
        }
      }, {
        key: "modifyRemoteMessage",
        value: function value(e) {
          var t = e.to,
            o = e.sequence,
            n = e.payload,
            a = e.type,
            s = e.version,
            r = void 0 === s ? 0 : s,
            i = e.cloudCustomData,
            c = t,
            u = void 0;
          return Tt(t) && (c = bt(t), u = t), this.request({
            protocolName: Dn,
            requestData: {
              groupID: c,
              topicID: u,
              sequence: o,
              version: r,
              elements: [{
                type: a,
                content: n
              }],
              cloudCustomData: i
            }
          });
        }
      }, {
        key: "getRoamingMessage",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getRoamingMessage"),
            n = e.conversationID,
            a = e.groupID,
            s = e.sequence,
            r = new va(ya.GET_GROUP_ROAMING_MESSAGES),
            i = 0,
            c = void 0;
          return Tt(a) && (a = bt(c = a)), this._computeLastSequence({
            groupID: a,
            topicID: c,
            sequence: s
          }).then(function (e) {
            return i = e, we.log("".concat(o, " groupID:").concat(a, " startSequence:").concat(i)), t.request({
              protocolName: hn,
              requestData: {
                groupID: a,
                count: 21,
                sequence: i,
                topicID: c
              }
            });
          }).then(function (e) {
            var s = e.data,
              u = s.messageList,
              l = s.complete;
            Ze(u) ? we.log("".concat(o, " ok. complete:").concat(l, " but messageList is undefined!")) : we.log("".concat(o, " ok. complete:").concat(l, " count:").concat(u.length)), r.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(a, " topicID:").concat(c, " startSequence:").concat(i, " complete:").concat(l, " count:").concat(u ? u.length : "undefined")).end();
            var d = t.getModule(co);
            if (2 === l || Vt(u)) return d.setCompleted(n), {
              nextReqID: "",
              storedMessageList: []
            };
            var p = u[u.length - 1].sequence - 1;
            d.updateRoamingMessageSequence(n, p);
            var g = d.onRoamingMessage(u, n);
            return d.updateIsRead(n), d.patchConversationLastMessage(n), we.log("".concat(o, " nextReqID:").concat(p, " stored message count:").concat(g.length)), {
              nextReqID: p + "",
              storedMessageList: g
            };
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                s = o[1];
              r.setError(e, n, s).setMessage("groupID:".concat(a, " topicID:").concat(c, " startSequence:").concat(i)).end();
            }), we.warn("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_getGroupIDOfMessage",
        value: function value(e) {
          return e.conversationID.replace(D.CONV_GROUP, "");
        }
      }, {
        key: "getReadReceiptList",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getReadReceiptList"),
            n = this._getGroupIDOfMessage(e[0]),
            a = this.getMyUserID(),
            s = e.filter(function (e) {
              return e.from === a && !0 === e.needReadReceipt;
            }).map(function (e) {
              return {
                sequence: e.sequence
              };
            });
          if (we.log("".concat(o, " groupID:").concat(n, " sequenceList:").concat(JSON.stringify(s))), 0 === s.length) return Ya({
            messageList: e
          });
          var r = new va(ya.GET_READ_RECEIPT);
          return r.setMessage("groupID:".concat(n)), this.request({
            protocolName: fn,
            requestData: {
              groupID: n,
              sequenceList: s
            }
          }).then(function (t) {
            r.end(), we.log("".concat(o, " ok"));
            var n = t.data.readReceiptList;
            return Qe(n) && n.forEach(function (t) {
              e.forEach(function (e) {
                0 === t.code && t.sequence === e.sequence && (e.readReceiptInfo.readCount = t.readCount, e.readReceiptInfo.unreadCount = t.unreadCount);
              });
            }), ba({
              messageList: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              r.setError(e, n, a).end();
            }), we.warn("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "sendReadReceipt",
        value: function value(e) {
          var t = this,
            o = this._getGroupIDOfMessage(e[0]),
            n = new va(ya.SEND_READ_RECEIPT);
          n.setMessage("groupID:".concat(o));
          var a = this.getMyUserID(),
            s = e.filter(function (e) {
              return e.from !== a && !0 === e.needReadReceipt;
            }).map(function (e) {
              return {
                sequence: e.sequence
              };
            });
          if (0 === s.length) return ja({
            code: na.READ_RECEIPT_MESSAGE_LIST_EMPTY,
            message: aa.READ_RECEIPT_MESSAGE_LIST_EMPTY
          });
          var r = "".concat(this._className, ".sendReadReceipt");
          return we.log("".concat(r, ". sequenceList:").concat(JSON.stringify(s))), this.request({
            protocolName: mn,
            requestData: {
              groupID: o,
              sequenceList: s
            }
          }).then(function (e) {
            return n.end(), we.log("".concat(r, " ok")), ba();
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.warn("".concat(r, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getReadReceiptDetail",
        value: function value(e) {
          var t = this,
            o = e.message,
            n = e.filter,
            a = e.cursor,
            s = e.count,
            r = this._getGroupIDOfMessage(o),
            i = o.ID,
            c = o.sequence,
            u = "".concat(this._className, ".getReadReceiptDetail"),
            l = this._receiptDetailCompleteMap.get(i) || !1,
            d = 0 !== n && 1 !== n ? 0 : n,
            p = ze(a) ? a : "",
            g = !$e(s) || s <= 0 || s >= 100 ? 100 : s,
            _ = "groupID:".concat(r, " sequence:").concat(c, " cursor:").concat(p, " filter:").concat(d, " completeFlag:").concat(l);
          we.log("".concat(u, " ").concat(_));
          var h = {
              cursor: "",
              isCompleted: !1,
              messageID: i,
              unreadUserIDList: [],
              readUserIDList: []
            },
            f = new va(ya.GET_READ_RECEIPT_DETAIL);
          return f.setMessage(_), this.request({
            protocolName: vn,
            requestData: {
              groupID: r,
              sequence: c,
              flag: d,
              cursor: p,
              count: g
            }
          }).then(function (e) {
            f.end();
            var o = e.data,
              n = o.cursor,
              a = o.isCompleted,
              s = o.unreadUserIDList,
              r = o.readUserIDList;
            return h.cursor = n, 1 === a && (h.isCompleted = !0, t._receiptDetailCompleteMap.set(i, !0)), 0 === d ? h.readUserIDList = r.map(function (e) {
              return e.userID;
            }) : 1 === d && (h.unreadUserIDList = s.map(function (e) {
              return e.userID;
            })), we.log("".concat(u, " ok")), ba(h);
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              f.setError(e, n, a).end();
            }), we.warn("".concat(u, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getRoamingMessagesHopping",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getRoamingMessagesHopping"),
            n = new va(ya.GET_GROUP_ROAMING_MESSAGES_HOPPING),
            a = e.groupID,
            s = e.count,
            r = e.sequence,
            i = void 0;
          return Tt(a) && (a = bt(i = a)), this.request({
            protocolName: hn,
            requestData: {
              groupID: a,
              count: s,
              sequence: r,
              topicID: i
            }
          }).then(function (s) {
            var c = s.data,
              u = c.messageList,
              l = c.complete,
              d = "groupID:".concat(a, " topicID:").concat(i, " sequence:").concat(r, " complete:").concat(l, " count:").concat(u ? u.length : 0);
            if (we.log("".concat(o, " ok. ").concat(d)), n.setNetworkType(t.getNetworkType()).setMessage("".concat(d)).end(), 2 === l || Vt(u)) return [];
            var p = "".concat(D.CONV_GROUP).concat(e.groupID);
            return t.getModule(co).onRoamingMessage(u, p, !1);
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                i = o[0],
                c = o[1];
              n.setError(e, i, c).setMessage("groupID:".concat(a, " sequence:").concat(r, " count:").concat(s)).end();
            }), we.warn("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "setMessageRead",
        value: function value(e) {
          var t = this,
            o = e.conversationID,
            n = e.lastMessageSeq,
            a = "".concat(this._className, ".setMessageRead");
          we.log("".concat(a, " conversationID:").concat(o, " lastMessageSeq:").concat(n)), $e(n) || we.warn("".concat(a, " 请勿修改 Conversation.lastMessage.lastSequence，否则可能会导致已读上报结果不准确"));
          var s = new va(ya.SET_GROUP_MESSAGE_READ);
          s.setMessage("".concat(o, "-").concat(n));
          var r = o.replace(D.CONV_GROUP, ""),
            i = void 0;
          return Tt(r) && (r = bt(i = r)), this.request({
            protocolName: gn,
            requestData: {
              groupID: r,
              topicID: i,
              messageReadSeq: n
            }
          }).then(function () {
            s.setNetworkType(t.getNetworkType()).end(), we.log("".concat(a, " ok."));
            var e = t.getModule(co);
            e.updateIsReadAfterReadReport({
              conversationID: o,
              lastMessageSeq: n
            });
            var c = !0;
            if (!Ze(i)) {
              c = !1;
              var u = t.getModule(io).getLocalTopic(r, i);
              u && u.updateSelfInfo({
                readedSequence: n
              });
            }
            return e.updateUnreadCount(o, c), ba();
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.log("".concat(a, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_computeLastSequence",
        value: function value(e) {
          var t = e.groupID,
            o = e.topicID,
            n = void 0 === o ? void 0 : o,
            a = e.sequence;
          return a > 0 ? Promise.resolve(a) : Ze(n) || this.hasLocalGroup(t) ? Ze(n) ? this.getGroupLastSequence(t) : this.getTopicLastSequence({
            groupID: t,
            topicID: n
          }) : Promise.resolve(0);
        }
      }, {
        key: "getGroupLastSequence",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".getGroupLastSequence"),
            n = new va(ya.GET_GROUP_LAST_SEQUENCE),
            a = 0,
            s = "";
          if (this.hasLocalGroup(e)) {
            var r = this.getLocalGroupProfile(e),
              i = r.lastMessage;
            if (i.lastSequence > 0 && !1 === i.onlineOnlyFlag) return a = i.lastSequence, s = "got lastSequence:".concat(a, " from local group profile[lastMessage.lastSequence]. groupID:").concat(e), we.log("".concat(o, " ").concat(s)), n.setNetworkType(this.getNetworkType()).setMessage("".concat(s)).end(), Promise.resolve(a);
            if (r.nextMessageSeq > 1) return a = r.nextMessageSeq - 1, s = "got lastSequence:".concat(a, " from local group profile[nextMessageSeq]. groupID:").concat(e), we.log("".concat(o, " ").concat(s)), n.setNetworkType(this.getNetworkType()).setMessage("".concat(s)).end(), Promise.resolve(a);
          }
          var c = "GROUP".concat(e),
            u = this.getModule(co).getLocalConversation(c);
          if (u && u.lastMessage.lastSequence && !1 === u.lastMessage.onlineOnlyFlag) return a = u.lastMessage.lastSequence, s = "got lastSequence:".concat(a, " from local conversation profile[lastMessage.lastSequence]. groupID:").concat(e), we.log("".concat(o, " ").concat(s)), n.setNetworkType(this.getNetworkType()).setMessage("".concat(s)).end(), Promise.resolve(a);
          var l = {
            groupIDList: [e],
            responseFilter: {
              groupBaseInfoFilter: ["NextMsgSeq"]
            }
          };
          return this.getGroupProfileAdvance(l).then(function (r) {
            var i = r.data.successGroupList;
            return Vt(i) ? we.log("".concat(o, " successGroupList is empty. groupID:").concat(e)) : (a = i[0].nextMessageSeq - 1, s = "got lastSequence:".concat(a, " from getGroupProfileAdvance. groupID:").concat(e), we.log("".concat(o, " ").concat(s))), n.setNetworkType(t.getNetworkType()).setMessage("".concat(s)).end(), a;
          }).catch(function (a) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                s = o[0],
                r = o[1];
              n.setError(a, s, r).setMessage("get lastSequence failed from getGroupProfileAdvance. groupID:".concat(e)).end();
            }), we.warn("".concat(o, " failed. error:"), a), ja(a);
          });
        }
      }, {
        key: "getTopicLastSequence",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.topicID,
            a = "".concat(this._className, ".getTopicLastSequence"),
            s = new va(ya.GET_TOPIC_LAST_SEQUENCE),
            r = 0,
            i = "",
            c = this.getModule(io);
          return c.hasLocalTopic(o, n) ? (r = c.getLocalTopic(o, n).nextMessageSeq - 1, i = "get lastSequence:".concat(r, " from local topic info[nextMessageSeq]. topicID:").concat(n), we.log("".concat(a, " ").concat(i)), s.setNetworkType(this.getNetworkType()).setMessage("".concat(i)).end(), Promise.resolve(r)) : c.getTopicList({
            groupID: o,
            topicIDList: [n]
          }).then(function (e) {
            var o = e.data.successTopicList;
            return Vt(o) ? we.log("".concat(a, " successTopicList is empty. topicID:").concat(n)) : (r = o[0].nextMessageSeq - 1, i = "get lastSequence:".concat(r, " from getTopicList. topicID:").concat(n), we.log("".concat(a, " ").concat(i))), s.setNetworkType(t.getNetworkType()).setMessage("".concat(i)).end(), r;
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                r = o[1];
              s.setError(e, a, r).setMessage("get lastSequence failed from getTopicList. topicID:".concat(n)).end();
            }), we.warn("".concat(a, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "isMessageFromOrToAVChatroom",
        value: function value(e) {
          return !!this._AVChatRoomHandler && this._AVChatRoomHandler.checkJoinedAVChatRoomByID(e);
        }
      }, {
        key: "hasJoinedAVChatRoom",
        value: function value() {
          return this._AVChatRoomHandler ? this._AVChatRoomHandler.hasJoinedAVChatRoom() : 0;
        }
      }, {
        key: "getJoinedAVChatRoom",
        value: function value() {
          return this._AVChatRoomHandler ? this._AVChatRoomHandler.getJoinedAVChatRoom() : [];
        }
      }, {
        key: "isOnlineMessage",
        value: function value(e, t) {
          return !(!this._canIUseOnlineOnlyFlag(e) || !t || !0 !== t.onlineUserOnly);
        }
      }, {
        key: "_canIUseOnlineOnlyFlag",
        value: function value(e) {
          var t = this.getJoinedAVChatRoom();
          return !t || !t.includes(e.to) || e.conversationType !== D.CONV_GROUP;
        }
      }, {
        key: "_onAVChatRoomHistoryMessage",
        value: function value(e) {
          if (!Vt(e)) {
            we.log("".concat(this._className, "._onAVChatRoomHistoryMessage count:").concat(e.length));
            var o = [];
            e.forEach(function (e) {
              o.push(t(t({}, e), {}, {
                isHistoryMessage: 1
              }));
            }), this.onAVChatRoomMessage(o);
          }
        }
      }, {
        key: "onAVChatRoomMessage",
        value: function value(e) {
          this._AVChatRoomHandler && this._AVChatRoomHandler.onMessage(e);
        }
      }, {
        key: "getGroupSimplifiedInfo",
        value: function value(e) {
          var t = this,
            o = new va(ya.GET_GROUP_SIMPLIFIED_INFO),
            n = {
              groupIDList: [e],
              responseFilter: {
                groupBaseInfoFilter: ["Type", "Name"]
              }
            };
          return this.getGroupProfileAdvance(n).then(function (n) {
            var a = n.data.successGroupList;
            return o.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(e, " type:").concat(a[0].type)).end(), a[0];
          }).catch(function (n) {
            t.probeNetwork().then(function (t) {
              var a = m(t, 2),
                s = a[0],
                r = a[1];
              o.setError(n, s, r).setMessage("groupID:".concat(e)).end();
            });
          });
        }
      }, {
        key: "setUnjoinedAVChatRoom",
        value: function value(e) {
          this._unjoinedAVChatRoomList.set(e, 1);
        }
      }, {
        key: "deleteUnjoinedAVChatRoom",
        value: function value(e) {
          this._unjoinedAVChatRoomList.has(e) && this._unjoinedAVChatRoomList.delete(e);
        }
      }, {
        key: "isUnjoinedAVChatRoom",
        value: function value(e) {
          return this._unjoinedAVChatRoomList.has(e);
        }
      }, {
        key: "onGroupAttributesUpdated",
        value: function value(e) {
          this._groupAttributesHandler && this._groupAttributesHandler.onGroupAttributesUpdated(e);
        }
      }, {
        key: "updateLocalMainSequenceOnReconnected",
        value: function value() {
          this._groupAttributesHandler && this._groupAttributesHandler.updateLocalMainSequenceOnReconnected();
        }
      }, {
        key: "initGroupAttributes",
        value: function value(e) {
          return this._groupAttributesHandler.initGroupAttributes(e);
        }
      }, {
        key: "setGroupAttributes",
        value: function value(e) {
          return this._groupAttributesHandler.setGroupAttributes(e);
        }
      }, {
        key: "deleteGroupAttributes",
        value: function value(e) {
          return this._groupAttributesHandler.deleteGroupAttributes(e);
        }
      }, {
        key: "getGroupAttributes",
        value: function value(e) {
          return this._groupAttributesHandler.getGroupAttributes(e);
        }
      }, {
        key: "reset",
        value: function value() {
          this.groupMap.clear(), this._unjoinedAVChatRoomList.clear(), this._receiptDetailCompleteMap.clear(), this._commonGroupHandler.reset(), this._groupSystemNoticeHandler.reset(), this._groupTipsHandler.reset(), this._AVChatRoomHandler && this._AVChatRoomHandler.reset();
        }
      }]), a;
    }(Do),
    Ns = function () {
      function e(t) {
        n(this, e), this.userID = "", this.avatar = "", this.nick = "", this.role = "", this.joinTime = "", this.lastSendMsgTime = "", this.nameCard = "", this.muteUntil = 0, this.memberCustomField = [], this._initMember(t);
      }
      return s(e, [{
        key: "_initMember",
        value: function value(e) {
          this.updateMember(e);
        }
      }, {
        key: "updateMember",
        value: function value(e) {
          var t = [null, void 0, "", 0, NaN];
          e.memberCustomField && vt(this.memberCustomField, e.memberCustomField), ct(this, e, ["memberCustomField"], t);
        }
      }, {
        key: "updateRole",
        value: function value(e) {
          ["Owner", "Admin", "Member"].indexOf(e) < 0 || (this.role = e);
        }
      }, {
        key: "updateMuteUntil",
        value: function value(e) {
          Ze(e) || (this.muteUntil = Math.floor((Date.now() + 1e3 * e) / 1e3));
        }
      }, {
        key: "updateNameCard",
        value: function value(e) {
          Ze(e) || (this.nameCard = e);
        }
      }, {
        key: "updateMemberCustomField",
        value: function value(e) {
          e && vt(this.memberCustomField, e);
        }
      }]), e;
    }(),
    As = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        return n(this, a), (t = o.call(this, e))._className = "GroupMemberModule", t.groupMemberListMap = new Map(), t.getInnerEmitterInstance().on(Qa, t._onProfileUpdated, _(t)), t;
      }
      return s(a, [{
        key: "_onProfileUpdated",
        value: function value(e) {
          for (var t = this, o = e.data, n = function n(e) {
              var n = o[e];
              t.groupMemberListMap.forEach(function (e) {
                e.has(n.userID) && e.get(n.userID).updateMember({
                  nick: n.nick,
                  avatar: n.avatar
                });
              });
            }, a = 0; a < o.length; a++) {
            n(a);
          }
        }
      }, {
        key: "deleteGroupMemberList",
        value: function value(e) {
          this.groupMemberListMap.delete(e);
        }
      }, {
        key: "getGroupMemberList",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.offset,
            a = void 0 === n ? 0 : n,
            s = e.count,
            r = void 0 === s ? 15 : s,
            i = "".concat(this._className, ".getGroupMemberList"),
            c = new va(ya.GET_GROUP_MEMBER_LIST);
          we.log("".concat(i, " groupID:").concat(o, " offset:").concat(a, " count:").concat(r));
          var u = 0,
            l = {
              groupID: o,
              limit: r > 100 ? 100 : r
            };
          Et({
            groupID: o
          }) ? l.next = "".concat(a) : (l.offset = a, u = a + 1);
          var d = [];
          return this.request({
            protocolName: kn,
            requestData: l
          }).then(function (e) {
            var n = e.data,
              a = n.members,
              s = n.memberNum,
              r = n.next,
              i = void 0 === r ? void 0 : r;
            if (Ze(i) || (u = Vt(i) ? 0 : i), !Qe(a) || 0 === a.length) return u = 0, Promise.resolve([]);
            var c = t.getModule(ao);
            return c.hasLocalGroup(o) && (c.getLocalGroupProfile(o).memberNum = s), d = t._updateLocalGroupMemberMap(o, a), t.getModule(oo).getUserProfile({
              userIDList: a.map(function (e) {
                return e.userID;
              }),
              tagList: [Fe.NICK, Fe.AVATAR]
            });
          }).then(function (e) {
            var n = e.data;
            if (!Qe(n) || 0 === n.length) return Ya({
              memberList: [],
              offset: u
            });
            var a = n.map(function (e) {
              return {
                userID: e.userID,
                nick: e.nick,
                avatar: e.avatar
              };
            });
            return t._updateLocalGroupMemberMap(o, a), c.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(o, " offset:").concat(u, " count:").concat(r)).end(), we.log("".concat(i, " ok.")), ba({
              memberList: d,
              offset: u
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              c.setError(e, n, a).end();
            }), we.error("".concat(i, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getGroupMemberProfile",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".getGroupMemberProfile"),
            a = new va(ya.GET_GROUP_MEMBER_PROFILE);
          a.setMessage(e.userIDList.length > 5 ? "userIDList.length:".concat(e.userIDList.length) : "userIDList:".concat(e.userIDList)), we.log("".concat(n, " groupID:").concat(e.groupID, " userIDList:").concat(e.userIDList.join(","))), e.userIDList.length > 50 && (e.userIDList = e.userIDList.slice(0, 50));
          var s = e.groupID,
            r = e.userIDList;
          return this._getGroupMemberProfileAdvance(t(t({}, e), {}, {
            userIDList: r
          })).then(function (e) {
            var t = e.data.members;
            return Qe(t) && 0 !== t.length ? (o._updateLocalGroupMemberMap(s, t), o.getModule(oo).getUserProfile({
              userIDList: t.map(function (e) {
                return e.userID;
              }),
              tagList: [Fe.NICK, Fe.AVATAR]
            })) : Ya([]);
          }).then(function (e) {
            var t = e.data.map(function (e) {
              return {
                userID: e.userID,
                nick: e.nick,
                avatar: e.avatar
              };
            });
            o._updateLocalGroupMemberMap(s, t);
            var n = r.filter(function (e) {
              return o.hasLocalGroupMember(s, e);
            }).map(function (e) {
              return o.getLocalGroupMemberInfo(s, e);
            });
            return a.setNetworkType(o.getNetworkType()).end(), ba({
              memberList: n
            });
          });
        }
      }, {
        key: "addGroupMember",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".addGroupMember"),
            n = e.groupID,
            a = this.getModule(ao).getLocalGroupProfile(n),
            s = a.type,
            r = new va(ya.ADD_GROUP_MEMBER);
          if (r.setMessage("groupID:".concat(n, " groupType:").concat(s)), It(s)) {
            var i = new Ba({
              code: na.CANNOT_ADD_MEMBER_IN_AVCHATROOM,
              message: aa.CANNOT_ADD_MEMBER_IN_AVCHATROOM
            });
            return r.setCode(na.CANNOT_ADD_MEMBER_IN_AVCHATROOM).setError(aa.CANNOT_ADD_MEMBER_IN_AVCHATROOM).setNetworkType(this.getNetworkType()).end(), ja(i);
          }
          return e.userIDList = e.userIDList.map(function (e) {
            return {
              userID: e
            };
          }), we.log("".concat(o, " groupID:").concat(n)), this.request({
            protocolName: Pn,
            requestData: e
          }).then(function (n) {
            var s = n.data.members;
            we.log("".concat(o, " ok"));
            var i = s.filter(function (e) {
                return 1 === e.result;
              }).map(function (e) {
                return e.userID;
              }),
              c = s.filter(function (e) {
                return 0 === e.result;
              }).map(function (e) {
                return e.userID;
              }),
              u = s.filter(function (e) {
                return 2 === e.result;
              }).map(function (e) {
                return e.userID;
              }),
              l = s.filter(function (e) {
                return 4 === e.result;
              }).map(function (e) {
                return e.userID;
              }),
              d = "groupID:".concat(e.groupID, ", ") + "successUserIDList:".concat(i, ", ") + "failureUserIDList:".concat(c, ", ") + "existedUserIDList:".concat(u, ", ") + "overLimitUserIDList:".concat(l);
            return r.setNetworkType(t.getNetworkType()).setMoreMessage(d).end(), 0 === i.length ? ba({
              successUserIDList: i,
              failureUserIDList: c,
              existedUserIDList: u,
              overLimitUserIDList: l
            }) : (a.memberCount += i.length, t._updateConversationGroupProfile(a), ba({
              successUserIDList: i,
              failureUserIDList: c,
              existedUserIDList: u,
              overLimitUserIDList: l,
              group: a
            }));
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              r.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "deleteGroupMember",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".deleteGroupMember"),
            n = e.groupID,
            a = e.userIDList,
            s = new va(ya.DELETE_GROUP_MEMBER),
            r = "groupID:".concat(n, " ").concat(a.length > 5 ? "userIDList.length:".concat(a.length) : "userIDList:".concat(a));
          s.setMessage(r), we.log("".concat(o, " groupID:").concat(n, " userIDList:"), a);
          var i = this.getModule(ao).getLocalGroupProfile(n);
          return It(i.type) ? ja(new Ba({
            code: na.CANNOT_KICK_MEMBER_IN_AVCHATROOM,
            message: aa.CANNOT_KICK_MEMBER_IN_AVCHATROOM
          })) : this.request({
            protocolName: Un,
            requestData: e
          }).then(function () {
            return s.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok")), i.memberCount -= 1, t._updateConversationGroupProfile(i), t.deleteLocalGroupMembers(n, a), ba({
              group: i,
              userIDList: a
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "_updateConversationGroupProfile",
        value: function value(e) {
          this.getModule(co).updateConversationGroupProfile([e]);
        }
      }, {
        key: "setGroupMemberMuteTime",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.userID,
            a = e.muteTime,
            s = "".concat(this._className, ".setGroupMemberMuteTime");
          if (n === this.getMyUserID()) return ja(new Ba({
            code: na.CANNOT_MUTE_SELF,
            message: aa.CANNOT_MUTE_SELF
          }));
          we.log("".concat(s, " groupID:").concat(o, " userID:").concat(n));
          var r = new va(ya.SET_GROUP_MEMBER_MUTE_TIME);
          return r.setMessage("groupID:".concat(o, " userID:").concat(n, " muteTime:").concat(a)), this.modifyGroupMemberInfo({
            groupID: o,
            userID: n,
            muteTime: a
          }).then(function (e) {
            r.setNetworkType(t.getNetworkType()).end(), we.log("".concat(s, " ok"));
            var n = t.getModule(ao);
            return ba({
              group: n.getLocalGroupProfile(o),
              member: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              r.setError(e, n, a).end();
            }), we.error("".concat(s, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "setGroupMemberRole",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".setGroupMemberRole"),
            n = e.groupID,
            a = e.userID,
            s = e.role,
            r = this.getModule(ao).getLocalGroupProfile(n);
          if (r.selfInfo.role !== D.GRP_MBR_ROLE_OWNER) return ja({
            code: na.NOT_OWNER,
            message: aa.NOT_OWNER
          });
          if ([D.GRP_WORK, D.GRP_AVCHATROOM].includes(r.type)) return ja({
            code: na.CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM,
            message: aa.CANNOT_SET_MEMBER_ROLE_IN_WORK_AND_AVCHATROOM
          });
          var i = [D.GRP_MBR_ROLE_ADMIN, D.GRP_MBR_ROLE_MEMBER];
          if (Et({
            groupID: n
          }) && i.push(D.GRP_MBR_ROLE_CUSTOM), i.indexOf(s) < 0) return ja({
            code: na.INVALID_MEMBER_ROLE,
            message: aa.INVALID_MEMBER_ROLE
          });
          if (a === this.getMyUserID()) return ja({
            code: na.CANNOT_SET_SELF_MEMBER_ROLE,
            message: aa.CANNOT_SET_SELF_MEMBER_ROLE
          });
          var c = new va(ya.SET_GROUP_MEMBER_ROLE);
          return c.setMessage("groupID:".concat(n, " userID:").concat(a, " role:").concat(s)), we.log("".concat(o, " groupID:").concat(n, " userID:").concat(a)), this.modifyGroupMemberInfo({
            groupID: n,
            userID: a,
            role: s
          }).then(function (e) {
            return c.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok")), ba({
              group: r,
              member: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              c.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "setGroupMemberNameCard",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".setGroupMemberNameCard"),
            n = e.groupID,
            a = e.userID,
            s = void 0 === a ? this.getMyUserID() : a,
            r = e.nameCard;
          we.log("".concat(o, " groupID:").concat(n, " userID:").concat(s));
          var i = new va(ya.SET_GROUP_MEMBER_NAME_CARD);
          return i.setMessage("groupID:".concat(n, " userID:").concat(s, " nameCard:").concat(r)), this.modifyGroupMemberInfo({
            groupID: n,
            userID: s,
            nameCard: r
          }).then(function (e) {
            we.log("".concat(o, " ok")), i.setNetworkType(t.getNetworkType()).end();
            var a = t.getModule(ao).getLocalGroupProfile(n);
            return s === t.getMyUserID() && a && a.setSelfNameCard(r), ba({
              group: a,
              member: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              i.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "setGroupMemberCustomField",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".setGroupMemberCustomField"),
            n = e.groupID,
            a = e.userID,
            s = void 0 === a ? this.getMyUserID() : a,
            r = e.memberCustomField;
          we.log("".concat(o, " groupID:").concat(n, " userID:").concat(s));
          var i = new va(ya.SET_GROUP_MEMBER_CUSTOM_FIELD);
          return i.setMessage("groupID:".concat(n, " userID:").concat(s, " memberCustomField:").concat(JSON.stringify(r))), this.modifyGroupMemberInfo({
            groupID: n,
            userID: s,
            memberCustomField: r
          }).then(function (e) {
            i.setNetworkType(t.getNetworkType()).end(), we.log("".concat(o, " ok"));
            var a = t.getModule(ao).getLocalGroupProfile(n);
            return ba({
              group: a,
              member: e
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              i.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "modifyGroupMemberInfo",
        value: function value(e) {
          var o = this,
            n = e.groupID,
            a = e.userID,
            s = void 0;
          return Tt(n) && (n = bt(s = n)), this.request({
            protocolName: wn,
            requestData: t(t({}, e), {}, {
              groupID: n,
              topicID: s
            })
          }).then(function () {
            if (o.hasLocalGroupMember(n, a)) {
              var t = o.getLocalGroupMemberInfo(n, a);
              return Ze(e.muteTime) || t.updateMuteUntil(e.muteTime), Ze(e.role) || t.updateRole(e.role), Ze(e.nameCard) || t.updateNameCard(e.nameCard), Ze(e.memberCustomField) || t.updateMemberCustomField(e.memberCustomField), t;
            }
            return o.getGroupMemberProfile({
              groupID: n,
              userIDList: [a]
            }).then(function (e) {
              return m(e.data.memberList, 1)[0];
            });
          });
        }
      }, {
        key: "_getGroupMemberProfileAdvance",
        value: function value(e) {
          return this.request({
            protocolName: Gn,
            requestData: t(t({}, e), {}, {
              memberInfoFilter: e.memberInfoFilter ? e.memberInfoFilter : ["Role", "JoinTime", "NameCard", "ShutUpUntil"]
            })
          });
        }
      }, {
        key: "_updateLocalGroupMemberMap",
        value: function value(e, t) {
          var o = this;
          return Qe(t) && 0 !== t.length ? t.map(function (t) {
            return o.hasLocalGroupMember(e, t.userID) ? o.getLocalGroupMemberInfo(e, t.userID).updateMember(t) : o.setLocalGroupMember(e, new Ns(t)), o.getLocalGroupMemberInfo(e, t.userID);
          }) : [];
        }
      }, {
        key: "deleteLocalGroupMembers",
        value: function value(e, t) {
          var o = this.groupMemberListMap.get(e);
          o && t.forEach(function (e) {
            o.delete(e);
          });
        }
      }, {
        key: "getLocalGroupMemberInfo",
        value: function value(e, t) {
          return this.groupMemberListMap.has(e) ? this.groupMemberListMap.get(e).get(t) : null;
        }
      }, {
        key: "setLocalGroupMember",
        value: function value(e, t) {
          if (this.groupMemberListMap.has(e)) this.groupMemberListMap.get(e).set(t.userID, t);else {
            var o = new Map().set(t.userID, t);
            this.groupMemberListMap.set(e, o);
          }
        }
      }, {
        key: "getLocalGroupMemberList",
        value: function value(e) {
          return this.groupMemberListMap.get(e);
        }
      }, {
        key: "hasLocalGroupMember",
        value: function value(e, t) {
          return this.groupMemberListMap.has(e) && this.groupMemberListMap.get(e).has(t);
        }
      }, {
        key: "hasLocalGroupMemberMap",
        value: function value(e) {
          return this.groupMemberListMap.has(e);
        }
      }, {
        key: "reset",
        value: function value() {
          this.groupMemberListMap.clear();
        }
      }]), a;
    }(Do),
    Os = ["topicID", "topicName", "avatar", "introduction", "notification", "unreadCount", "muteAllMembers", "customData", "groupAtInfoList", "nextMessageSeq", "selfInfo"],
    Rs = function Rs(e) {
      return Ze(e) ? {
        lastTime: 0,
        lastSequence: 0,
        fromAccount: "",
        payload: null,
        type: "",
        onlineOnlyFlag: !1
      } : e ? {
        lastTime: e.time || 0,
        lastSequence: e.sequence || 0,
        fromAccount: e.from || "",
        payload: e.payload || null,
        type: e.type || "",
        onlineOnlyFlag: e._onlineOnlyFlag || !1
      } : void 0;
    },
    Ls = function () {
      function e(t) {
        n(this, e), this.topicID = "", this.topicName = "", this.avatar = "", this.introduction = "", this.notification = "", this.unreadCount = 0, this.muteAllMembers = !1, this.customData = "", this.groupAtInfoList = [], this.nextMessageSeq = 0, this.lastMessage = Rs(t.lastMessage), this.selfInfo = {
          muteTime: 0,
          readedSequence: 0,
          messageRemindType: ""
        }, this._initGroupTopic(t);
      }
      return s(e, [{
        key: "_initGroupTopic",
        value: function value(e) {
          for (var t in e) {
            Os.indexOf(t) < 0 || ("selfInfo" === t ? this.updateSelfInfo(e[t]) : this[t] = "muteAllMembers" === t ? 1 === e[t] : e[t]);
          }
        }
      }, {
        key: "updateUnreadCount",
        value: function value() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          this.unreadCount = e;
        }
      }, {
        key: "updateNextMessageSeq",
        value: function value(e) {
          this.nextMessageSeq = e;
        }
      }, {
        key: "updateLastMessage",
        value: function value(e) {
          this.lastMessage = Rs(e);
        }
      }, {
        key: "updateGroupAtInfoList",
        value: function value(e) {
          this.groupAtInfoList = JSON.parse(JSON.stringify(e));
        }
      }, {
        key: "updateTopic",
        value: function value(e) {
          Ze(e.selfInfo) || this.updateSelfInfo(e.selfInfo), Ze(e.muteAllMembers) || (this.muteAllMembers = 1 === e.muteAllMembers), ct(this, e, ["groupID", "lastMessageTime", "selfInfo", "muteAllMembers"]);
        }
      }, {
        key: "updateSelfInfo",
        value: function value(e) {
          ct(this.selfInfo, e, [], [""]);
        }
      }]), e;
    }(),
    ks = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        return n(this, a), (t = o.call(this, e))._className = "TopicModule", t._topicMap = new Map(), t._getTopicTimeMap = new Map(), t.TOPIC_CACHE_TIME = 300, t.TOPIC_LAST_ACTIVE_TIME = 3600, t.getInnerEmitterInstance().on(Xa, t._onCloudConfigUpdated, _(t)), t;
      }
      return s(a, [{
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this.getCloudConfig("topic_cache_time"),
            t = this.getCloudConfig("topic_last_active_time");
          Ze(e) || (this.TOPIC_CACHE_TIME = Number(e)), Ze(t) || (this.TOPIC_LAST_ACTIVE_TIME = Number(t));
        }
      }, {
        key: "onTopicCreated",
        value: function value(e) {
          var t = e.groupID;
          this.resetGetTopicTime(t), this.emitOuterEvent(S.TOPIC_CREATED, e);
        }
      }, {
        key: "onTopicDeleted",
        value: function value(e) {
          var t = this,
            o = e.groupID,
            n = e.topicIDList;
          (void 0 === n ? [] : n).forEach(function (e) {
            t._deleteLocalTopic(o, e);
          }), this.emitOuterEvent(S.TOPIC_DELETED, e);
        }
      }, {
        key: "onTopicProfileUpdated",
        value: function value(e) {
          var t = e.groupID,
            o = e.topicID,
            n = this.getLocalTopic(t, o);
          n && (n.updateTopic(e), this.emitOuterEvent(S.TOPIC_UPDATED, {
            groupID: t,
            topic: n
          }));
        }
      }, {
        key: "onConversationProxy",
        value: function value(e) {
          var t = e.topicID,
            o = e.unreadCount,
            n = e.groupAtInfoList,
            a = bt(t),
            s = this.getLocalTopic(a, t),
            r = !1;
          s && (Ze(o) || s.unreadCount === o || (s.updateUnreadCount(o), r = !0), Ze(n) || (s.updateGroupAtInfoList(n), r = !0)), r && this.emitOuterEvent(S.TOPIC_UPDATED, {
            groupID: a,
            topic: s
          });
        }
      }, {
        key: "onMessageSent",
        value: function value(e) {
          var t = e.groupID,
            o = e.topicID,
            n = e.lastMessage,
            a = this.getLocalTopic(t, o);
          a && (a.nextMessageSeq += 1, a.updateLastMessage(n), this.emitOuterEvent(S.TOPIC_UPDATED, {
            groupID: t,
            topic: a
          }));
        }
      }, {
        key: "onMessageModified",
        value: function value(e) {
          var t = e.to,
            o = e.time,
            n = e.sequence,
            a = e.elements,
            s = e.cloudCustomData,
            r = e.messageVersion,
            i = bt(t),
            c = this.getLocalTopic(i, t);
          if (c) {
            var u = c.lastMessage;
            we.debug("".concat(this._className, ".onMessageModified topicID:").concat(t, " lastMessage:"), JSON.stringify(u), "options:", JSON.stringify(e)), u && (null === u.payload || u.lastTime === o && u.lastSequence === n && u.version !== r) && (u.type = a[0].type, u.payload = a[0].content, u.messageForShow = Ft(u.type, u.payload), u.cloudCustomData = s, u.version = r, u.lastSequence = n, u.lastTime = o, this.emitOuterEvent(S.TOPIC_UPDATED, {
              groupID: i,
              topic: c
            }));
          }
        }
      }, {
        key: "getJoinedCommunityList",
        value: function value() {
          return this.getModule(ao).getGroupList({
            isGroupWithTopicOnly: !0
          }).then(function (e) {
            var t = e.data.groupList;
            return ba({
              groupList: void 0 === t ? [] : t
            });
          }).catch(function (e) {
            return ja(e);
          });
        }
      }, {
        key: "createTopicInCommunity",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".createTopicInCommunity"),
            a = e.topicID;
          if (!Ze(a) && !Tt(a)) return ja({
            code: na.ILLEGAL_TOPIC_ID,
            message: aa.ILLEGAL_TOPIC_ID
          });
          var s = new va(ya.CREATE_TOPIC);
          return this.request({
            protocolName: Zn,
            requestData: t({}, e)
          }).then(function (a) {
            var r = a.data.topicID;
            return s.setMessage("topicID:".concat(r)).setNetworkType(o.getNetworkType()).end(), we.log("".concat(n, " ok")), o._updateTopicMap([t(t({}, e), {}, {
              topicID: r
            })]), ba({
              topicID: r
            });
          }).catch(function (e) {
            return o.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), we.error("".concat(n, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "deleteTopicFromCommunity",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".deleteTopicFromCommunity"),
            n = e.groupID,
            a = e.topicIDList,
            s = void 0 === a ? [] : a,
            r = new va(ya.DELETE_TOPIC);
          return r.setMessage("groupID:".concat(n, " topicIDList:").concat(s)), this.request({
            protocolName: ea,
            requestData: {
              groupID: n,
              topicIDList: s
            }
          }).then(function (e) {
            var o = e.data.resultList,
              a = void 0 === o ? [] : o,
              s = a.filter(function (e) {
                return 0 === e.code;
              }).map(function (e) {
                return {
                  topicID: e.topicID
                };
              }),
              i = a.filter(function (e) {
                return 0 !== e.code;
              }),
              c = "success count:".concat(s.length, ", fail count:").concat(i.length);
            return r.setMoreMessage("".concat(c)).setNetworkType(t.getNetworkType()).end(), we.log("".concat(c)), s.forEach(function (e) {
              t._deleteLocalTopic(n, e.topicID);
            }), ba({
              successTopicList: s,
              failureTopicList: i
            });
          }).catch(function (e) {
            return t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              r.setError(e, n, a).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "updateTopicProfile",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".updateTopicProfile"),
            a = new va(ya.UPDATE_TOPIC_PROFILE);
          return a.setMessage("groupID:".concat(e.groupID, " topicID:").concat(e.topicID)), we.log("".concat(n, " options:"), e), Ze(e.muteAllMembers) || (e.muteAllMembers = !0 === e.muteAllMembers ? "On" : "Off"), this.request({
            protocolName: ta,
            requestData: t({}, e)
          }).then(function () {
            return a.setNetworkType(o.getNetworkType()).end(), we.log("".concat(n, " ok")), o._updateTopicMap([e]), ba({
              topic: o.getLocalTopic(e.groupID, e.topicID)
            });
          }).catch(function (e) {
            return o.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                s = o[1];
              a.setError(e, n, s).end();
            }), we.error("".concat(n, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getTopicList",
        value: function value(e) {
          var o = this,
            n = "".concat(this._className, ".getTopicList"),
            a = e.groupID,
            s = e.topicIDList,
            r = void 0 === s ? [] : s,
            i = new va(ya.GET_TOPIC_LIST);
          if (i.setMessage("groupID:".concat(a)), this._getTopicTimeMap.has(a)) {
            var c = this._getTopicTimeMap.get(a);
            if (Date.now() - c < 1e3 * this.TOPIC_CACHE_TIME) {
              var u = this._getLocalTopicList(a, r);
              return i.setNetworkType(this.getNetworkType()).setMoreMessage("from cache. topicList:".concat(u.length)).end(), we.log("".concat(n, " groupID:").concat(a, " from cache. topicList:").concat(u.length)), Ya({
                successTopicList: u,
                failureTopicList: []
              });
            }
          }
          return this.request({
            protocolName: oa,
            requestData: {
              groupID: a,
              topicIDList: r
            }
          }).then(function (e) {
            var s = e.data.topicInfoList,
              c = [],
              u = [],
              l = [];
            (void 0 === s ? [] : s).forEach(function (e) {
              var o = e.topic,
                n = e.selfInfo,
                a = e.code,
                s = e.message,
                r = o.topicID;
              0 === a ? (c.push(t(t({}, o), {}, {
                selfInfo: n
              })), u.push(r)) : l.push({
                topicID: r,
                code: a,
                message: s
              });
            }), o._updateTopicMap(c);
            var d = "successTopicList:".concat(u.length, " failureTopicList:").concat(l.length);
            i.setNetworkType(o.getNetworkType()).setMoreMessage("".concat(d)).end(), we.log("".concat(n, " groupID:").concat(a, " from remote. ").concat(d)), Vt(r) && !Vt(u) && o._getTopicTimeMap.set(a, Date.now());
            var p = [];
            return Vt(u) || (p = o._getLocalTopicList(a, u)), ba({
              successTopicList: p,
              failureTopicList: l
            });
          }).catch(function (e) {
            return o.probeNetwork(e).then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              i.setError(e, n, a).end();
            }), we.error("".concat(n, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "hasLocalTopic",
        value: function value(e, t) {
          return !!this._topicMap.has(e) && !!this._topicMap.get(e).has(t);
        }
      }, {
        key: "getLocalTopic",
        value: function value(e, t) {
          var o = null;
          return this._topicMap.has(e) && (o = this._topicMap.get(e).get(t)), o;
        }
      }, {
        key: "_getLocalTopicList",
        value: function value(e) {
          var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
            o = this._topicMap.get(e),
            n = [];
          return o && (n = M(o.values())), 0 === t.length ? n : n.filter(function (e) {
            return t.includes(e.topicID);
          });
        }
      }, {
        key: "_deleteLocalTopic",
        value: function value(e, t) {
          this._topicMap.has(e) && this._topicMap.get(e).delete(t);
        }
      }, {
        key: "_updateTopicMap",
        value: function value(e) {
          var t = this,
            o = [];
          (e.forEach(function (e) {
            var n = e.groupID,
              a = e.topicID,
              s = null;
            t._topicMap.has(n) || t._topicMap.set(n, new Map()), t._topicMap.get(n).has(a) ? (s = t._topicMap.get(n).get(a)).updateTopic(e) : (s = new Ls(e), t._topicMap.get(n).set(a, s));
            var r = s.nextMessageSeq - s.selfInfo.readedSequence - 1;
            o.push({
              conversationID: "".concat(D.CONV_GROUP).concat(a),
              type: D.CONV_TOPIC,
              unreadCount: r > 0 ? r : 0
            });
          }), o.length > 0) && this.getModule(co).updateTopicConversation(o);
        }
      }, {
        key: "resetGetTopicTime",
        value: function value(e) {
          var t = this;
          Ze(e) ? M(this._getTopicTimeMap.keys()).forEach(function (e) {
            t._getTopicTimeMap.set(e, 0);
          }) : this._getTopicTimeMap.set(e, 0);
        }
      }, {
        key: "getTopicListOnReconnected",
        value: function value() {
          var e = this,
            t = M(this._topicMap.keys()),
            o = [];
          t.forEach(function (t) {
            var n = [];
            e._getLocalTopicList(t).forEach(function (t) {
              var o = t.lastMessage.lastTime,
                a = void 0 === o ? 0 : o;
              Date.now() - 1e3 * a < 1e3 * e.TOPIC_LAST_ACTIVE_TIME && n.push(t.topicID);
            }), n.length > 0 && o.push({
              groupID: t,
              topicIDList: n
            });
          }), we.log("".concat(this._className, ".getTopicListOnReconnected. active community count:").concat(o.length)), this._relayGetTopicList(o);
        }
      }, {
        key: "_relayGetTopicList",
        value: function value(e) {
          var t = this;
          if (0 !== e.length) {
            var o = e.shift(),
              n = o.topicIDList.length > 5 ? "topicIDList.length:".concat(o.topicIDList.length) : "topicIDList:".concat(o.topicIDList),
              a = new va(ya.RELAY_GET_TOPIC_LIST);
            a.setMessage(n), we.log("".concat(this._className, "._relayGetTopicList. ").concat(n)), this.getTopicList(o).then(function () {
              a.setNetworkType(t.getNetworkType()).end(), t._relayGetTopicList(e);
            }).catch(function (o) {
              t.probeNetwork().then(function (e) {
                var t = m(e, 2),
                  n = t[0],
                  s = t[1];
                a.setError(o, n, s).end();
              }), t._relayGetTopicList(e);
            });
          }
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._topicMap.clear(), this._getTopicTimeMap.clear(), this.TOPIC_CACHE_TIME = 300, this.TOPIC_LAST_ACTIVE_TIME = 3600;
        }
      }]), a;
    }(Do),
    Gs = function () {
      function e(t) {
        n(this, e), this._userModule = t, this._className = "ProfileHandler", this.TAG = "profile", this.accountProfileMap = new Map(), this.expirationTime = 864e5;
      }
      return s(e, [{
        key: "setExpirationTime",
        value: function value(e) {
          this.expirationTime = e;
        }
      }, {
        key: "getUserProfile",
        value: function value(e) {
          var t = this,
            o = e.userIDList;
          e.fromAccount = this._userModule.getMyAccount(), o.length > 100 && (we.warn("".concat(this._className, ".getUserProfile 获取用户资料人数不能超过100人")), o.length = 100);
          for (var n, a = [], s = [], r = 0, i = o.length; r < i; r++) {
            n = o[r], this._userModule.isMyFriend(n) && this._containsAccount(n) ? s.push(this._getProfileFromMap(n)) : a.push(n);
          }
          if (0 === a.length) return Ya(s);
          e.toAccount = a;
          var c = e.bFromGetMyProfile || !1,
            u = [];
          e.toAccount.forEach(function (e) {
            u.push({
              toAccount: e,
              standardSequence: 0,
              customSequence: 0
            });
          }), e.userItem = u;
          var l = new va(ya.GET_USER_PROFILE);
          return l.setMessage(o.length > 5 ? "userIDList.length:".concat(o.length) : "userIDList:".concat(o)), this._userModule.request({
            protocolName: Uo,
            requestData: e
          }).then(function (e) {
            l.setNetworkType(t._userModule.getNetworkType()).end(), we.info("".concat(t._className, ".getUserProfile ok"));
            var o = t._handleResponse(e).concat(s);
            return ba(c ? o[0] : o);
          }).catch(function (e) {
            return t._userModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              l.setError(e, n, a).end();
            }), we.error("".concat(t._className, ".getUserProfile failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "getMyProfile",
        value: function value() {
          var e = this._userModule.getMyAccount();
          if (we.log("".concat(this._className, ".getMyProfile myAccount:").concat(e)), this._fillMap(), this._containsAccount(e)) {
            var t = this._getProfileFromMap(e);
            return we.debug("".concat(this._className, ".getMyProfile from cache, myProfile:") + JSON.stringify(t)), Ya(t);
          }
          return this.getUserProfile({
            fromAccount: e,
            userIDList: [e],
            bFromGetMyProfile: !0
          });
        }
      }, {
        key: "_handleResponse",
        value: function value(e) {
          for (var t, o, n = it.now(), a = e.data.userProfileItem, s = [], r = 0, i = a.length; r < i; r++) {
            "@TLS#NOT_FOUND" !== a[r].to && "" !== a[r].to && (t = a[r].to, o = this._updateMap(t, this._getLatestProfileFromResponse(t, a[r].profileItem)), s.push(o));
          }
          return we.log("".concat(this._className, "._handleResponse cost ").concat(it.now() - n, " ms")), s;
        }
      }, {
        key: "_getLatestProfileFromResponse",
        value: function value(e, t) {
          var o = {};
          if (o.userID = e, o.profileCustomField = [], !Vt(t)) for (var n = 0, a = t.length; n < a; n++) {
            if (t[n].tag.indexOf("Tag_Profile_Custom") > -1) o.profileCustomField.push({
              key: t[n].tag,
              value: t[n].value
            });else switch (t[n].tag) {
              case Fe.NICK:
                o.nick = t[n].value;
                break;
              case Fe.GENDER:
                o.gender = t[n].value;
                break;
              case Fe.BIRTHDAY:
                o.birthday = t[n].value;
                break;
              case Fe.LOCATION:
                o.location = t[n].value;
                break;
              case Fe.SELFSIGNATURE:
                o.selfSignature = t[n].value;
                break;
              case Fe.ALLOWTYPE:
                o.allowType = t[n].value;
                break;
              case Fe.LANGUAGE:
                o.language = t[n].value;
                break;
              case Fe.AVATAR:
                o.avatar = t[n].value;
                break;
              case Fe.MESSAGESETTINGS:
                o.messageSettings = t[n].value;
                break;
              case Fe.ADMINFORBIDTYPE:
                o.adminForbidType = t[n].value;
                break;
              case Fe.LEVEL:
                o.level = t[n].value;
                break;
              case Fe.ROLE:
                o.role = t[n].value;
                break;
              default:
                we.warn("".concat(this._className, "._handleResponse unknown tag:"), t[n].tag, t[n].value);
            }
          }
          return o;
        }
      }, {
        key: "updateMyProfile",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".updateMyProfile"),
            n = new va(ya.UPDATE_MY_PROFILE);
          n.setMessage(JSON.stringify(e));
          var a = new rs().validate(e);
          if (!a.valid) return n.setCode(na.UPDATE_PROFILE_INVALID_PARAM).setMoreMessage("".concat(o, " info:").concat(a.tips)).setNetworkType(this._userModule.getNetworkType()).end(), we.error("".concat(o, " info:").concat(a.tips, "，请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#updateMyProfile")), ja({
            code: na.UPDATE_PROFILE_INVALID_PARAM,
            message: aa.UPDATE_PROFILE_INVALID_PARAM
          });
          var s = [];
          for (var r in e) {
            Object.prototype.hasOwnProperty.call(e, r) && ("profileCustomField" === r ? e.profileCustomField.forEach(function (e) {
              s.push({
                tag: e.key,
                value: e.value
              });
            }) : s.push({
              tag: Fe[r.toUpperCase()],
              value: e[r]
            }));
          }
          return 0 === s.length ? (n.setCode(na.UPDATE_PROFILE_NO_KEY).setMoreMessage(aa.UPDATE_PROFILE_NO_KEY).setNetworkType(this._userModule.getNetworkType()).end(), we.error("".concat(o, " info:").concat(aa.UPDATE_PROFILE_NO_KEY, "，请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#updateMyProfile")), ja({
            code: na.UPDATE_PROFILE_NO_KEY,
            message: aa.UPDATE_PROFILE_NO_KEY
          })) : this._userModule.request({
            protocolName: wo,
            requestData: {
              fromAccount: this._userModule.getMyAccount(),
              profileItem: s
            }
          }).then(function (a) {
            n.setNetworkType(t._userModule.getNetworkType()).end(), we.info("".concat(o, " ok"));
            var s = t._updateMap(t._userModule.getMyAccount(), e);
            return t._userModule.emitOuterEvent(S.PROFILE_UPDATED, [s]), Ya(s);
          }).catch(function (e) {
            return t._userModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          });
        }
      }, {
        key: "onProfileModified",
        value: function value(e) {
          var t = e.dataList;
          if (!Vt(t)) {
            var o,
              n,
              a = t.length;
            we.debug("".concat(this._className, ".onProfileModified count:").concat(a, " dataList:"), e.dataList);
            for (var s = [], r = 0; r < a; r++) {
              o = t[r].userID, n = this._updateMap(o, this._getLatestProfileFromResponse(o, t[r].profileList)), s.push(n);
            }
            s.length > 0 && (this._userModule.emitInnerEvent(Qa, s), this._userModule.emitOuterEvent(S.PROFILE_UPDATED, s));
          }
        }
      }, {
        key: "_fillMap",
        value: function value() {
          if (0 === this.accountProfileMap.size) {
            for (var e = this._getCachedProfiles(), t = Date.now(), o = 0, n = e.length; o < n; o++) {
              t - e[o].lastUpdatedTime < this.expirationTime && this.accountProfileMap.set(e[o].userID, e[o]);
            }
            we.log("".concat(this._className, "._fillMap from cache, map.size:").concat(this.accountProfileMap.size));
          }
        }
      }, {
        key: "_updateMap",
        value: function value(e, t) {
          var o,
            n = Date.now();
          return this._containsAccount(e) ? (o = this._getProfileFromMap(e), t.profileCustomField && vt(o.profileCustomField, t.profileCustomField), ct(o, t, ["profileCustomField"]), o.lastUpdatedTime = n) : (o = new rs(t), (this._userModule.isMyFriend(e) || e === this._userModule.getMyAccount()) && (o.lastUpdatedTime = n, this.accountProfileMap.set(e, o))), this._flushMap(e === this._userModule.getMyAccount()), o;
        }
      }, {
        key: "_flushMap",
        value: function value(e) {
          var t = M(this.accountProfileMap.values()),
            o = this._userModule.getStorageModule();
          we.debug("".concat(this._className, "._flushMap length:").concat(t.length, " flushAtOnce:").concat(e)), o.setItem(this.TAG, t, e);
        }
      }, {
        key: "_containsAccount",
        value: function value(e) {
          return this.accountProfileMap.has(e);
        }
      }, {
        key: "_getProfileFromMap",
        value: function value(e) {
          return this.accountProfileMap.get(e);
        }
      }, {
        key: "_getCachedProfiles",
        value: function value() {
          var e = this._userModule.getStorageModule().getItem(this.TAG);
          return Vt(e) ? [] : e;
        }
      }, {
        key: "onConversationsProfileUpdated",
        value: function value(e) {
          for (var t, o, n, a = [], s = 0, r = e.length; s < r; s++) {
            o = (t = e[s]).userID, this._userModule.isMyFriend(o) || (this._containsAccount(o) ? (n = this._getProfileFromMap(o), ct(n, t) > 0 && a.push(o)) : a.push(t.userID));
          }
          0 !== a.length && (we.info("".concat(this._className, ".onConversationsProfileUpdated toAccountList:").concat(a)), this.getUserProfile({
            userIDList: a
          }));
        }
      }, {
        key: "getNickAndAvatarByUserID",
        value: function value(e) {
          if (this._containsAccount(e)) {
            var t = this._getProfileFromMap(e);
            return {
              nick: t.nick,
              avatar: t.avatar
            };
          }
          return {
            nick: "",
            avatar: ""
          };
        }
      }, {
        key: "reset",
        value: function value() {
          this._flushMap(!0), this.accountProfileMap.clear();
        }
      }]), e;
    }(),
    Ps = s(function e(t) {
      n(this, e), Vt || (this.userID = t.userID || "", this.timeStamp = t.timeStamp || 0);
    }),
    Us = function () {
      function e(t) {
        n(this, e), this._userModule = t, this._className = "BlacklistHandler", this._blacklistMap = new Map(), this.startIndex = 0, this.maxLimited = 100, this.currentSequence = 0;
      }
      return s(e, [{
        key: "getLocalBlacklist",
        value: function value() {
          return M(this._blacklistMap.keys());
        }
      }, {
        key: "getBlacklist",
        value: function value() {
          var e = this,
            t = "".concat(this._className, ".getBlacklist"),
            o = {
              fromAccount: this._userModule.getMyAccount(),
              maxLimited: this.maxLimited,
              startIndex: 0,
              lastSequence: this.currentSequence
            },
            n = new va(ya.GET_BLACKLIST);
          return this._userModule.request({
            protocolName: bo,
            requestData: o
          }).then(function (o) {
            var a = o.data,
              s = a.blackListItem,
              r = a.currentSequence,
              i = Vt(s) ? 0 : s.length;
            n.setNetworkType(e._userModule.getNetworkType()).setMessage("blackList count:".concat(i)).end(), we.info("".concat(t, " ok")), e.currentSequence = r, e._handleResponse(s, !0), e._userModule.emitOuterEvent(S.BLACKLIST_UPDATED, M(e._blacklistMap.keys()));
          }).catch(function (o) {
            return e._userModule.probeNetwork().then(function (e) {
              var t = m(e, 2),
                a = t[0],
                s = t[1];
              n.setError(o, a, s).end();
            }), we.error("".concat(t, " failed. error:"), o), ja(o);
          });
        }
      }, {
        key: "addBlacklist",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".addBlacklist"),
            n = new va(ya.ADD_TO_BLACKLIST);
          if (!Qe(e.userIDList)) return n.setCode(na.ADD_BLACKLIST_INVALID_PARAM).setMessage(aa.ADD_BLACKLIST_INVALID_PARAM).setNetworkType(this._userModule.getNetworkType()).end(), we.error("".concat(o, " options.userIDList 必需是数组")), ja({
            code: na.ADD_BLACKLIST_INVALID_PARAM,
            message: aa.ADD_BLACKLIST_INVALID_PARAM
          });
          var a = this._userModule.getMyAccount();
          return 1 === e.userIDList.length && e.userIDList[0] === a ? (n.setCode(na.CANNOT_ADD_SELF_TO_BLACKLIST).setMessage(aa.CANNOT_ADD_SELF_TO_BLACKLIST).setNetworkType(this._userModule.getNetworkType()).end(), we.error("".concat(o, " 不能把自己拉黑")), ja({
            code: na.CANNOT_ADD_SELF_TO_BLACKLIST,
            message: aa.CANNOT_ADD_SELF_TO_BLACKLIST
          })) : (e.userIDList.includes(a) && (e.userIDList = e.userIDList.filter(function (e) {
            return e !== a;
          }), we.warn("".concat(o, " 不能把自己拉黑，已过滤"))), e.fromAccount = this._userModule.getMyAccount(), e.toAccount = e.userIDList, this._userModule.request({
            protocolName: Fo,
            requestData: e
          }).then(function (a) {
            return n.setNetworkType(t._userModule.getNetworkType()).setMessage(e.userIDList.length > 5 ? "userIDList.length:".concat(e.userIDList.length) : "userIDList:".concat(e.userIDList)).end(), we.info("".concat(o, " ok")), t._handleResponse(a.resultItem, !0), ba(M(t._blacklistMap.keys()));
          }).catch(function (e) {
            return t._userModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          }));
        }
      }, {
        key: "_handleResponse",
        value: function value(e, t) {
          if (!Vt(e)) for (var o, n, a, s = 0, r = e.length; s < r; s++) {
            n = e[s].to, a = e[s].resultCode, (Ze(a) || 0 === a) && (t ? ((o = this._blacklistMap.has(n) ? this._blacklistMap.get(n) : new Ps()).userID = n, !Vt(e[s].addBlackTimeStamp) && (o.timeStamp = e[s].addBlackTimeStamp), this._blacklistMap.set(n, o)) : this._blacklistMap.has(n) && (o = this._blacklistMap.get(n), this._blacklistMap.delete(n)));
          }
          we.log("".concat(this._className, "._handleResponse total:").concat(this._blacklistMap.size, " bAdd:").concat(t));
        }
      }, {
        key: "deleteBlacklist",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".deleteBlacklist"),
            n = new va(ya.REMOVE_FROM_BLACKLIST);
          return Qe(e.userIDList) ? (e.fromAccount = this._userModule.getMyAccount(), e.toAccount = e.userIDList, this._userModule.request({
            protocolName: qo,
            requestData: e
          }).then(function (a) {
            return n.setNetworkType(t._userModule.getNetworkType()).setMessage(e.userIDList.length > 5 ? "userIDList.length:".concat(e.userIDList.length) : "userIDList:".concat(e.userIDList)).end(), we.info("".concat(o, " ok")), t._handleResponse(a.data.resultItem, !1), ba(M(t._blacklistMap.keys()));
          }).catch(function (e) {
            return t._userModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                a = o[0],
                s = o[1];
              n.setError(e, a, s).end();
            }), we.error("".concat(o, " failed. error:"), e), ja(e);
          })) : (n.setCode(na.DEL_BLACKLIST_INVALID_PARAM).setMessage(aa.DEL_BLACKLIST_INVALID_PARAM).setNetworkType(this._userModule.getNetworkType()).end(), we.error("".concat(o, " options.userIDList 必需是数组")), ja({
            code: na.DEL_BLACKLIST_INVALID_PARAM,
            message: aa.DEL_BLACKLIST_INVALID_PARAM
          }));
        }
      }, {
        key: "onAccountDeleted",
        value: function value(e) {
          for (var t, o = [], n = 0, a = e.length; n < a; n++) {
            t = e[n], this._blacklistMap.has(t) && (this._blacklistMap.delete(t), o.push(t));
          }
          o.length > 0 && (we.log("".concat(this._className, ".onAccountDeleted count:").concat(o.length, " userIDList:"), o), this._userModule.emitOuterEvent(S.BLACKLIST_UPDATED, M(this._blacklistMap.keys())));
        }
      }, {
        key: "onAccountAdded",
        value: function value(e) {
          for (var t, o = [], n = 0, a = e.length; n < a; n++) {
            t = e[n], this._blacklistMap.has(t) || (this._blacklistMap.set(t, new Ps({
              userID: t
            })), o.push(t));
          }
          o.length > 0 && (we.log("".concat(this._className, ".onAccountAdded count:").concat(o.length, " userIDList:"), o), this._userModule.emitOuterEvent(S.BLACKLIST_UPDATED, M(this._blacklistMap.keys())));
        }
      }, {
        key: "reset",
        value: function value() {
          this._blacklistMap.clear(), this.startIndex = 0, this.maxLimited = 100, this.currentSequence = 0;
        }
      }]), e;
    }(),
    ws = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "UserModule", a._profileHandler = new Gs(_(a)), a._blacklistHandler = new Us(_(a)), a.getInnerEmitterInstance().on(Ja, a.onContextUpdated, _(a)), a;
      }
      return s(o, [{
        key: "onContextUpdated",
        value: function value(e) {
          this._profileHandler.getMyProfile(), this._blacklistHandler.getBlacklist();
        }
      }, {
        key: "onProfileModified",
        value: function value(e) {
          this._profileHandler.onProfileModified(e);
        }
      }, {
        key: "onRelationChainModified",
        value: function value(e) {
          var t = e.dataList;
          if (!Vt(t)) {
            var o = [];
            t.forEach(function (e) {
              e.blackListDelAccount && o.push.apply(o, M(e.blackListDelAccount));
            }), o.length > 0 && this._blacklistHandler.onAccountDeleted(o);
            var n = [];
            t.forEach(function (e) {
              e.blackListAddAccount && n.push.apply(n, M(e.blackListAddAccount));
            }), n.length > 0 && this._blacklistHandler.onAccountAdded(n);
          }
        }
      }, {
        key: "onConversationsProfileUpdated",
        value: function value(e) {
          this._profileHandler.onConversationsProfileUpdated(e);
        }
      }, {
        key: "getMyAccount",
        value: function value() {
          return this.getMyUserID();
        }
      }, {
        key: "getMyProfile",
        value: function value() {
          return this._profileHandler.getMyProfile();
        }
      }, {
        key: "getStorageModule",
        value: function value() {
          return this.getModule(lo);
        }
      }, {
        key: "isMyFriend",
        value: function value(e) {
          var t = this.getModule(so);
          return !!t && t.isMyFriend(e);
        }
      }, {
        key: "getUserProfile",
        value: function value(e) {
          return this._profileHandler.getUserProfile(e);
        }
      }, {
        key: "updateMyProfile",
        value: function value(e) {
          return this._profileHandler.updateMyProfile(e);
        }
      }, {
        key: "getNickAndAvatarByUserID",
        value: function value(e) {
          return this._profileHandler.getNickAndAvatarByUserID(e);
        }
      }, {
        key: "getLocalBlacklist",
        value: function value() {
          var e = this._blacklistHandler.getLocalBlacklist();
          return Ya(e);
        }
      }, {
        key: "addBlacklist",
        value: function value(e) {
          return this._blacklistHandler.addBlacklist(e);
        }
      }, {
        key: "deleteBlacklist",
        value: function value(e) {
          return this._blacklistHandler.deleteBlacklist(e);
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._profileHandler.reset(), this._blacklistHandler.reset();
        }
      }]), o;
    }(Do),
    bs = function () {
      function e(t, o) {
        n(this, e), this._moduleManager = t, this._isLoggedIn = !1, this._SDKAppID = o.SDKAppID, this._userID = o.userID || "", this._userSig = o.userSig || "", this._version = "2.20.0", this._a2Key = "", this._tinyID = "", this._contentType = "json", this._unlimitedAVChatRoom = o.unlimitedAVChatRoom, this._scene = o.scene || "", this._oversea = o.oversea, this._instanceID = o.instanceID, this._statusInstanceID = 0, this._isDevMode = o.devMode, this._proxyServer = o.proxyServer;
      }
      return s(e, [{
        key: "isLoggedIn",
        value: function value() {
          return this._isLoggedIn;
        }
      }, {
        key: "isOversea",
        value: function value() {
          return this._oversea;
        }
      }, {
        key: "isDevMode",
        value: function value() {
          return this._isDevMode;
        }
      }, {
        key: "isSingaporeSite",
        value: function value() {
          return this._SDKAppID >= 2e7 && this._SDKAppID < 3e7;
        }
      }, {
        key: "isKoreaSite",
        value: function value() {
          return this._SDKAppID >= 3e7 && this._SDKAppID < 4e7;
        }
      }, {
        key: "isGermanySite",
        value: function value() {
          return this._SDKAppID >= 4e7 && this._SDKAppID < 5e7;
        }
      }, {
        key: "isIndiaSite",
        value: function value() {
          return this._SDKAppID >= 5e7 && this._SDKAppID < 6e7;
        }
      }, {
        key: "isUnlimitedAVChatRoom",
        value: function value() {
          return this._unlimitedAVChatRoom;
        }
      }, {
        key: "getUserID",
        value: function value() {
          return this._userID;
        }
      }, {
        key: "setUserID",
        value: function value(e) {
          this._userID = e;
        }
      }, {
        key: "setUserSig",
        value: function value(e) {
          this._userSig = e;
        }
      }, {
        key: "getUserSig",
        value: function value() {
          return this._userSig;
        }
      }, {
        key: "getSDKAppID",
        value: function value() {
          return this._SDKAppID;
        }
      }, {
        key: "getTinyID",
        value: function value() {
          return this._tinyID;
        }
      }, {
        key: "setTinyID",
        value: function value(e) {
          this._tinyID = e, this._isLoggedIn = !0;
        }
      }, {
        key: "getScene",
        value: function value() {
          return this._isTUIKit() ? "tuikit" : this._scene;
        }
      }, {
        key: "getInstanceID",
        value: function value() {
          return this._instanceID;
        }
      }, {
        key: "getStatusInstanceID",
        value: function value() {
          return this._statusInstanceID;
        }
      }, {
        key: "setStatusInstanceID",
        value: function value(e) {
          this._statusInstanceID = e;
        }
      }, {
        key: "getVersion",
        value: function value() {
          return this._version;
        }
      }, {
        key: "getA2Key",
        value: function value() {
          return this._a2Key;
        }
      }, {
        key: "setA2Key",
        value: function value(e) {
          this._a2Key = e;
        }
      }, {
        key: "getContentType",
        value: function value() {
          return this._contentType;
        }
      }, {
        key: "getProxyServer",
        value: function value() {
          return this._proxyServer;
        }
      }, {
        key: "_isTUIKit",
        value: function value() {
          var e = !1,
            t = !1,
            o = !1,
            n = !1,
            a = [];
          te && (a = Object.keys(ne)), oe && (a = ee ? Object.keys(uni) : Object.keys(window));
          for (var s = 0, r = a.length; s < r; s++) {
            if (a[s].toLowerCase().includes("uikit")) {
              e = !0;
              break;
            }
          }
          if (a = null, te && ot(getApp)) {
            var i = getApp().globalData;
            Xe(i) && !0 === i.isTUIKit && (t = !0);
          }
          !0 === this._moduleManager.getModule(lo).getStorageSync("TIM_".concat(this._SDKAppID, "_isTUIKit")) && (o = !0);
          var c = null;
          if ($ && "undefined" == typeof uni && __wxConfig && (c = __wxConfig.pages), z && "undefined" == typeof uni && __qqConfig && (c = __qqConfig.pages), Qe(c) && c.length > 0) {
            for (var u = 0, l = c.length; u < l; u++) {
              if (c[u].toLowerCase().includes("tui")) {
                n = !0;
                break;
              }
            }
            c = null;
          }
          return e || t || o || n;
        }
      }, {
        key: "reset",
        value: function value() {
          this._isLoggedIn = !1, this._userSig = "", this._a2Key = "", this._tinyID = "", this._statusInstanceID = 0;
        }
      }]), e;
    }(),
    Fs = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "SignModule", a._helloInterval = 120, a._lastLoginTs = 0, a._lastWsHelloTs = 0, Za.mixin(_(a)), a;
      }
      return s(o, [{
        key: "onCheckTimer",
        value: function value(e) {
          this.isLoggedIn() && e % this._helloInterval == 0 && this._hello();
        }
      }, {
        key: "login",
        value: function value(e) {
          if (this.isLoggedIn()) {
            var t = "您已经登录账号".concat(e.userID, "！如需切换账号登录，请先调用 logout 接口登出，再调用 login 接口登录。");
            return we.warn(t), Ya({
              actionStatus: "OK",
              errorCode: 0,
              errorInfo: t,
              repeatLogin: !0
            });
          }
          if (Date.now() - this._lastLoginTs <= 15e3) return we.warn("您正在尝试登录账号".concat(e.userID, "！请勿重复登录。")), ja({
            code: na.REPEAT_LOGIN,
            message: aa.REPEAT_LOGIN
          });
          we.log("".concat(this._className, ".login userID:").concat(e.userID));
          var o = this._checkLoginInfo(e);
          if (0 !== o.code) return ja(o);
          var n = this.getModule(uo),
            a = e.userID,
            s = e.userSig;
          return n.setUserID(a), n.setUserSig(s), this.getModule(Mo).updateProtocolConfig(), this._login();
        }
      }, {
        key: "_login",
        value: function value() {
          var e = this,
            t = this.getModule(uo),
            o = t.getScene(),
            n = new va(ya.LOGIN);
          return n.setMessage("".concat(o)).setMoreMessage("identifier:".concat(this.getMyUserID())), ee ? "tuikit" === o ? n.setUIPlatform(4) : n.setUIPlatform(3) : te ? "tuikit" === o ? n.setUIPlatform(12) : n.setUIPlatform(11) : oe && (Te ? "tuikit" === o ? n.setUIPlatform(17) : n.setUIPlatform(16) : "tuikit" === o ? n.setUIPlatform(14) : n.setUIPlatform(13)), this._lastLoginTs = Date.now(), this.request({
            protocolName: No
          }).then(function (a) {
            e._lastLoginTs = 0;
            var s = Date.now(),
              r = null,
              i = a.data,
              c = i.a2Key,
              u = i.tinyID,
              l = i.helloInterval,
              d = i.instanceID,
              p = i.timeStamp;
            we.log("".concat(e._className, ".login ok. scene:").concat(o, " helloInterval:").concat(l, " instanceID:").concat(d, " timeStamp:").concat(p));
            var g = 1e3 * p,
              _ = s - n.getStartTs(),
              h = g + parseInt(_ / 2) - s,
              f = n.getStartTs() + h;
            if (n.start(f), function (e, t) {
              Oe = t;
              var o = new Date();
              o.setTime(e), we.info("baseTime from server: ".concat(o, " offset: ").concat(Oe));
            }(g, h), !u) throw r = new Ba({
              code: na.NO_TINYID,
              message: aa.NO_TINYID
            }), n.setError(r, !0, e.getNetworkType()).end(), r;
            if (!c) throw r = new Ba({
              code: na.NO_A2KEY,
              message: aa.NO_A2KEY
            }), n.setError(r, !0, e.getNetworkType()).end(), r;
            return n.setNetworkType(e.getNetworkType()).setMoreMessage("helloInterval:".concat(l, " instanceID:").concat(d, " offset:").concat(h)).end(), t.setA2Key(c), t.setTinyID(u), t.setStatusInstanceID(d), e.getModule(Mo).updateProtocolConfig(), e.emitInnerEvent(Ja), e._helloInterval = l, e.triggerReady(), e._fetchCloudControlConfig(), a;
          }).catch(function (t) {
            return e.probeNetwork().then(function (e) {
              var o = m(e, 2),
                a = o[0],
                s = o[1];
              n.setError(t, a, s).end(!0);
            }), e._moduleManager.setNotReadyReason(na.LOGIN_FAILED), we.error("".concat(e._className, ".login failed. error:"), t), e._lastLoginTs = 0, e._moduleManager.onLoginFailed(), ja(t);
          });
        }
      }, {
        key: "logout",
        value: function value() {
          var e = this,
            t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          if (!this.isLoggedIn()) return ja({
            code: na.USER_NOT_LOGGED_IN,
            message: aa.USER_NOT_LOGGED_IN
          });
          var o = new va(ya.LOGOUT);
          return o.setNetworkType(this.getNetworkType()).setMessage("identifier:".concat(this.getMyUserID())).end(!0), we.info("".concat(this._className, ".logout type:").concat(t)), 0 === t && this._moduleManager.setNotReadyReason(na.LOGGED_OUT), this.request({
            protocolName: Ao,
            requestData: {
              type: t
            }
          }).then(function () {
            return e.resetReady(), Ya({});
          }).catch(function (t) {
            return we.error("".concat(e._className, "._logout error:"), t), e.resetReady(), Ya({});
          });
        }
      }, {
        key: "_fetchCloudControlConfig",
        value: function value() {
          this.getModule(Io).fetchConfig();
        }
      }, {
        key: "_hello",
        value: function value() {
          var e = this;
          this._lastWsHelloTs = Date.now(), this.request({
            protocolName: Oo
          }).catch(function (t) {
            we.warn("".concat(e._className, "._hello error:"), t);
          });
        }
      }, {
        key: "getLastWsHelloTs",
        value: function value() {
          return this._lastWsHelloTs;
        }
      }, {
        key: "_checkLoginInfo",
        value: function value(e) {
          var t = 0,
            o = "";
          return Vt(this.getModule(uo).getSDKAppID()) ? (t = na.NO_SDKAPPID, o = aa.NO_SDKAPPID) : Vt(e.userID) ? (t = na.NO_IDENTIFIER, o = aa.NO_IDENTIFIER) : Vt(e.userSig) && (t = na.NO_USERSIG, o = aa.NO_USERSIG), {
            code: t,
            message: o
          };
        }
      }, {
        key: "onMultipleAccountKickedOut",
        value: function value(e) {
          var t = this;
          new va(ya.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage("type:".concat(D.KICKED_OUT_MULT_ACCOUNT, " newInstanceInfo:").concat(JSON.stringify(e))).end(!0), we.warn("".concat(this._className, ".onMultipleAccountKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e), this.logout(1).then(function () {
            t.emitOuterEvent(S.KICKED_OUT, {
              type: D.KICKED_OUT_MULT_ACCOUNT
            }), t._moduleManager.setNotReadyReason(na.KICKED_OUT_MULT_ACCOUNT), t._moduleManager.reset();
          });
        }
      }, {
        key: "onMultipleDeviceKickedOut",
        value: function value(e) {
          var t = this;
          new va(ya.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage("type:".concat(D.KICKED_OUT_MULT_DEVICE, " newInstanceInfo:").concat(JSON.stringify(e))).end(!0), we.warn("".concat(this._className, ".onMultipleDeviceKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e), this.logout(1).then(function () {
            t.emitOuterEvent(S.KICKED_OUT, {
              type: D.KICKED_OUT_MULT_DEVICE
            }), t._moduleManager.setNotReadyReason(na.KICKED_OUT_MULT_DEVICE), t._moduleManager.reset();
          });
        }
      }, {
        key: "onUserSigExpired",
        value: function value() {
          new va(ya.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage(D.KICKED_OUT_USERSIG_EXPIRED).end(!0), we.warn("".concat(this._className, ".onUserSigExpired: userSig 签名过期被踢下线")), 0 !== this.getModule(uo).getStatusInstanceID() && (this.emitOuterEvent(S.KICKED_OUT, {
            type: D.KICKED_OUT_USERSIG_EXPIRED
          }), this._moduleManager.setNotReadyReason(na.KICKED_OUT_USERSIG_EXPIRED), this._moduleManager.reset());
        }
      }, {
        key: "onRestApiKickedOut",
        value: function value(e) {
          (new va(ya.KICKED_OUT).setNetworkType(this.getNetworkType()).setMessage("type:".concat(D.KICKED_OUT_REST_API, " newInstanceInfo:").concat(JSON.stringify(e))).end(!0), we.warn("".concat(this._className, ".onRestApiKickedOut userID:").concat(this.getMyUserID(), " newInstanceInfo:"), e), 0 !== this.getModule(uo).getStatusInstanceID()) && (this.emitOuterEvent(S.KICKED_OUT, {
            type: D.KICKED_OUT_REST_API
          }), this._moduleManager.setNotReadyReason(na.KICKED_OUT_REST_API), this._moduleManager.reset(), this.getModule(vo).onRestApiKickedOut());
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this.resetReady(), this._helloInterval = 120, this._lastLoginTs = 0, this._lastWsHelloTs = 0;
        }
      }]), o;
    }(Do);
  function qs() {
    return null;
  }
  var Vs = function () {
      function e(t) {
        n(this, e), this._moduleManager = t, this._className = "StorageModule", this._storageQueue = new Map(), this._errorTolerantHandle();
      }
      return s(e, [{
        key: "_errorTolerantHandle",
        value: function value() {
          te || !Ze(window) && !Ze(window.localStorage) || (this.getItem = qs, this.setItem = qs, this.removeItem = qs, this.clear = qs);
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          if (e % 20 == 0) {
            if (0 === this._storageQueue.size) return;
            this._doFlush();
          }
        }
      }, {
        key: "_doFlush",
        value: function value() {
          try {
            var e,
              t = C(this._storageQueue);
            try {
              for (t.s(); !(e = t.n()).done;) {
                var o = m(e.value, 2),
                  n = o[0],
                  a = o[1];
                this._setStorageSync(this._getKey(n), a);
              }
            } catch (s) {
              t.e(s);
            } finally {
              t.f();
            }
            this._storageQueue.clear();
          } catch (r) {
            we.warn("".concat(this._className, "._doFlush error:"), r);
          }
        }
      }, {
        key: "_getPrefix",
        value: function value() {
          var e = this._moduleManager.getModule(uo);
          return "TIM_".concat(e.getSDKAppID(), "_").concat(e.getUserID(), "_");
        }
      }, {
        key: "_getKey",
        value: function value(e) {
          return "".concat(this._getPrefix()).concat(e);
        }
      }, {
        key: "getItem",
        value: function value(e) {
          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          try {
            var o = t ? this._getKey(e) : e;
            return this.getStorageSync(o);
          } catch (n) {
            return we.warn("".concat(this._className, ".getItem error:"), n), {};
          }
        }
      }, {
        key: "setItem",
        value: function value(e, t) {
          var o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            n = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3];
          if (o) {
            var a = n ? this._getKey(e) : e;
            this._setStorageSync(a, t);
          } else this._storageQueue.set(e, t);
        }
      }, {
        key: "clear",
        value: function value() {
          try {
            te ? ne.clearStorageSync() : localStorage && localStorage.clear();
          } catch (e) {
            we.warn("".concat(this._className, ".clear error:"), e);
          }
        }
      }, {
        key: "removeItem",
        value: function value(e) {
          var t = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
          try {
            var o = t ? this._getKey(e) : e;
            this._removeStorageSync(o);
          } catch (n) {
            we.warn("".concat(this._className, ".removeItem error:"), n);
          }
        }
      }, {
        key: "getSize",
        value: function value(e) {
          var t = this,
            o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "b";
          try {
            var n = {
              size: 0,
              limitSize: 5242880,
              unit: o
            };
            if (Object.defineProperty(n, "leftSize", {
              enumerable: !0,
              get: function get() {
                return n.limitSize - n.size;
              }
            }), te && (n.limitSize = 1024 * ne.getStorageInfoSync().limitSize), e) n.size = JSON.stringify(this.getItem(e)).length + this._getKey(e).length;else if (te) {
              var a = ne.getStorageInfoSync(),
                s = a.keys;
              s.forEach(function (e) {
                n.size += JSON.stringify(t.getStorageSync(e)).length + t._getKey(e).length;
              });
            } else if (localStorage) for (var r in localStorage) {
              localStorage.hasOwnProperty(r) && (n.size += localStorage.getItem(r).length + r.length);
            }
            return this._convertUnit(n);
          } catch (i) {
            we.warn("".concat(this._className, " error:"), i);
          }
        }
      }, {
        key: "_convertUnit",
        value: function value(e) {
          var t = {},
            o = e.unit;
          for (var n in t.unit = o, e) {
            "number" == typeof e[n] && ("kb" === o.toLowerCase() ? t[n] = Math.round(e[n] / 1024) : "mb" === o.toLowerCase() ? t[n] = Math.round(e[n] / 1024 / 1024) : t[n] = e[n]);
          }
          return t;
        }
      }, {
        key: "_setStorageSync",
        value: function value(e, t) {
          te ? Q ? my.setStorageSync({
            key: e,
            data: t
          }) : ne.setStorageSync(e, t) : localStorage && localStorage.setItem(e, JSON.stringify(t));
        }
      }, {
        key: "getStorageSync",
        value: function value(e) {
          return te ? Q ? my.getStorageSync({
            key: e
          }).data : ne.getStorageSync(e) : localStorage ? JSON.parse(localStorage.getItem(e)) : {};
        }
      }, {
        key: "_removeStorageSync",
        value: function value(e) {
          te ? Q ? my.removeStorageSync({
            key: e
          }) : ne.removeStorageSync(e) : localStorage && localStorage.removeItem(e);
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._doFlush();
        }
      }]), e;
    }(),
    Ks = function () {
      function e(t) {
        n(this, e), this._className = "SSOLogBody", this._report = [];
      }
      return s(e, [{
        key: "pushIn",
        value: function value(e) {
          we.debug("".concat(this._className, ".pushIn"), this._report.length, e), this._report.push(e);
        }
      }, {
        key: "backfill",
        value: function value(e) {
          var t;
          Qe(e) && 0 !== e.length && (we.debug("".concat(this._className, ".backfill"), this._report.length, e.length), (t = this._report).unshift.apply(t, M(e)));
        }
      }, {
        key: "getLogsNumInMemory",
        value: function value() {
          return this._report.length;
        }
      }, {
        key: "isEmpty",
        value: function value() {
          return 0 === this._report.length;
        }
      }, {
        key: "_reset",
        value: function value() {
          this._report.length = 0, this._report = [];
        }
      }, {
        key: "getLogsInMemory",
        value: function value() {
          var e = this._report.slice();
          return this._reset(), e;
        }
      }]), e;
    }(),
    Hs = function Hs(e) {
      var t = e.getModule(uo);
      return {
        SDKType: 10,
        SDKAppID: t.getSDKAppID(),
        SDKVersion: t.getVersion(),
        tinyID: Number(t.getTinyID()),
        userID: t.getUserID(),
        platform: e.getPlatform(),
        instanceID: t.getInstanceID(),
        traceID: Re()
      };
    },
    Bs = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        n(this, a), (t = o.call(this, e))._className = "EventStatModule", t.TAG = "im-ssolog-event", t._reportBody = new Ks(), t.MIN_THRESHOLD = 20, t.MAX_THRESHOLD = 100, t.WAITING_TIME = 6e4, t.REPORT_LEVEL = [4, 5, 6], t.REPORT_SDKAPPID_BLACKLIST = [], t.REPORT_TINYID_WHITELIST = [], t._lastReportTime = Date.now();
        var s = t.getInnerEmitterInstance();
        return s.on(Ja, t._onLoginSuccess, _(t)), s.on(Xa, t._onCloudConfigUpdated, _(t)), t;
      }
      return s(a, [{
        key: "reportAtOnce",
        value: function value() {
          we.debug("".concat(this._className, ".reportAtOnce")), this._report();
        }
      }, {
        key: "_onLoginSuccess",
        value: function value() {
          var e = this,
            t = this.getModule(lo),
            o = t.getItem(this.TAG, !1);
          !Vt(o) && ot(o.forEach) && (we.log("".concat(this._className, "._onLoginSuccess get ssolog in storage, count:").concat(o.length)), o.forEach(function (t) {
            e._reportBody.pushIn(t);
          }), t.removeItem(this.TAG, !1));
        }
      }, {
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this.getCloudConfig("evt_rpt_threshold"),
            t = this.getCloudConfig("evt_rpt_waiting"),
            o = this.getCloudConfig("evt_rpt_level"),
            n = this.getCloudConfig("evt_rpt_sdkappid_bl"),
            a = this.getCloudConfig("evt_rpt_tinyid_wl");
          Ze(e) || (this.MIN_THRESHOLD = Number(e)), Ze(t) || (this.WAITING_TIME = Number(t)), Ze(o) || (this.REPORT_LEVEL = o.split(",").map(function (e) {
            return Number(e);
          })), Ze(n) || (this.REPORT_SDKAPPID_BLACKLIST = n.split(",").map(function (e) {
            return Number(e);
          })), Ze(a) || (this.REPORT_TINYID_WHITELIST = a.split(","));
        }
      }, {
        key: "pushIn",
        value: function value(e) {
          e instanceof va && (e.updateTimeStamp(), this._reportBody.pushIn(e), this._reportBody.getLogsNumInMemory() >= this.MIN_THRESHOLD && this._report());
        }
      }, {
        key: "onCheckTimer",
        value: function value() {
          Date.now() < this._lastReportTime + this.WAITING_TIME || this._reportBody.isEmpty() || this._report();
        }
      }, {
        key: "_filterLogs",
        value: function value(e) {
          var t = this,
            o = this.getModule(uo),
            n = o.getSDKAppID(),
            a = o.getTinyID();
          return Ut(this.REPORT_SDKAPPID_BLACKLIST, n) && !wt(this.REPORT_TINYID_WHITELIST, a) ? [] : e.filter(function (e) {
            return t.REPORT_LEVEL.includes(e.level);
          });
        }
      }, {
        key: "_report",
        value: function value() {
          var e = this;
          if (!this._reportBody.isEmpty()) {
            var o = this._reportBody.getLogsInMemory(),
              n = this._filterLogs(o);
            if (0 !== n.length) {
              var a = {
                header: Hs(this),
                event: n
              };
              this.request({
                protocolName: Vn,
                requestData: t({}, a)
              }).then(function () {
                e._lastReportTime = Date.now();
              }).catch(function (t) {
                we.warn("".concat(e._className, ".report failed. networkType:").concat(e.getNetworkType(), " error:"), t), e._reportBody.backfill(o), e._reportBody.getLogsNumInMemory() > e.MAX_THRESHOLD && e._flushAtOnce();
              });
            } else this._lastReportTime = Date.now();
          }
        }
      }, {
        key: "_flushAtOnce",
        value: function value() {
          var e = this.getModule(lo),
            t = e.getItem(this.TAG, !1),
            o = this._reportBody.getLogsInMemory();
          if (Vt(t)) we.log("".concat(this._className, "._flushAtOnce count:").concat(o.length)), e.setItem(this.TAG, o, !0, !1);else {
            var n = o.concat(t);
            n.length > this.MAX_THRESHOLD && (n = n.slice(0, this.MAX_THRESHOLD)), we.log("".concat(this._className, "._flushAtOnce count:").concat(n.length)), e.setItem(this.TAG, n, !0, !1);
          }
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._lastReportTime = 0, this._report(), this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [];
        }
      }]), a;
    }(Do),
    xs = "none",
    Ws = "online",
    Ys = [na.OVER_FREQUENCY_LIMIT, na.OPEN_SERVICE_OVERLOAD_ERROR],
    js = function () {
      function e(t) {
        n(this, e), this._moduleManager = t, this._networkType = "", this._className = "NetMonitorModule", this.MAX_WAIT_TIME = 3e3, this._mpNetworkStatusCallback = null, this._webOnlineCallback = null, this._webOfflineCallback = null;
      }
      return s(e, [{
        key: "start",
        value: function value() {
          var e = this;
          te ? (ne.getNetworkType({
            success: function success(t) {
              e._networkType = t.networkType, t.networkType === xs ? we.warn("".concat(e._className, ".start no network, please check!")) : we.info("".concat(e._className, ".start networkType:").concat(t.networkType));
            }
          }), this._mpNetworkStatusCallback = this._onNetworkStatusChange.bind(this), ne.onNetworkStatusChange(this._mpNetworkStatusCallback)) : (this._networkType = Ws, this._webOnlineCallback = this._onWebOnline.bind(this), this._webOfflineCallback = this._onWebOffline.bind(this), window && (window.addEventListener("online", this._webOnlineCallback), window.addEventListener("offline", this._webOfflineCallback)));
        }
      }, {
        key: "_onWebOnline",
        value: function value() {
          this._onNetworkStatusChange({
            isConnected: !0,
            networkType: Ws
          });
        }
      }, {
        key: "_onWebOffline",
        value: function value() {
          this._onNetworkStatusChange({
            isConnected: !1,
            networkType: xs
          });
        }
      }, {
        key: "_onNetworkStatusChange",
        value: function value(e) {
          var t = e.isConnected,
            o = e.networkType,
            n = !1;
          t ? (we.info("".concat(this._className, "._onNetworkStatusChange previousNetworkType:").concat(this._networkType, " currentNetworkType:").concat(o)), this._networkType !== o && (n = !0, this._moduleManager.getModule(vo).reConnect(!0))) : this._networkType !== o && (n = !0, we.warn("".concat(this._className, "._onNetworkStatusChange no network, please check!")), this._moduleManager.getModule(vo).offline());
          n && (new va(ya.NETWORK_CHANGE).setMessage("isConnected:".concat(t, " previousNetworkType:").concat(this._networkType, " networkType:").concat(o)).end(), this._networkType = o);
        }
      }, {
        key: "probe",
        value: function value(e) {
          var t = this;
          return !Ze(e) && Ys.includes(e.code) ? Promise.resolve([!0, this._networkType]) : new Promise(function (e, o) {
            if (te) ne.getNetworkType({
              success: function success(o) {
                t._networkType = o.networkType, o.networkType === xs ? (we.warn("".concat(t._className, ".probe no network, please check!")), e([!1, o.networkType])) : (we.info("".concat(t._className, ".probe networkType:").concat(o.networkType)), e([!0, o.networkType]));
              }
            });else if (window && window.fetch) fetch("".concat(ft(), "//web.sdk.qcloud.com/im/assets/speed.xml?random=").concat(Math.random())).then(function (t) {
              t.ok ? e([!0, Ws]) : e([!1, xs]);
            }).catch(function (t) {
              e([!1, xs]);
            });else {
              var n = new XMLHttpRequest(),
                a = setTimeout(function () {
                  we.warn("".concat(t._className, ".probe fetch timeout. Probably no network, please check!")), n.abort(), t._networkType = xs, e([!1, xs]);
                }, t.MAX_WAIT_TIME);
              n.onreadystatechange = function () {
                4 === n.readyState && (clearTimeout(a), 200 === n.status || 304 === n.status || 514 === n.status ? (this._networkType = Ws, e([!0, Ws])) : (we.warn("".concat(this.className, ".probe fetch status:").concat(n.status, ". Probably no network, please check!")), this._networkType = xs, e([!1, xs])));
              }, n.open("GET", "".concat(ft(), "//web.sdk.qcloud.com/im/assets/speed.xml?random=").concat(Math.random())), n.send();
            }
          });
        }
      }, {
        key: "getNetworkType",
        value: function value() {
          return this._networkType;
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), te ? null !== this._mpNetworkStatusCallback && (ne.offNetworkStatusChange && (Z || J ? ne.offNetworkStatusChange(this._mpNetworkStatusCallback) : ne.offNetworkStatusChange()), this._mpNetworkStatusCallback = null) : window && (null !== this._webOnlineCallback && (window.removeEventListener("online", this._webOnlineCallback), this._webOnlineCallback = null), null !== this._onWebOffline && (window.removeEventListener("offline", this._webOfflineCallback), this._webOfflineCallback = null));
        }
      }]), e;
    }(),
    $s = O(function (e) {
      var t = Object.prototype.hasOwnProperty,
        o = "~";
      function n() {}
      function a(e, t, o) {
        this.fn = e, this.context = t, this.once = o || !1;
      }
      function s(e, t, n, s, r) {
        if ("function" != typeof n) throw new TypeError("The listener must be a function");
        var i = new a(n, s || e, r),
          c = o ? o + t : t;
        return e._events[c] ? e._events[c].fn ? e._events[c] = [e._events[c], i] : e._events[c].push(i) : (e._events[c] = i, e._eventsCount++), e;
      }
      function r(e, t) {
        0 == --e._eventsCount ? e._events = new n() : delete e._events[t];
      }
      function i() {
        this._events = new n(), this._eventsCount = 0;
      }
      Object.create && (n.prototype = Object.create(null), new n().__proto__ || (o = !1)), i.prototype.eventNames = function () {
        var e,
          n,
          a = [];
        if (0 === this._eventsCount) return a;
        for (n in e = this._events) {
          t.call(e, n) && a.push(o ? n.slice(1) : n);
        }
        return Object.getOwnPropertySymbols ? a.concat(Object.getOwnPropertySymbols(e)) : a;
      }, i.prototype.listeners = function (e) {
        var t = o ? o + e : e,
          n = this._events[t];
        if (!n) return [];
        if (n.fn) return [n.fn];
        for (var a = 0, s = n.length, r = new Array(s); a < s; a++) {
          r[a] = n[a].fn;
        }
        return r;
      }, i.prototype.listenerCount = function (e) {
        var t = o ? o + e : e,
          n = this._events[t];
        return n ? n.fn ? 1 : n.length : 0;
      }, i.prototype.emit = function (e, t, n, a, s, r) {
        var i = o ? o + e : e;
        if (!this._events[i]) return !1;
        var c,
          u,
          l = this._events[i],
          d = arguments.length;
        if (l.fn) {
          switch (l.once && this.removeListener(e, l.fn, void 0, !0), d) {
            case 1:
              return l.fn.call(l.context), !0;
            case 2:
              return l.fn.call(l.context, t), !0;
            case 3:
              return l.fn.call(l.context, t, n), !0;
            case 4:
              return l.fn.call(l.context, t, n, a), !0;
            case 5:
              return l.fn.call(l.context, t, n, a, s), !0;
            case 6:
              return l.fn.call(l.context, t, n, a, s, r), !0;
          }
          for (u = 1, c = new Array(d - 1); u < d; u++) {
            c[u - 1] = arguments[u];
          }
          l.fn.apply(l.context, c);
        } else {
          var p,
            g = l.length;
          for (u = 0; u < g; u++) {
            switch (l[u].once && this.removeListener(e, l[u].fn, void 0, !0), d) {
              case 1:
                l[u].fn.call(l[u].context);
                break;
              case 2:
                l[u].fn.call(l[u].context, t);
                break;
              case 3:
                l[u].fn.call(l[u].context, t, n);
                break;
              case 4:
                l[u].fn.call(l[u].context, t, n, a);
                break;
              default:
                if (!c) for (p = 1, c = new Array(d - 1); p < d; p++) {
                  c[p - 1] = arguments[p];
                }
                l[u].fn.apply(l[u].context, c);
            }
          }
        }
        return !0;
      }, i.prototype.on = function (e, t, o) {
        return s(this, e, t, o, !1);
      }, i.prototype.once = function (e, t, o) {
        return s(this, e, t, o, !0);
      }, i.prototype.removeListener = function (e, t, n, a) {
        var s = o ? o + e : e;
        if (!this._events[s]) return this;
        if (!t) return r(this, s), this;
        var i = this._events[s];
        if (i.fn) i.fn !== t || a && !i.once || n && i.context !== n || r(this, s);else {
          for (var c = 0, u = [], l = i.length; c < l; c++) {
            (i[c].fn !== t || a && !i[c].once || n && i[c].context !== n) && u.push(i[c]);
          }
          u.length ? this._events[s] = 1 === u.length ? u[0] : u : r(this, s);
        }
        return this;
      }, i.prototype.removeAllListeners = function (e) {
        var t;
        return e ? (t = o ? o + e : e, this._events[t] && r(this, t)) : (this._events = new n(), this._eventsCount = 0), this;
      }, i.prototype.off = i.prototype.removeListener, i.prototype.addListener = i.prototype.on, i.prefixed = o, i.EventEmitter = i, e.exports = i;
    }),
    zs = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "BigDataChannelModule", a.FILETYPE = {
          SOUND: 2106,
          FILE: 2107,
          VIDEO: 2113
        }, a._bdh_download_server = "grouptalk.c2c.qq.com", a._BDHBizID = 10001, a._authKey = "", a._expireTime = 0, a.getInnerEmitterInstance().on(Ja, a._getAuthKey, _(a)), a;
      }
      return s(o, [{
        key: "_getAuthKey",
        value: function value() {
          var e = this;
          this.request({
            protocolName: ko
          }).then(function (t) {
            t.data.authKey && (e._authKey = t.data.authKey, e._expireTime = parseInt(t.data.expireTime));
          });
        }
      }, {
        key: "_isFromOlderVersion",
        value: function value(e) {
          return !(!e.content || 2 === e.content.downloadFlag);
        }
      }, {
        key: "parseElements",
        value: function value(e, t) {
          if (!Qe(e) || !t) return [];
          for (var o = [], n = null, a = 0; a < e.length; a++) {
            n = e[a], this._needParse(n) ? o.push(this._parseElement(n, t)) : o.push(e[a]);
          }
          return o;
        }
      }, {
        key: "_needParse",
        value: function value(e) {
          return !e.cloudCustomData && !(!this._isFromOlderVersion(e) || e.type !== D.MSG_AUDIO && e.type !== D.MSG_FILE && e.type !== D.MSG_VIDEO);
        }
      }, {
        key: "_parseElement",
        value: function value(e, t) {
          switch (e.type) {
            case D.MSG_AUDIO:
              return this._parseAudioElement(e, t);
            case D.MSG_FILE:
              return this._parseFileElement(e, t);
            case D.MSG_VIDEO:
              return this._parseVideoElement(e, t);
          }
        }
      }, {
        key: "_parseAudioElement",
        value: function value(e, t) {
          return e.content.url = this._genAudioUrl(e.content.uuid, t), e;
        }
      }, {
        key: "_parseFileElement",
        value: function value(e, t) {
          return e.content.url = this._genFileUrl(e.content.uuid, t, e.content.fileName), e;
        }
      }, {
        key: "_parseVideoElement",
        value: function value(e, t) {
          return e.content.url = this._genVideoUrl(e.content.uuid, t), e;
        }
      }, {
        key: "_genAudioUrl",
        value: function value(e, t) {
          if ("" === this._authKey) return we.warn("".concat(this._className, "._genAudioUrl no authKey!")), "";
          var o = this.getModule(uo).getSDKAppID();
          return "https://".concat(this._bdh_download_server, "/asn.com/stddownload_common_file?authkey=").concat(this._authKey, "&bid=").concat(this._BDHBizID, "&subbid=").concat(o, "&fileid=").concat(e, "&filetype=").concat(this.FILETYPE.SOUND, "&openid=").concat(t, "&ver=0");
        }
      }, {
        key: "_genFileUrl",
        value: function value(e, t, o) {
          if ("" === this._authKey) return we.warn("".concat(this._className, "._genFileUrl no authKey!")), "";
          o || (o = "".concat(Math.floor(1e5 * Math.random()), "-").concat(Date.now()));
          var n = this.getModule(uo).getSDKAppID();
          return "https://".concat(this._bdh_download_server, "/asn.com/stddownload_common_file?authkey=").concat(this._authKey, "&bid=").concat(this._BDHBizID, "&subbid=").concat(n, "&fileid=").concat(e, "&filetype=").concat(this.FILETYPE.FILE, "&openid=").concat(t, "&ver=0&filename=").concat(encodeURIComponent(o));
        }
      }, {
        key: "_genVideoUrl",
        value: function value(e, t) {
          if ("" === this._authKey) return we.warn("".concat(this._className, "._genVideoUrl no authKey!")), "";
          var o = this.getModule(uo).getSDKAppID();
          return "https://".concat(this._bdh_download_server, "/asn.com/stddownload_common_file?authkey=").concat(this._authKey, "&bid=").concat(this._BDHBizID, "&subbid=").concat(o, "&fileid=").concat(e, "&filetype=").concat(this.FILETYPE.VIDEO, "&openid=").concat(t, "&ver=0");
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._authKey = "", this.expireTime = 0;
        }
      }]), o;
    }(Do),
    Js = ["requestSnapshotUrl"],
    Xs = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        return n(this, a), (t = o.call(this, e))._className = "UploadModule", t.TIMUploadPlugin = null, t.timUploadPlugin = null, t.COSSDK = null, t._cosUploadMethod = null, t.expiredTimeLimit = 600, t.appid = 0, t.bucketName = "", t.ciUrl = "", t.directory = "", t.downloadUrl = "", t.uploadUrl = "", t.region = "ap-shanghai", t.cos = null, t.cosOptions = {
          secretId: "",
          secretKey: "",
          sessionToken: "",
          expiredTime: 0
        }, t.uploadFileType = "", t.duration = 900, t.tryCount = 0, t.getInnerEmitterInstance().on(Ja, t._init, _(t)), t;
      }
      return s(a, [{
        key: "_init",
        value: function value() {
          var e = "".concat(this._className, "._init"),
            t = this.getModule(fo);
          if (this.TIMUploadPlugin = t.getPlugin("tim-upload-plugin"), this.TIMUploadPlugin) this._initUploaderMethod();else {
            var o = te ? "cos-wx-sdk" : "cos-js-sdk";
            this.COSSDK = t.getPlugin(o), this.COSSDK ? (this._getAuthorizationKey(), we.warn("".concat(e, " v2.9.2起推荐使用 tim-upload-plugin 代替 ").concat(o, "，上传更快更安全。详细请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#registerPlugin"))) : we.warn("".concat(e, " 没有检测到上传插件，将无法发送图片、音频、视频、文件等类型的消息。详细请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#registerPlugin"));
          }
        }
      }, {
        key: "_getAuthorizationKey",
        value: function value() {
          var e = this,
            t = new va(ya.GET_COS_AUTH_KEY),
            o = Math.ceil(Date.now() / 1e3);
          this.request({
            protocolName: bn,
            requestData: {
              duration: this.expiredTimeLimit
            }
          }).then(function (n) {
            var a = n.data;
            we.log("".concat(e._className, "._getAuthorizationKey ok. data:"), a);
            var s = a.expiredTime - o;
            t.setMessage("requestId:".concat(a.requestId, " requestTime:").concat(o, " expiredTime:").concat(a.expiredTime, " diff:").concat(s, "s")).setNetworkType(e.getNetworkType()).end(), !te && a.region && (e.region = a.region), e.appid = a.appid, e.bucketName = a.bucketName, e.ciUrl = a.ciUrl, e.directory = a.directory, e.downloadUrl = a.downloadUrl, e.uploadUrl = a.uploadUrl, e.cosOptions = {
              secretId: a.secretId,
              secretKey: a.secretKey,
              sessionToken: a.sessionToken,
              expiredTime: a.expiredTime
            }, we.log("".concat(e._className, "._getAuthorizationKey ok. region:").concat(e.region, " bucketName:").concat(e.bucketName)), e._initUploaderMethod();
          }).catch(function (o) {
            e.probeNetwork().then(function (e) {
              var n = m(e, 2),
                a = n[0],
                s = n[1];
              t.setError(o, a, s).end();
            }), we.warn("".concat(e._className, "._getAuthorizationKey failed. error:"), o);
          });
        }
      }, {
        key: "_getCosPreSigUrl",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._getCosPreSigUrl"),
            n = Math.ceil(Date.now() / 1e3),
            a = new va(ya.GET_COS_PRE_SIG_URL);
          return this.request({
            protocolName: Fn,
            requestData: {
              fileType: e.fileType,
              fileName: e.fileName,
              uploadMethod: e.uploadMethod,
              duration: e.duration
            }
          }).then(function (e) {
            t.tryCount = 0;
            var s = e.data || {},
              r = s.expiredTime - n;
            return we.log("".concat(o, " ok. data:"), s), a.setMessage("requestId:".concat(s.requestId, " expiredTime:").concat(s.expiredTime, " diff:").concat(r, "s")).setNetworkType(t.getNetworkType()).end(), s;
          }).catch(function (n) {
            return -1 === n.code && (n.code = na.COS_GET_SIG_FAIL), t.probeNetwork().then(function (e) {
              var t = m(e, 2),
                o = t[0],
                s = t[1];
              a.setError(n, o, s).end();
            }), we.warn("".concat(o, " failed. error:"), n), t.tryCount < 1 ? (t.tryCount++, t._getCosPreSigUrl(e)) : (t.tryCount = 0, ja({
              code: na.COS_GET_SIG_FAIL,
              message: aa.COS_GET_SIG_FAIL
            }));
          });
        }
      }, {
        key: "_initUploaderMethod",
        value: function value() {
          var e = this;
          if (this.TIMUploadPlugin) return this.timUploadPlugin = new this.TIMUploadPlugin(), void (this._cosUploadMethod = function (t, o) {
            e.timUploadPlugin.uploadFile(t, o);
          });
          this.appid && (this.cos = te ? new this.COSSDK({
            ForcePathStyle: !0,
            getAuthorization: this._getAuthorization.bind(this)
          }) : new this.COSSDK({
            getAuthorization: this._getAuthorization.bind(this)
          }), this._cosUploadMethod = te ? function (t, o) {
            e.cos.postObject(t, o);
          } : function (t, o) {
            e.cos.uploadFiles(t, o);
          });
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          this.COSSDK && (this.TIMUploadPlugin || this.isLoggedIn() && e % 60 == 0 && Math.ceil(Date.now() / 1e3) >= this.cosOptions.expiredTime - 120 && this._getAuthorizationKey());
        }
      }, {
        key: "_getAuthorization",
        value: function value(e, t) {
          t({
            TmpSecretId: this.cosOptions.secretId,
            TmpSecretKey: this.cosOptions.secretKey,
            XCosSecurityToken: this.cosOptions.sessionToken,
            ExpiredTime: this.cosOptions.expiredTime
          });
        }
      }, {
        key: "upload",
        value: function value(e) {
          if (!0 === e.getRelayFlag()) return Promise.resolve();
          var t = this.getModule(Co);
          switch (e.type) {
            case D.MSG_IMAGE:
              return t.addTotalCount(da), this._uploadImage(e);
            case D.MSG_FILE:
              return t.addTotalCount(da), this._uploadFile(e);
            case D.MSG_AUDIO:
              return t.addTotalCount(da), this._uploadAudio(e);
            case D.MSG_VIDEO:
              return t.addTotalCount(da), this._uploadVideo(e);
            default:
              return Promise.resolve();
          }
        }
      }, {
        key: "_uploadImage",
        value: function value(e) {
          var o = this.getModule(to),
            n = e.getElements()[0],
            a = o.getMessageOption(e.clientSequence);
          return this.doUploadImage({
            file: a.payload.file,
            to: a.to,
            onProgress: function onProgress(e) {
              if (n.updatePercent(e), ot(a.onProgress)) try {
                a.onProgress(e);
              } catch (t) {
                return ja({
                  code: na.MESSAGE_ONPROGRESS_FUNCTION_ERROR,
                  message: aa.MESSAGE_ONPROGRESS_FUNCTION_ERROR
                });
              }
            }
          }).then(function (o) {
            var a = o.location,
              s = o.fileType,
              r = o.fileSize,
              i = o.width,
              c = o.height,
              u = mt(a);
            n.updateImageFormat(s);
            var l = Lt({
                originUrl: u,
                originWidth: i,
                originHeight: c,
                min: 198
              }),
              d = Lt({
                originUrl: u,
                originWidth: i,
                originHeight: c,
                min: 720
              });
            return n.updateImageInfoArray([{
              size: r,
              url: u,
              width: i,
              height: c
            }, t({}, d), t({}, l)]), e;
          });
        }
      }, {
        key: "_uploadFile",
        value: function value(e) {
          var t = this.getModule(to),
            o = e.getElements()[0],
            n = t.getMessageOption(e.clientSequence);
          return this.doUploadFile({
            file: n.payload.file,
            to: n.to,
            onProgress: function onProgress(e) {
              if (o.updatePercent(e), ot(n.onProgress)) try {
                n.onProgress(e);
              } catch (t) {
                return ja({
                  code: na.MESSAGE_ONPROGRESS_FUNCTION_ERROR,
                  message: aa.MESSAGE_ONPROGRESS_FUNCTION_ERROR
                });
              }
            }
          }).then(function (t) {
            var n = t.location,
              a = mt(n);
            return o.updateFileUrl(a), e;
          });
        }
      }, {
        key: "_uploadAudio",
        value: function value(e) {
          var t = this.getModule(to),
            o = e.getElements()[0],
            n = t.getMessageOption(e.clientSequence);
          return this.doUploadAudio({
            file: n.payload.file,
            to: n.to,
            onProgress: function onProgress(e) {
              if (o.updatePercent(e), ot(n.onProgress)) try {
                n.onProgress(e);
              } catch (t) {
                return ja({
                  code: na.MESSAGE_ONPROGRESS_FUNCTION_ERROR,
                  message: aa.MESSAGE_ONPROGRESS_FUNCTION_ERROR
                });
              }
            }
          }).then(function (t) {
            var n = t.location,
              a = mt(n);
            return o.updateAudioUrl(a), e;
          });
        }
      }, {
        key: "_uploadVideo",
        value: function value(e) {
          var t = this.getModule(to),
            o = e.getElements()[0],
            n = t.getMessageOption(e.clientSequence);
          return this.doUploadVideo({
            file: n.payload.file,
            to: n.to,
            onProgress: function onProgress(e) {
              if (o.updatePercent(e), ot(n.onProgress)) try {
                n.onProgress(e);
              } catch (t) {
                return ja({
                  code: na.MESSAGE_ONPROGRESS_FUNCTION_ERROR,
                  message: aa.MESSAGE_ONPROGRESS_FUNCTION_ERROR
                });
              }
            }
          }).then(function (t) {
            var n = t.location,
              a = t.snapshotInfo,
              s = mt(n);
            return o.updateVideoUrl(s), Vt(a) || o.updateSnapshotInfo(a), e;
          });
        }
      }, {
        key: "doUploadImage",
        value: function value(e) {
          if (!e.file) return ja({
            code: na.MESSAGE_IMAGE_SELECT_FILE_FIRST,
            message: aa.MESSAGE_IMAGE_SELECT_FILE_FIRST
          });
          var t = this._checkImageType(e.file);
          if (!0 !== t) return t;
          var o = this._checkImageSize(e.file);
          if (!0 !== o) return o;
          var n = null;
          return this._setUploadFileType(os), this.uploadByCOS(e).then(function (e) {
            return n = e, At("https://".concat(e.location));
          }).then(function (e) {
            return n.width = e.width, n.height = e.height, Promise.resolve(n);
          });
        }
      }, {
        key: "_checkImageType",
        value: function value(e) {
          var t = "";
          return t = te ? e.url.slice(e.url.lastIndexOf(".") + 1) : e.files[0].name.slice(e.files[0].name.lastIndexOf(".") + 1), es.indexOf(t.toLowerCase()) >= 0 || ja({
            code: na.MESSAGE_IMAGE_TYPES_LIMIT,
            message: aa.MESSAGE_IMAGE_TYPES_LIMIT
          });
        }
      }, {
        key: "_checkImageSize",
        value: function value(e) {
          var t = 0;
          return 0 === (t = te ? e.size : e.files[0].size) ? ja({
            code: na.MESSAGE_FILE_IS_EMPTY,
            message: "".concat(aa.MESSAGE_FILE_IS_EMPTY)
          }) : t < 20971520 || ja({
            code: na.MESSAGE_IMAGE_SIZE_LIMIT,
            message: "".concat(aa.MESSAGE_IMAGE_SIZE_LIMIT)
          });
        }
      }, {
        key: "doUploadFile",
        value: function value(e) {
          var t = null;
          return e.file ? e.file.files[0].size > 104857600 ? ja(t = {
            code: na.MESSAGE_FILE_SIZE_LIMIT,
            message: aa.MESSAGE_FILE_SIZE_LIMIT
          }) : 0 === e.file.files[0].size ? (t = {
            code: na.MESSAGE_FILE_IS_EMPTY,
            message: "".concat(aa.MESSAGE_FILE_IS_EMPTY)
          }, ja(t)) : (this._setUploadFileType(ss), this.uploadByCOS(e)) : ja(t = {
            code: na.MESSAGE_FILE_SELECT_FILE_FIRST,
            message: aa.MESSAGE_FILE_SELECT_FILE_FIRST
          });
        }
      }, {
        key: "doUploadVideo",
        value: function value(e) {
          return e.file.videoFile.size > 104857600 ? ja({
            code: na.MESSAGE_VIDEO_SIZE_LIMIT,
            message: "".concat(aa.MESSAGE_VIDEO_SIZE_LIMIT)
          }) : 0 === e.file.videoFile.size ? ja({
            code: na.MESSAGE_FILE_IS_EMPTY,
            message: "".concat(aa.MESSAGE_FILE_IS_EMPTY)
          }) : -1 === ts.indexOf(e.file.videoFile.type) ? ja({
            code: na.MESSAGE_VIDEO_TYPES_LIMIT,
            message: "".concat(aa.MESSAGE_VIDEO_TYPES_LIMIT)
          }) : (this._setUploadFileType(ns), te ? this.handleVideoUpload({
            file: e.file.videoFile,
            onProgress: e.onProgress
          }) : oe ? this.handleVideoUpload(e) : void 0);
        }
      }, {
        key: "handleVideoUpload",
        value: function value(e) {
          var t = this;
          return new Promise(function (o, n) {
            t.uploadByCOS(e).then(function (e) {
              o(e);
            }).catch(function () {
              t.uploadByCOS(e).then(function (e) {
                o(e);
              }).catch(function () {
                n(new Ba({
                  code: na.MESSAGE_VIDEO_UPLOAD_FAIL,
                  message: aa.MESSAGE_VIDEO_UPLOAD_FAIL
                }));
              });
            });
          });
        }
      }, {
        key: "doUploadAudio",
        value: function value(e) {
          return e.file ? e.file.size > 20971520 ? ja(new Ba({
            code: na.MESSAGE_AUDIO_SIZE_LIMIT,
            message: "".concat(aa.MESSAGE_AUDIO_SIZE_LIMIT)
          })) : 0 === e.file.size ? ja(new Ba({
            code: na.MESSAGE_FILE_IS_EMPTY,
            message: "".concat(aa.MESSAGE_FILE_IS_EMPTY)
          })) : (this._setUploadFileType(as), this.uploadByCOS(e)) : ja(new Ba({
            code: na.MESSAGE_AUDIO_UPLOAD_FAIL,
            message: aa.MESSAGE_AUDIO_UPLOAD_FAIL
          }));
        }
      }, {
        key: "uploadByCOS",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, ".uploadByCOS");
          if (!ot(this._cosUploadMethod)) return we.warn("".concat(o, " 没有检测到上传插件，将无法发送图片、音频、视频、文件等类型的消息。详细请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html#registerPlugin")), ja({
            code: na.COS_UNDETECTED,
            message: aa.COS_UNDETECTED
          });
          if (this.timUploadPlugin) return this._uploadWithPreSigUrl(e);
          var n = new va(ya.UPLOAD),
            a = Date.now(),
            s = this._getFile(e);
          return new Promise(function (r, i) {
            var c = te ? t._createCosOptionsWXMiniApp(e) : t._createCosOptionsWeb(e),
              u = t;
            t._cosUploadMethod(c, function (e, c) {
              var l = Object.create(null);
              if (c) {
                if (e || Qe(c.files) && c.files[0].error) {
                  var d = new Ba({
                    code: na.MESSAGE_FILE_UPLOAD_FAIL,
                    message: aa.MESSAGE_FILE_UPLOAD_FAIL
                  });
                  return n.setError(d, !0, t.getNetworkType()).end(), we.log("".concat(o, " failed. error:"), c.files[0].error), 403 === c.files[0].error.statusCode && (we.warn("".concat(o, " failed. cos AccessKeyId was invalid, regain auth key!")), t._getAuthorizationKey()), void i(d);
                }
                l.fileName = s.name, l.fileSize = s.size, l.fileType = s.type.slice(s.type.indexOf("/") + 1).toLowerCase(), l.location = te ? c.Location : c.files[0].data.Location;
                var p = Date.now() - a,
                  g = u._formatFileSize(s.size),
                  _ = u._formatSpeed(1e3 * s.size / p),
                  h = "size:".concat(g, " time:").concat(p, "ms speed:").concat(_);
                we.log("".concat(o, " success. name:").concat(s.name, " ").concat(h)), r(l);
                var f = t.getModule(Co);
                return f.addCost(da, p), f.addFileSize(da, s.size), void n.setNetworkType(t.getNetworkType()).setMessage(h).end();
              }
              var m = new Ba({
                code: na.MESSAGE_FILE_UPLOAD_FAIL,
                message: aa.MESSAGE_FILE_UPLOAD_FAIL
              });
              n.setError(m, !0, u.getNetworkType()).end(), we.warn("".concat(o, " failed. error:"), e), 403 === e.statusCode && (we.warn("".concat(o, " failed. cos AccessKeyId was invalid, regain auth key!")), t._getAuthorizationKey()), i(m);
            });
          });
        }
      }, {
        key: "_uploadWithPreSigUrl",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._uploadWithPreSigUrl"),
            n = this._getFile(e);
          return this._createCosOptionsPreSigUrl(e).then(function (e) {
            return new Promise(function (a, s) {
              var r = new va(ya.UPLOAD),
                i = e.requestSnapshotUrl,
                c = void 0 === i ? void 0 : i,
                u = g(e, Js),
                l = Date.now();
              t._cosUploadMethod(u, function (e, i) {
                var u = Object.create(null);
                if (e || 403 === i.statusCode) {
                  var d = new Ba({
                    code: na.MESSAGE_FILE_UPLOAD_FAIL,
                    message: aa.MESSAGE_FILE_UPLOAD_FAIL
                  });
                  return r.setError(d, !0, t.getNetworkType()).end(), we.log("".concat(o, " failed, error:"), e), void s(d);
                }
                var p = i.data.location || "";
                0 !== p.indexOf("https://") && 0 !== p.indexOf("http://") || (p = p.split("//")[1]), u.fileName = n.name, u.fileSize = n.size, u.fileType = n.type.slice(n.type.indexOf("/") + 1).toLowerCase(), u.location = p;
                var g = Date.now() - l,
                  _ = t._formatFileSize(n.size),
                  h = t._formatSpeed(1e3 * n.size / g),
                  f = "size:".concat(_, ",time:").concat(g, "ms,speed:").concat(h, " res:").concat(JSON.stringify(i.data));
                we.log("".concat(o, " success name:").concat(n.name, ",").concat(f)), r.setNetworkType(t.getNetworkType()).setMessage(f).end();
                var m = t.getModule(Co);
                if (m.addCost(da, g), m.addFileSize(da, n.size), !Vt(c)) return t._getSnapshotInfoByUrl(c).then(function (e) {
                  u.snapshotInfo = e, a(u);
                });
                a(u);
              });
            });
          });
        }
      }, {
        key: "_getFile",
        value: function value(e) {
          var t = null;
          return te ? t = Z && Qe(e.file.files) ? e.file.files[0] : e.file : oe && (t = e.file.files[0]), t;
        }
      }, {
        key: "_formatFileSize",
        value: function value(e) {
          return e < 1024 ? e + "B" : e < 1048576 ? Math.floor(e / 1024) + "KB" : Math.floor(e / 1048576) + "MB";
        }
      }, {
        key: "_formatSpeed",
        value: function value(e) {
          return e <= 1048576 ? Pt(e / 1024, 1) + "KB/s" : Pt(e / 1048576, 1) + "MB/s";
        }
      }, {
        key: "_createCosOptionsWeb",
        value: function value(e) {
          var t = e.file.files[0].name,
            o = t.slice(t.lastIndexOf(".")),
            n = this._genFileName("".concat(dt(999999)).concat(o));
          return {
            files: [{
              Bucket: "".concat(this.bucketName, "-").concat(this.appid),
              Region: this.region,
              Key: "".concat(this.directory, "/").concat(n),
              Body: e.file.files[0]
            }],
            SliceSize: 1048576,
            onProgress: function onProgress(t) {
              if ("function" == typeof e.onProgress) try {
                e.onProgress(t.percent);
              } catch (o) {
                we.warn("onProgress callback error:", o);
              }
            },
            onFileFinish: function onFileFinish(e, t, o) {}
          };
        }
      }, {
        key: "_createCosOptionsWXMiniApp",
        value: function value(e) {
          var t = this._getFile(e),
            o = this._genFileName(t.name),
            n = t.url;
          return {
            Bucket: "".concat(this.bucketName, "-").concat(this.appid),
            Region: this.region,
            Key: "".concat(this.directory, "/").concat(o),
            FilePath: n,
            onProgress: function onProgress(t) {
              if (we.log(JSON.stringify(t)), "function" == typeof e.onProgress) try {
                e.onProgress(t.percent);
              } catch (o) {
                we.warn("onProgress callback error:", o);
              }
            }
          };
        }
      }, {
        key: "_createCosOptionsPreSigUrl",
        value: function value(e) {
          var t = this,
            o = "",
            n = "",
            a = 0;
          if (te) {
            var s = this._getFile(e);
            o = this._genFileName(s.name), n = s.url, a = 1;
          } else {
            var r = e.file.files[0].name,
              i = r.slice(r.lastIndexOf("."));
            o = this._genFileName("".concat(dt(999999)).concat(i)), n = e.file.files[0], a = 0;
          }
          return this._getCosPreSigUrl({
            fileType: this.uploadFileType,
            fileName: o,
            uploadMethod: a,
            duration: this.duration
          }).then(function (a) {
            var s = a.uploadUrl,
              r = a.downloadUrl,
              i = a.requestSnapshotUrl,
              c = void 0 === i ? void 0 : i;
            return {
              url: s,
              fileType: t.uploadFileType,
              fileName: o,
              resources: n,
              downloadUrl: r,
              requestSnapshotUrl: c,
              onProgress: function onProgress(t) {
                if ("function" == typeof e.onProgress) try {
                  e.onProgress(t.percent);
                } catch (o) {
                  we.warn("onProgress callback error:", o), we.error(o);
                }
              }
            };
          });
        }
      }, {
        key: "_genFileName",
        value: function value(e) {
          return "".concat(Ot(), "-").concat(e);
        }
      }, {
        key: "_setUploadFileType",
        value: function value(e) {
          this.uploadFileType = e;
        }
      }, {
        key: "_getSnapshotInfoByUrl",
        value: function value(e) {
          var t = this,
            o = new va(ya.GET_SNAPSHOT_INFO);
          return this.request({
            protocolName: qn,
            requestData: {
              platform: this.getPlatform(),
              coverName: this._genFileName(dt(99999)),
              requestSnapshotUrl: e
            }
          }).then(function (e) {
            var t = (e.data || {}).snapshotUrl;
            return o.setMessage("snapshotUrl:".concat(t)).end(), Vt(t) ? {} : At(t).then(function (e) {
              return {
                snapshotUrl: t,
                snapshotWidth: e.width,
                snapshotHeight: e.height
              };
            });
          }).catch(function (e) {
            return we.warn("".concat(t._className, "._getSnapshotInfoByUrl failed. error:"), e), o.setCode(e.errorCode).setMessage(e.errorInfo).end(), {};
          });
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset"));
        }
      }]), a;
    }(Do),
    Qs = ["downloadKey", "pbDownloadKey", "messageList"],
    Zs = function () {
      function e(t) {
        n(this, e), this._className = "MergerMessageHandler", this._messageModule = t;
      }
      return s(e, [{
        key: "uploadMergerMessage",
        value: function value(e, t) {
          var o = this;
          we.debug("".concat(this._className, ".uploadMergerMessage message:"), e, "messageBytes:".concat(t));
          var n = e.payload.messageList,
            a = n.length,
            s = new va(ya.UPLOAD_MERGER_MESSAGE);
          return this._messageModule.request({
            protocolName: Yn,
            requestData: {
              messageList: n
            }
          }).then(function (e) {
            we.debug("".concat(o._className, ".uploadMergerMessage ok. response:"), e.data);
            var n = e.data,
              r = n.pbDownloadKey,
              i = n.downloadKey,
              c = {
                pbDownloadKey: r,
                downloadKey: i,
                messageNumber: a
              };
            return s.setNetworkType(o._messageModule.getNetworkType()).setMessage("".concat(a, "-").concat(t, "-").concat(i)).end(), c;
          }).catch(function (e) {
            throw we.warn("".concat(o._className, ".uploadMergerMessage failed. error:"), e), o._messageModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              s.setError(e, n, a).end();
            }), e;
          });
        }
      }, {
        key: "downloadMergerMessage",
        value: function value(e) {
          var o = this;
          we.debug("".concat(this._className, ".downloadMergerMessage message:"), e);
          var n = e.payload.downloadKey,
            a = new va(ya.DOWNLOAD_MERGER_MESSAGE);
          return a.setMessage("downloadKey:".concat(n)), this._messageModule.request({
            protocolName: jn,
            requestData: {
              downloadKey: n
            }
          }).then(function (n) {
            if (we.debug("".concat(o._className, ".downloadMergerMessage ok. response:"), n.data), ot(e.clearElement)) {
              var s = e.payload,
                r = (s.downloadKey, s.pbDownloadKey, s.messageList, g(s, Qs));
              e.clearElement(), e.setElement({
                type: e.type,
                content: t({
                  messageList: n.data.messageList
                }, r)
              });
            } else {
              var i = [];
              n.data.messageList.forEach(function (e) {
                if (!Vt(e)) {
                  var t = new Ga(e);
                  i.push(t);
                }
              }), e.payload.messageList = i, e.payload.downloadKey = "", e.payload.pbDownloadKey = "";
            }
            return a.setNetworkType(o._messageModule.getNetworkType()).end(), e;
          }).catch(function (e) {
            throw we.warn("".concat(o._className, ".downloadMergerMessage failed. key:").concat(n, " error:"), e), o._messageModule.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                s = o[1];
              a.setError(e, n, s).end();
            }), e;
          });
        }
      }, {
        key: "createMergerMessagePack",
        value: function value(e, t, o) {
          return e.conversationType === D.CONV_C2C ? this._createC2CMergerMessagePack(e, t, o) : this._createGroupMergerMessagePack(e, t, o);
        }
      }, {
        key: "_createC2CMergerMessagePack",
        value: function value(e, t, o) {
          var n = null;
          t && (t.offlinePushInfo && (n = t.offlinePushInfo), !0 === t.onlineUserOnly && (n ? n.disablePush = !0 : n = {
            disablePush: !0
          }));
          var a = "";
          ze(e.cloudCustomData) && e.cloudCustomData.length > 0 && (a = e.cloudCustomData);
          var s = o.pbDownloadKey,
            r = o.downloadKey,
            i = o.messageNumber,
            c = e.payload,
            u = c.title,
            l = c.abstractList,
            d = c.compatibleText,
            p = this._messageModule.getModule(no);
          return {
            protocolName: Go,
            tjgID: this._messageModule.generateTjgID(e),
            requestData: {
              fromAccount: this._messageModule.getMyUserID(),
              toAccount: e.to,
              msgBody: [{
                msgType: e.type,
                msgContent: {
                  pbDownloadKey: s,
                  downloadKey: r,
                  title: u,
                  abstractList: l,
                  compatibleText: d,
                  messageNumber: i
                }
              }],
              cloudCustomData: a,
              msgSeq: e.sequence,
              msgRandom: e.random,
              msgLifeTime: p && p.isOnlineMessage(e, t) ? 0 : void 0,
              offlinePushInfo: n ? {
                pushFlag: !0 === n.disablePush ? 1 : 0,
                title: n.title || "",
                desc: n.description || "",
                ext: n.extension || "",
                apnsInfo: {
                  badgeMode: !0 === n.ignoreIOSBadge ? 1 : 0
                },
                androidInfo: {
                  OPPOChannelID: n.androidOPPOChannelID || ""
                }
              } : void 0
            }
          };
        }
      }, {
        key: "_createGroupMergerMessagePack",
        value: function value(e, t, o) {
          var n = null;
          t && t.offlinePushInfo && (n = t.offlinePushInfo);
          var a = "";
          ze(e.cloudCustomData) && e.cloudCustomData.length > 0 && (a = e.cloudCustomData);
          var s = o.pbDownloadKey,
            r = o.downloadKey,
            i = o.messageNumber,
            c = e.payload,
            u = c.title,
            l = c.abstractList,
            d = c.compatibleText,
            p = this._messageModule.getModule(ao);
          return {
            protocolName: Po,
            tjgID: this._messageModule.generateTjgID(e),
            requestData: {
              fromAccount: this._messageModule.getMyUserID(),
              groupID: e.to,
              msgBody: [{
                msgType: e.type,
                msgContent: {
                  pbDownloadKey: s,
                  downloadKey: r,
                  title: u,
                  abstractList: l,
                  compatibleText: d,
                  messageNumber: i
                }
              }],
              random: e.random,
              priority: e.priority,
              clientSequence: e.clientSequence,
              groupAtInfo: void 0,
              cloudCustomData: a,
              onlineOnlyFlag: p && p.isOnlineMessage(e, t) ? 1 : 0,
              offlinePushInfo: n ? {
                pushFlag: !0 === n.disablePush ? 1 : 0,
                title: n.title || "",
                desc: n.description || "",
                ext: n.extension || "",
                apnsInfo: {
                  badgeMode: !0 === n.ignoreIOSBadge ? 1 : 0
                },
                androidInfo: {
                  OPPOChannelID: n.androidOPPOChannelID || ""
                }
              } : void 0,
              clientTime: e.clientTime,
              needReadReceipt: !0 !== e.needReadReceipt || p.isMessageFromOrToAVChatroom(e.to) ? 0 : 1
            }
          };
        }
      }]), e;
    }(),
    er = {
      ERR_SVR_COMM_SENSITIVE_TEXT: 80001,
      ERR_SVR_COMM_BODY_SIZE_LIMIT: 80002,
      OPEN_SERVICE_OVERLOAD_ERROR: 60022,
      ERR_SVR_MSG_PKG_PARSE_FAILED: 20001,
      ERR_SVR_MSG_INTERNAL_AUTH_FAILED: 20002,
      ERR_SVR_MSG_INVALID_ID: 20003,
      ERR_SVR_MSG_PUSH_DENY: 20006,
      ERR_SVR_MSG_IN_PEER_BLACKLIST: 20007,
      ERR_SVR_MSG_BOTH_NOT_FRIEND: 20009,
      ERR_SVR_MSG_NOT_PEER_FRIEND: 20010,
      ERR_SVR_MSG_NOT_SELF_FRIEND: 20011,
      ERR_SVR_MSG_SHUTUP_DENY: 20012,
      ERR_SVR_GROUP_INVALID_PARAMETERS: 10004,
      ERR_SVR_GROUP_PERMISSION_DENY: 10007,
      ERR_SVR_GROUP_NOT_FOUND: 10010,
      ERR_SVR_GROUP_INVALID_GROUPID: 10015,
      ERR_SVR_GROUP_REJECT_FROM_THIRDPARTY: 10016,
      ERR_SVR_GROUP_SHUTUP_DENY: 10017,
      MESSAGE_SEND_FAIL: 2100,
      OVER_FREQUENCY_LIMIT: 2996
    },
    tr = [na.MESSAGE_ONPROGRESS_FUNCTION_ERROR, na.MESSAGE_IMAGE_SELECT_FILE_FIRST, na.MESSAGE_IMAGE_TYPES_LIMIT, na.MESSAGE_FILE_IS_EMPTY, na.MESSAGE_IMAGE_SIZE_LIMIT, na.MESSAGE_FILE_SELECT_FILE_FIRST, na.MESSAGE_FILE_SIZE_LIMIT, na.MESSAGE_VIDEO_SIZE_LIMIT, na.MESSAGE_VIDEO_TYPES_LIMIT, na.MESSAGE_AUDIO_UPLOAD_FAIL, na.MESSAGE_AUDIO_SIZE_LIMIT, na.COS_UNDETECTED];
  var or = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "MessageModule", a._messageOptionsMap = new Map(), a._mergerMessageHandler = new Zs(_(a)), a;
      }
      return s(o, [{
        key: "createTextMessage",
        value: function value(e) {
          var t = e.to,
            o = e.payload.atUserList,
            n = void 0 === o ? [] : o;
          if ((Et({
            groupID: t
          }) || Tt(t)) && n.includes(D.MSG_AT_ALL)) return ja({
            code: na.MESSAGE_AT_TYPE_INVALID,
            message: aa.MESSAGE_AT_TYPE_INVALID
          });
          var a = this.getMyUserID();
          e.currentUser = a, e.senderTinyID = this.getMyTinyID();
          var s = new wa(e),
            r = "string" == typeof e.payload ? e.payload : e.payload.text,
            i = new Ia({
              text: r
            }),
            c = this._getNickAndAvatarByUserID(a);
          return s.setElement(i), s.setNickAndAvatar(c), s.setNameCard(this._getNameCardByGroupID(s)), s;
        }
      }, {
        key: "createImageMessage",
        value: function value(e) {
          var t = this.getMyUserID();
          e.currentUser = t, e.senderTinyID = this.getMyTinyID();
          var o = new wa(e);
          if (te) {
            var n = e.payload.file;
            if (je(n)) return void we.warn("小程序环境下调用 createImageMessage 接口时，payload.file 不支持传入 File 对象");
            var a = n.tempFilePaths[0],
              s = {
                url: a,
                name: a.slice(a.lastIndexOf("/") + 1),
                size: n.tempFiles && n.tempFiles[0].size || 1,
                type: a.slice(a.lastIndexOf(".") + 1).toLowerCase()
              };
            e.payload.file = s;
          } else if (oe) if (je(e.payload.file)) {
            var r = e.payload.file;
            e.payload.file = {
              files: [r]
            };
          } else if (Xe(e.payload.file) && "undefined" != typeof uni) {
            var i = e.payload.file.tempFiles[0];
            e.payload.file = {
              files: [i]
            };
          }
          var c = new Ea({
              imageFormat: be.UNKNOWN,
              uuid: this._generateUUID(),
              file: e.payload.file
            }),
            u = this._getNickAndAvatarByUserID(t);
          return o.setElement(c), o.setNickAndAvatar(u), o.setNameCard(this._getNameCardByGroupID(o)), this._messageOptionsMap.set(o.clientSequence, e), o;
        }
      }, {
        key: "createAudioMessage",
        value: function value(e) {
          if (te) {
            var t = e.payload.file;
            if (te) {
              var o = {
                url: t.tempFilePath,
                name: t.tempFilePath.slice(t.tempFilePath.lastIndexOf("/") + 1),
                size: t.fileSize,
                second: parseInt(t.duration) / 1e3,
                type: t.tempFilePath.slice(t.tempFilePath.lastIndexOf(".") + 1).toLowerCase()
              };
              e.payload.file = o;
            }
            var n = this.getMyUserID();
            e.currentUser = n, e.senderTinyID = this.getMyTinyID();
            var a = new wa(e),
              s = new Ca({
                second: Math.floor(t.duration / 1e3),
                size: t.fileSize,
                url: t.tempFilePath,
                uuid: this._generateUUID()
              }),
              r = this._getNickAndAvatarByUserID(n);
            return a.setElement(s), a.setNickAndAvatar(r), a.setNameCard(this._getNameCardByGroupID(a)), this._messageOptionsMap.set(a.clientSequence, e), a;
          }
          we.warn("createAudioMessage 目前只支持小程序环境下发语音消息");
        }
      }, {
        key: "createVideoMessage",
        value: function value(e) {
          var t = this.getMyUserID();
          e.currentUser = t, e.senderTinyID = this.getMyTinyID(), e.payload.file.thumbUrl = "https://web.sdk.qcloud.com/im/assets/images/transparent.png", e.payload.file.thumbSize = 1668;
          var o = {};
          if (te) {
            if (Q) return void we.warn("createVideoMessage 不支持在支付宝小程序环境下使用");
            if (je(e.payload.file)) return void we.warn("小程序环境下调用 createVideoMessage 接口时，payload.file 不支持传入 File 对象");
            var n = e.payload.file;
            o.url = n.tempFilePath, o.name = n.tempFilePath.slice(n.tempFilePath.lastIndexOf("/") + 1), o.size = n.size, o.second = n.duration, o.type = n.tempFilePath.slice(n.tempFilePath.lastIndexOf(".") + 1).toLowerCase();
          } else if (oe) {
            if (je(e.payload.file)) {
              var a = e.payload.file;
              e.payload.file.files = [a];
            } else if (Xe(e.payload.file) && "undefined" != typeof uni) {
              var s = e.payload.file.tempFile;
              e.payload.file.files = [s];
            }
            var r = e.payload.file;
            o.url = window.URL.createObjectURL(r.files[0]), o.name = r.files[0].name, o.size = r.files[0].size, o.second = r.files[0].duration || 0, o.type = r.files[0].type.split("/")[1];
          }
          e.payload.file.videoFile = o;
          var i = new wa(e),
            c = new La({
              videoFormat: o.type,
              videoSecond: Pt(o.second, 0),
              videoSize: o.size,
              remoteVideoUrl: "",
              videoUrl: o.url,
              videoUUID: this._generateUUID(),
              thumbUUID: this._generateUUID(),
              thumbWidth: e.payload.file.width || 200,
              thumbHeight: e.payload.file.height || 200,
              thumbUrl: e.payload.file.thumbUrl,
              thumbSize: e.payload.file.thumbSize,
              thumbFormat: e.payload.file.thumbUrl.slice(e.payload.file.thumbUrl.lastIndexOf(".") + 1).toLowerCase()
            }),
            u = this._getNickAndAvatarByUserID(t);
          return i.setElement(c), i.setNickAndAvatar(u), i.setNameCard(this._getNameCardByGroupID(i)), this._messageOptionsMap.set(i.clientSequence, e), i;
        }
      }, {
        key: "createCustomMessage",
        value: function value(e) {
          var t = this.getMyUserID();
          e.currentUser = t, e.senderTinyID = this.getMyTinyID();
          var o = new wa(e),
            n = new Ra({
              data: e.payload.data,
              description: e.payload.description,
              extension: e.payload.extension
            }),
            a = this._getNickAndAvatarByUserID(t);
          return o.setElement(n), o.setNickAndAvatar(a), o.setNameCard(this._getNameCardByGroupID(o)), o;
        }
      }, {
        key: "createFaceMessage",
        value: function value(e) {
          var t = this.getMyUserID();
          e.currentUser = t, e.senderTinyID = this.getMyTinyID();
          var o = new wa(e),
            n = new Ta(e.payload),
            a = this._getNickAndAvatarByUserID(t);
          return o.setElement(n), o.setNickAndAvatar(a), o.setNameCard(this._getNameCardByGroupID(o)), o;
        }
      }, {
        key: "createMergerMessage",
        value: function value(e) {
          var t = this.getMyUserID();
          e.currentUser = t, e.senderTinyID = this.getMyTinyID();
          var o = this._getNickAndAvatarByUserID(t),
            n = new wa(e),
            a = new Pa(e.payload);
          return n.setElement(a), n.setNickAndAvatar(o), n.setNameCard(this._getNameCardByGroupID(n)), n.setRelayFlag(!0), n;
        }
      }, {
        key: "createForwardMessage",
        value: function value(e) {
          var t = e.to,
            o = e.conversationType,
            n = e.priority,
            a = e.payload,
            s = e.needReadReceipt,
            r = this.getMyUserID(),
            i = this._getNickAndAvatarByUserID(r);
          if (a.type === D.MSG_GRP_TIP) return ja(new Ba({
            code: na.MESSAGE_FORWARD_TYPE_INVALID,
            message: aa.MESSAGE_FORWARD_TYPE_INVALID
          }));
          var c = {
              to: t,
              conversationType: o,
              conversationID: "".concat(o).concat(t),
              priority: n,
              isPlaceMessage: 0,
              status: xt.UNSEND,
              currentUser: r,
              senderTinyID: this.getMyTinyID(),
              cloudCustomData: e.cloudCustomData || a.cloudCustomData || "",
              needReadReceipt: s
            },
            u = new wa(c);
          return u.setElement(a.getElements()[0]), u.setNickAndAvatar(i), u.setNameCard(this._getNameCardByGroupID(a)), u.setRelayFlag(!0), u;
        }
      }, {
        key: "downloadMergerMessage",
        value: function value(e) {
          return this._mergerMessageHandler.downloadMergerMessage(e);
        }
      }, {
        key: "createFileMessage",
        value: function value(e) {
          if (!te || Z) {
            if (oe || Z) if (je(e.payload.file)) {
              var t = e.payload.file;
              e.payload.file = {
                files: [t]
              };
            } else if (Xe(e.payload.file) && "undefined" != typeof uni) {
              var o = e.payload.file,
                n = o.tempFiles,
                a = o.files,
                s = null;
              Qe(n) ? s = n[0] : Qe(a) && (s = a[0]), e.payload.file = {
                files: [s]
              };
            }
            var r = this.getMyUserID();
            e.currentUser = r, e.senderTinyID = this.getMyTinyID();
            var i = new wa(e),
              c = new Oa({
                uuid: this._generateUUID(),
                file: e.payload.file
              }),
              u = this._getNickAndAvatarByUserID(r);
            return i.setElement(c), i.setNickAndAvatar(u), i.setNameCard(this._getNameCardByGroupID(i)), this._messageOptionsMap.set(i.clientSequence, e), i;
          }
          we.warn("小程序目前不支持选择文件， createFileMessage 接口不可用！");
        }
      }, {
        key: "createLocationMessage",
        value: function value(e) {
          var t = this.getMyUserID();
          e.currentUser = t, e.senderTinyID = this.getMyTinyID();
          var o = new wa(e),
            n = new ka(e.payload),
            a = this._getNickAndAvatarByUserID(t);
          return o.setElement(n), o.setNickAndAvatar(a), o.setNameCard(this._getNameCardByGroupID(o)), o;
        }
      }, {
        key: "_onCannotFindModule",
        value: function value() {
          return ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "sendMessageInstance",
        value: function value(e, t) {
          var o,
            n = this,
            a = null;
          switch (e.conversationType) {
            case D.CONV_C2C:
              if (!(a = this.getModule(no))) return this._onCannotFindModule();
              break;
            case D.CONV_GROUP:
              if (!(a = this.getModule(ao))) return this._onCannotFindModule();
              if (Et({
                groupID: e.to
              })) {
                var s = a.getLocalGroupProfile(e.to);
                if (s && s.isSupportTopic) return ja({
                  code: na.MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL,
                  message: aa.MESSAGE_SEND_GROUP_WITH_TOPIC_FAIL
                });
                if (!Ze(t) && !Ze(t.messageControlInfo)) return ja({
                  code: na.MESSAGE_CONTROL_INFO_FAIL,
                  message: aa.MESSAGE_CONTROL_INFO_FAIL
                });
              }
              break;
            default:
              return ja({
                code: na.MESSAGE_SEND_INVALID_CONVERSATION_TYPE,
                message: aa.MESSAGE_SEND_INVALID_CONVERSATION_TYPE
              });
          }
          var r = this.getModule(ho),
            i = this.getModule(ao);
          return r.upload(e).then(function () {
            n._getSendMessageSpecifiedKey(e) === la && n.getModule(Co).addSuccessCount(da);
            return i.guardForAVChatRoom(e).then(function () {
              if (!e.isSendable()) return ja({
                code: na.MESSAGE_FILE_URL_IS_EMPTY,
                message: aa.MESSAGE_FILE_URL_IS_EMPTY
              });
              n._addSendMessageTotalCount(e), o = Date.now();
              var s = function (e) {
                var t = "utf-8";
                oe && document && (t = document.charset.toLowerCase());
                var o,
                  n,
                  a = 0;
                if (n = e.length, "utf-8" === t || "utf8" === t) for (var s = 0; s < n; s++) {
                  (o = e.codePointAt(s)) <= 127 ? a += 1 : o <= 2047 ? a += 2 : o <= 65535 ? a += 3 : (a += 4, s++);
                } else if ("utf-16" === t || "utf16" === t) for (var r = 0; r < n; r++) {
                  (o = e.codePointAt(r)) <= 65535 ? a += 2 : (a += 4, r++);
                } else a = e.replace(/[^\x00-\xff]/g, "aa").length;
                return a;
              }(JSON.stringify(e));
              return e.type === D.MSG_MERGER && s > 7e3 ? n._mergerMessageHandler.uploadMergerMessage(e, s).then(function (o) {
                var a = n._mergerMessageHandler.createMergerMessagePack(e, t, o);
                return n.request(a);
              }) : (n.getModule(co).setMessageRandom(e), e.conversationType === D.CONV_C2C || e.conversationType === D.CONV_GROUP ? a.sendMessage(e, t) : void 0);
            }).then(function (s) {
              var r = s.data,
                i = r.time,
                c = r.sequence,
                u = r.readReceiptCode;
              $e(u) && 0 !== u && (new va(ya.SEND_MESSAGE_WITH_RECEIPT).setMessage("from:".concat(e.from, " to:").concat(e.to, " sequence:").concat(c, " readReceiptCode:").concat(u)).end(), we.warn("".concat(n._className, ".sendMessageInstance readReceiptCode:").concat(u, " message:").concat(Ha[u])));
              n._addSendMessageSuccessCount(e, o), n._messageOptionsMap.delete(e.clientSequence);
              var l = n.getModule(co);
              e.status = xt.SUCCESS, e.time = i;
              var d = !1;
              if (e.conversationType === D.CONV_GROUP) e.sequence = c;else if (e.conversationType === D.CONV_C2C) {
                var p = l.getLatestMessageSentByMe(e.conversationID);
                if (p) {
                  var g = p.nick,
                    _ = p.avatar;
                  g === e.nick && _ === e.avatar || (d = !0);
                }
              }
              if (l.appendToMessageList(e), d && l.modifyMessageSentByMe({
                conversationID: e.conversationID,
                latestNick: e.nick,
                latestAvatar: e.avatar
              }), a.isOnlineMessage(e, t)) e._onlineOnlyFlag = !0;else {
                var h = e;
                Xe(t) && Xe(t.messageControlInfo) && (!0 === t.messageControlInfo.excludedFromLastMessage && (e._isExcludedFromLastMessage = !0, h = ""), !0 === t.messageControlInfo.excludedFromUnreadCount && (e._isExcludedFromUnreadCount = !0));
                var f = e.conversationType;
                if (Tt(e.to)) f = D.CONV_TOPIC, n.getModule(io).onMessageSent({
                  groupID: bt(e.to),
                  topicID: e.to,
                  lastMessage: h
                });
                l.onMessageSent({
                  conversationOptionsList: [{
                    conversationID: e.conversationID,
                    unreadCount: 0,
                    type: f,
                    subType: e.conversationSubType,
                    lastMessage: h
                  }]
                });
              }
              return e.getRelayFlag() || "TIMImageElem" !== e.type || kt(e.payload.imageInfoArray), ba({
                message: e
              });
            });
          }).catch(function (t) {
            return n._onSendMessageFailed(e, t);
          });
        }
      }, {
        key: "_onSendMessageFailed",
        value: function value(e, t) {
          e.status = xt.FAIL, this.getModule(co).deleteMessageRandom(e), this._addSendMessageFailCountOnUser(e, t);
          var o = new va(ya.SEND_MESSAGE);
          return o.setMessage("tjg_id:".concat(this.generateTjgID(e), " type:").concat(e.type, " from:").concat(e.from, " to:").concat(e.to)), this.probeNetwork().then(function (e) {
            var n = m(e, 2),
              a = n[0],
              s = n[1];
            o.setError(t, a, s).end();
          }), we.error("".concat(this._className, "._onSendMessageFailed error:"), t), ja(new Ba({
            code: t && t.code ? t.code : na.MESSAGE_SEND_FAIL,
            message: t && t.message ? t.message : aa.MESSAGE_SEND_FAIL,
            data: {
              message: e
            }
          }));
        }
      }, {
        key: "_getSendMessageSpecifiedKey",
        value: function value(e) {
          if ([D.MSG_IMAGE, D.MSG_AUDIO, D.MSG_VIDEO, D.MSG_FILE].includes(e.type)) return la;
          if (e.conversationType === D.CONV_C2C) return ia;
          if (e.conversationType === D.CONV_GROUP) {
            var t = this.getModule(ao).getLocalGroupProfile(e.to);
            if (!t) return;
            var o = t.type;
            return It(o) ? ua : ca;
          }
        }
      }, {
        key: "_addSendMessageTotalCount",
        value: function value(e) {
          var t = this._getSendMessageSpecifiedKey(e);
          t && this.getModule(Co).addTotalCount(t);
        }
      }, {
        key: "_addSendMessageSuccessCount",
        value: function value(e, t) {
          var o = Math.abs(Date.now() - t),
            n = this._getSendMessageSpecifiedKey(e);
          if (n) {
            var a = this.getModule(Co);
            a.addSuccessCount(n), a.addCost(n, o);
          }
        }
      }, {
        key: "_addSendMessageFailCountOnUser",
        value: function value(e, t) {
          var o,
            n,
            a = t.code,
            s = void 0 === a ? -1 : a,
            r = this.getModule(Co),
            i = this._getSendMessageSpecifiedKey(e);
          i === la && (o = s, n = !1, tr.includes(o) && (n = !0), n) ? r.addFailedCountOfUserSide(da) : function (e) {
            var t = !1;
            return Object.values(er).includes(e) && (t = !0), (e >= 120001 && e <= 13e4 || e >= 10100 && e <= 10200) && (t = !0), t;
          }(s) && i && r.addFailedCountOfUserSide(i);
        }
      }, {
        key: "resendMessage",
        value: function value(e) {
          return e.isResend = !0, e.status = xt.UNSEND, e.random = dt(), e.clientTime = ke(), e.generateMessageID(), this.sendMessageInstance(e);
        }
      }, {
        key: "revokeMessage",
        value: function value(e) {
          var t = this,
            o = null;
          if (e.conversationType === D.CONV_C2C) {
            if (!(o = this.getModule(no))) return this._onCannotFindModule();
          } else if (e.conversationType === D.CONV_GROUP && !(o = this.getModule(ao))) return this._onCannotFindModule();
          var n = new va(ya.REVOKE_MESSAGE);
          return n.setMessage("tjg_id:".concat(this.generateTjgID(e), " type:").concat(e.type, " from:").concat(e.from, " to:").concat(e.to)), o.revokeMessage(e).then(function (o) {
            var a = o.data.recallRetList;
            if (!Vt(a) && 0 !== a[0].retCode) {
              var s = new Ba({
                code: a[0].retCode,
                message: Ha[a[0].retCode] || aa.MESSAGE_REVOKE_FAIL,
                data: {
                  message: e
                }
              });
              return n.setCode(s.code).setMoreMessage(s.message).end(), ja(s);
            }
            return we.info("".concat(t._className, ".revokeMessage ok. ID:").concat(e.ID)), e.isRevoked = !0, n.end(), t.getModule(co).onMessageRevoked([e]), ba({
              message: e
            });
          }).catch(function (o) {
            t.probeNetwork().then(function (e) {
              var t = m(e, 2),
                a = t[0],
                s = t[1];
              n.setError(o, a, s).end();
            });
            var a = new Ba({
              code: o && o.code ? o.code : na.MESSAGE_REVOKE_FAIL,
              message: o && o.message ? o.message : aa.MESSAGE_REVOKE_FAIL,
              data: {
                message: e
              }
            });
            return we.warn("".concat(t._className, ".revokeMessage failed. error:"), o), ja(a);
          });
        }
      }, {
        key: "deleteMessage",
        value: function value(e) {
          var t = this,
            o = null,
            n = e[0],
            a = n.conversationID,
            s = "",
            r = [],
            i = [];
          if (n.conversationType === D.CONV_C2C ? (o = this.getModule(no), s = a.replace(D.CONV_C2C, ""), e.forEach(function (e) {
            e && e.status === xt.SUCCESS && e.conversationID === a && (e._onlineOnlyFlag || r.push("".concat(e.sequence, "_").concat(e.random, "_").concat(e.time)), i.push(e));
          })) : n.conversationType === D.CONV_GROUP && (o = this.getModule(ao), s = a.replace(D.CONV_GROUP, ""), e.forEach(function (e) {
            e && e.status === xt.SUCCESS && e.conversationID === a && (e._onlineOnlyFlag || r.push("".concat(e.sequence)), i.push(e));
          })), !o) return this._onCannotFindModule();
          if (0 === r.length) return this._onMessageDeleted(i);
          r.length > 30 && (r = r.slice(0, 30), i = i.slice(0, 30));
          var c = new va(ya.DELETE_MESSAGE);
          return c.setMessage("to:".concat(s, " count:").concat(r.length)), o.deleteMessage({
            to: s,
            keyList: r
          }).then(function (e) {
            return c.end(), we.info("".concat(t._className, ".deleteMessage ok")), t._onMessageDeleted(i);
          }).catch(function (e) {
            t.probeNetwork().then(function (t) {
              var o = m(t, 2),
                n = o[0],
                a = o[1];
              c.setError(e, n, a).end();
            }), we.warn("".concat(t._className, ".deleteMessage failed. error:"), e);
            var o = new Ba({
              code: e && e.code ? e.code : na.MESSAGE_DELETE_FAIL,
              message: e && e.message ? e.message : aa.MESSAGE_DELETE_FAIL
            });
            return ja(o);
          });
        }
      }, {
        key: "_onMessageDeleted",
        value: function value(e) {
          return this.getModule(co).onMessageDeleted(e), Ya({
            messageList: e
          });
        }
      }, {
        key: "modifyRemoteMessage",
        value: function value(e) {
          var t = this,
            o = null,
            n = e.conversationType,
            a = e.to;
          if (this.getModule(ao).isMessageFromOrToAVChatroom(a)) return ja({
            code: na.MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM,
            message: aa.MESSAGE_MODIFY_DISABLED_IN_AVCHATROOM,
            data: {
              message: e
            }
          });
          n === D.CONV_C2C ? o = this.getModule(no) : n === D.CONV_GROUP && (o = this.getModule(ao));
          var s = new va(ya.MODIFY_MESSAGE);
          return s.setMessage("to:".concat(a)), o.modifyRemoteMessage(e).then(function (o) {
            s.end(), we.info("".concat(t._className, ".modifyRemoteMessage ok"));
            var n = t._onModifyRemoteMessageResp(e, o.data);
            return ba({
              message: n
            });
          }).catch(function (o) {
            if (s.setCode(o.code).setMoreMessage(o.message).end(), we.warn("".concat(t._className, ".modifyRemoteMessage failed. error:"), o), 20027 === o.code) {
              var n = t._onModifyRemoteMessageResp(e, o.data);
              return ja({
                code: na.MESSAGE_MODIFY_CONFLICT,
                message: aa.MESSAGE_MODIFY_CONFLICT,
                data: {
                  message: n
                }
              });
            }
            return ja({
              code: o.code,
              message: o.message,
              data: {
                message: e
              }
            });
          });
        }
      }, {
        key: "_onModifyRemoteMessageResp",
        value: function value(e, t) {
          we.debug("".concat(this._className, "._onModifyRemoteMessageResp options:"), t);
          var o = e.conversationType,
            n = e.from,
            a = e.to,
            s = e.random,
            r = e.sequence,
            i = e.time,
            c = t.elements,
            u = t.messageVersion,
            l = t.cloudCustomData,
            d = void 0 === l ? "" : l;
          return this.getModule(co).onMessageModified({
            conversationType: o,
            from: n,
            to: a,
            time: i,
            random: s,
            sequence: r,
            elements: c,
            cloudCustomData: d,
            messageVersion: u
          });
        }
      }, {
        key: "_generateUUID",
        value: function value() {
          var e = this.getModule(uo);
          return "".concat(e.getSDKAppID(), "-").concat(e.getUserID(), "-").concat(function () {
            for (var e = "", t = 32; t > 0; --t) {
              e += pt[Math.floor(Math.random() * gt)];
            }
            return e;
          }());
        }
      }, {
        key: "getMessageOption",
        value: function value(e) {
          return this._messageOptionsMap.get(e);
        }
      }, {
        key: "_getNickAndAvatarByUserID",
        value: function value(e) {
          return this.getModule(oo).getNickAndAvatarByUserID(e);
        }
      }, {
        key: "_getNameCardByGroupID",
        value: function value(e) {
          if (e.conversationType === D.CONV_GROUP) {
            var t = this.getModule(ao);
            if (t) return t.getMyNameCardByGroupID(e.to);
          }
          return "";
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._messageOptionsMap.clear();
        }
      }]), o;
    }(Do),
    nr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "PluginModule", a.plugins = {}, a;
      }
      return s(o, [{
        key: "registerPlugin",
        value: function value(e) {
          var t = this;
          Object.keys(e).forEach(function (o) {
            t.plugins[o] = e[o];
          }), new va(ya.REGISTER_PLUGIN).setMessage("key=".concat(Object.keys(e))).end();
        }
      }, {
        key: "getPlugin",
        value: function value(e) {
          return this.plugins[e];
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset"));
        }
      }]), o;
    }(Do),
    ar = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "SyncUnreadMessageModule", a._cookie = "", a._onlineSyncFlag = !1, a.getInnerEmitterInstance().on(Ja, a._onLoginSuccess, _(a)), a;
      }
      return s(o, [{
        key: "_onLoginSuccess",
        value: function value(e) {
          this._startSync({
            cookie: this._cookie,
            syncFlag: 0,
            isOnlineSync: 0
          });
        }
      }, {
        key: "_startSync",
        value: function value(e) {
          var t = this,
            o = e.cookie,
            n = e.syncFlag,
            a = e.isOnlineSync;
          we.log("".concat(this._className, "._startSync cookie:").concat(o, " syncFlag:").concat(n, " isOnlineSync:").concat(a)), this.request({
            protocolName: Lo,
            requestData: {
              cookie: o,
              syncFlag: n,
              isOnlineSync: a
            }
          }).then(function (e) {
            var o = e.data,
              n = o.cookie,
              a = o.syncFlag,
              s = o.eventArray,
              r = o.messageList,
              i = o.C2CRemainingUnreadList,
              c = o.C2CPairUnreadList;
            if (t._cookie = n, Vt(n)) ;else if (0 === a || 1 === a) {
              if (s) t.getModule(Mo).onMessage({
                head: {},
                body: {
                  eventArray: s,
                  isInstantMessage: t._onlineSyncFlag,
                  isSyncingEnded: !1
                }
              });
              t.getModule(no).onNewC2CMessage({
                dataList: r,
                isInstantMessage: !1,
                C2CRemainingUnreadList: i,
                C2CPairUnreadList: c
              }), t._startSync({
                cookie: n,
                syncFlag: a,
                isOnlineSync: 0
              });
            } else if (2 === a) {
              if (s) t.getModule(Mo).onMessage({
                head: {},
                body: {
                  eventArray: s,
                  isInstantMessage: t._onlineSyncFlag,
                  isSyncingEnded: !0
                }
              });
              t.getModule(no).onNewC2CMessage({
                dataList: r,
                isInstantMessage: t._onlineSyncFlag,
                C2CRemainingUnreadList: i,
                C2CPairUnreadList: c
              });
            }
          }).catch(function (e) {
            we.error("".concat(t._className, "._startSync failed. error:"), e);
          });
        }
      }, {
        key: "startOnlineSync",
        value: function value() {
          we.log("".concat(this._className, ".startOnlineSync")), this._onlineSyncFlag = !0, this._startSync({
            cookie: this._cookie,
            syncFlag: 0,
            isOnlineSync: 1
          });
        }
      }, {
        key: "startSyncOnReconnected",
        value: function value() {
          we.log("".concat(this._className, ".startSyncOnReconnected.")), this._onlineSyncFlag = !0, this._startSync({
            cookie: this._cookie,
            syncFlag: 0,
            isOnlineSync: 0
          });
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._onlineSyncFlag = !1, this._cookie = "";
        }
      }]), o;
    }(Do),
    sr = {
      request: {
        toAccount: "To_Account",
        fromAccount: "From_Account",
        to: "To_Account",
        from: "From_Account",
        groupID: "GroupId",
        groupAtUserID: "GroupAt_Account",
        extension: "Ext",
        data: "Data",
        description: "Desc",
        elements: "MsgBody",
        sizeType: "Type",
        downloadFlag: "Download_Flag",
        thumbUUID: "ThumbUUID",
        videoUUID: "VideoUUID",
        remoteAudioUrl: "Url",
        remoteVideoUrl: "VideoUrl",
        videoUrl: "",
        imageUrl: "URL",
        fileUrl: "Url",
        uuid: "UUID",
        priority: "MsgPriority",
        receiverUserID: "To_Account",
        receiverGroupID: "GroupId",
        messageSender: "SenderId",
        messageReceiver: "ReceiverId",
        nick: "From_AccountNick",
        avatar: "From_AccountHeadurl",
        messageNumber: "MsgNum",
        pbDownloadKey: "PbMsgKey",
        downloadKey: "JsonMsgKey",
        applicationType: "PendencyType",
        userIDList: "To_Account",
        groupNameList: "GroupName",
        userID: "To_Account",
        groupAttributeList: "GroupAttr",
        mainSequence: "AttrMainSeq",
        avChatRoomKey: "BytesKey",
        attributeControl: "AttrControl",
        sequence: "seq",
        messageControlInfo: "SendMsgControl",
        updateSequence: "UpdateSeq",
        clientTime: "MsgClientTime",
        sequenceList: "MsgSeqList",
        topicID: "TopicId",
        customData: "CustomString",
        isSupportTopic: "SupportTopic"
      },
      response: {
        MsgPriority: "priority",
        ThumbUUID: "thumbUUID",
        VideoUUID: "videoUUID",
        Download_Flag: "downloadFlag",
        GroupId: "groupID",
        Member_Account: "userID",
        MsgList: "messageList",
        SyncFlag: "syncFlag",
        To_Account: "to",
        From_Account: "from",
        MsgSeq: "sequence",
        MsgRandom: "random",
        MsgTime: "time",
        MsgTimeStamp: "time",
        MsgContent: "content",
        MsgBody: "elements",
        From_AccountNick: "nick",
        From_AccountHeadurl: "avatar",
        GroupWithdrawInfoArray: "revokedInfos",
        GroupReadInfoArray: "groupMessageReadNotice",
        LastReadMsgSeq: "lastMessageSeq",
        WithdrawC2cMsgNotify: "c2cMessageRevokedNotify",
        C2cWithdrawInfoArray: "revokedInfos",
        C2cReadedReceipt: "c2cMessageReadReceipt",
        ReadC2cMsgNotify: "c2cMessageReadNotice",
        LastReadTime: "peerReadTime",
        MsgRand: "random",
        MsgType: "type",
        MsgShow: "messageShow",
        NextMsgSeq: "nextMessageSeq",
        FaceUrl: "avatar",
        ProfileDataMod: "profileModify",
        Profile_Account: "userID",
        ValueBytes: "value",
        ValueNum: "value",
        NoticeSeq: "noticeSequence",
        NotifySeq: "notifySequence",
        MsgFrom_AccountExtraInfo: "messageFromAccountExtraInformation",
        Operator_Account: "operatorID",
        OpType: "operationType",
        ReportType: "operationType",
        UserId: "userID",
        User_Account: "userID",
        List_Account: "userIDList",
        MsgOperatorMemberExtraInfo: "operatorInfo",
        MsgMemberExtraInfo: "memberInfoList",
        ImageUrl: "avatar",
        NickName: "nick",
        MsgGroupNewInfo: "newGroupProfile",
        MsgAppDefinedData: "groupCustomField",
        Owner_Account: "ownerID",
        GroupFaceUrl: "avatar",
        GroupIntroduction: "introduction",
        GroupNotification: "notification",
        GroupApplyJoinOption: "joinOption",
        MsgKey: "messageKey",
        GroupInfo: "groupProfile",
        ShutupTime: "muteTime",
        Desc: "description",
        Ext: "extension",
        GroupAt_Account: "groupAtUserID",
        MsgNum: "messageNumber",
        PbMsgKey: "pbDownloadKey",
        JsonMsgKey: "downloadKey",
        MsgModifiedFlag: "isModified",
        PendencyItem: "applicationItem",
        PendencyType: "applicationType",
        AddTime: "time",
        AddSource: "source",
        AddWording: "wording",
        ProfileImImage: "avatar",
        PendencyAdd: "friendApplicationAdded",
        FrienPencydDel_Account: "friendApplicationDeletedUserIDList",
        Peer_Account: "userID",
        GroupAttr: "groupAttributeList",
        GroupAttrAry: "groupAttributeList",
        AttrMainSeq: "mainSequence",
        seq: "sequence",
        GroupAttrOption: "groupAttributeOption",
        BytesChangedKeys: "changedKeyList",
        GroupAttrInfo: "groupAttributeList",
        GroupAttrSeq: "mainSequence",
        PushChangedAttrValFlag: "hasChangedAttributeInfo",
        SubKeySeq: "sequence",
        Val: "value",
        MsgGroupFromCardName: "senderNameCard",
        MsgGroupFromNickName: "senderNick",
        C2cNick: "peerNick",
        C2cImage: "peerAvatar",
        SendMsgControl: "messageControlInfo",
        NoLastMsg: "excludedFromLastMessage",
        NoUnread: "excludedFromUnreadCount",
        UpdateSeq: "updateSequence",
        MuteNotifications: "muteFlag",
        MsgClientTime: "clientTime",
        TinyId: "tinyID",
        GroupMsgReceiptList: "readReceiptList",
        ReadNum: "readCount",
        UnreadNum: "unreadCount",
        TopicId: "topicID",
        MillionGroupFlag: "communityType",
        SupportTopic: "isSupportTopic",
        MsgTopicNewInfo: "newTopicInfo",
        ShutupAll: "muteAllMembers",
        CustomString: "customData",
        TopicFaceUrl: "avatar",
        TopicIntroduction: "introduction",
        TopicNotification: "notification",
        TopicIdArray: "topicIDList",
        MsgVersion: "messageVersion",
        C2cMsgModNotifys: "c2cMessageModified",
        GroupMsgModNotifys: "groupMessageModified"
      },
      ignoreKeyWord: ["C2C", "ID", "USP"]
    };
  function rr(e, t) {
    if ("string" != typeof e && !Array.isArray(e)) throw new TypeError("Expected the input to be `string | string[]`");
    t = Object.assign({
      pascalCase: !1
    }, t);
    var o;
    return 0 === (e = Array.isArray(e) ? e.map(function (e) {
      return e.trim();
    }).filter(function (e) {
      return e.length;
    }).join("-") : e.trim()).length ? "" : 1 === e.length ? t.pascalCase ? e.toUpperCase() : e.toLowerCase() : (e !== e.toLowerCase() && (e = ir(e)), e = e.replace(/^[_.\- ]+/, "").toLowerCase().replace(/[_.\- ]+(\w|$)/g, function (e, t) {
      return t.toUpperCase();
    }).replace(/\d+(\w|$)/g, function (e) {
      return e.toUpperCase();
    }), o = e, t.pascalCase ? o.charAt(0).toUpperCase() + o.slice(1) : o);
  }
  var ir = function ir(e) {
    for (var t = !1, o = !1, n = !1, a = 0; a < e.length; a++) {
      var s = e[a];
      t && /[a-zA-Z]/.test(s) && s.toUpperCase() === s ? (e = e.slice(0, a) + "-" + e.slice(a), t = !1, n = o, o = !0, a++) : o && n && /[a-zA-Z]/.test(s) && s.toLowerCase() === s ? (e = e.slice(0, a - 1) + "-" + e.slice(a - 1), n = o, o = !1, t = !0) : (t = s.toLowerCase() === s && s.toUpperCase() !== s, n = o, o = s.toUpperCase() === s && s.toLowerCase() !== s);
    }
    return e;
  };
  function cr(e, t) {
    var o = 0;
    return function e(t, n) {
      if (++o > 100) return o--, t;
      if (Qe(t)) {
        var a = t.map(function (t) {
          return Je(t) ? e(t, n) : t;
        });
        return o--, a;
      }
      if (Je(t)) {
        var s = (r = t, i = function i(e, t) {
          if (!st(t)) return !1;
          if ((a = t) !== rr(a)) for (var o = 0; o < sr.ignoreKeyWord.length && !t.includes(sr.ignoreKeyWord[o]); o++) {
            ;
          }
          var a;
          return Ze(n[t]) ? function (e) {
            return "OPPOChannelID" === e ? e : e[0].toUpperCase() + rr(e).slice(1);
          }(t) : n[t];
        }, c = Object.create(null), Object.keys(r).forEach(function (e) {
          var t = i(r[e], e);
          t && (c[t] = r[e]);
        }), c);
        return s = Nt(s, function (t, o) {
          return Qe(t) || Je(t) ? e(t, n) : t;
        }), o--, s;
      }
      var r, i, c;
    }(e, t);
  }
  function ur(e, t) {
    if (Qe(e)) return e.map(function (e) {
      return Je(e) ? ur(e, t) : e;
    });
    if (Je(e)) {
      var o = (n = e, a = function a(e, o) {
        return Ze(t[o]) ? rr(o) : t[o];
      }, s = {}, Object.keys(n).forEach(function (e) {
        s[a(n[e], e)] = n[e];
      }), s);
      return o = Nt(o, function (e) {
        return Qe(e) || Je(e) ? ur(e, t) : e;
      });
    }
    var n, a, s;
  }
  var lr = String.fromCharCode,
    dr = function dr(e) {
      var t = 0 | e.charCodeAt(0);
      if (55296 <= t) if (t < 56320) {
        var o = 0 | e.charCodeAt(1);
        if (56320 <= o && o <= 57343) {
          if ((t = (t << 10) + o - 56613888 | 0) > 65535) return lr(240 | t >>> 18, 128 | t >>> 12 & 63, 128 | t >>> 6 & 63, 128 | 63 & t);
        } else t = 65533;
      } else t <= 57343 && (t = 65533);
      return t <= 2047 ? lr(192 | t >>> 6, 128 | 63 & t) : lr(224 | t >>> 12, 128 | t >>> 6 & 63, 128 | 63 & t);
    },
    pr = function pr(e) {
      for (var t = void 0 === e ? "" : ("" + e).replace(/[\x80-\uD7ff\uDC00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]?/g, dr), o = 0 | t.length, n = new Uint8Array(o), a = 0; a < o; a = a + 1 | 0) {
        n[a] = 0 | t.charCodeAt(a);
      }
      return n;
    },
    gr = function gr(e) {
      for (var t = new Uint8Array(e), o = "", n = 0, a = t.length; n < a;) {
        var s = t[n],
          r = 0,
          i = 0;
        if (s <= 127 ? (r = 0, i = 255 & s) : s <= 223 ? (r = 1, i = 31 & s) : s <= 239 ? (r = 2, i = 15 & s) : s <= 244 && (r = 3, i = 7 & s), a - n - r > 0) for (var c = 0; c < r;) {
          i = i << 6 | 63 & (s = t[n + c + 1]), c += 1;
        } else i = 65533, r = a - n;
        o += String.fromCodePoint(i), n += r + 1;
      }
      return o;
    },
    _r = function () {
      function e(t) {
        n(this, e), this._handler = t;
        var o = t.getURL();
        if (this._socket = null, this._workerSocket = null, this._id = dt(), this._handler.getIsWorkerEnabled()) {
          var a = URL.createObjectURL(new Blob([';let _socket = null;onmessage = function(event) {  if (event.data.cmd === "start") {    const url = event.data.url;    _socket = new WebSocket(url);    _socket.binaryType = "arraybuffer";    _socket.onopen = function() {      postMessage({ callback: "onOpen" });    };    _socket.onclose = function(e) {      postMessage({ callback: "onOpen", e: { code: e.code, reason: e.reason } });    };    _socket.onmessage = function(e) {      postMessage({ callback: "onMessage", data: e.data });    };    _socket.onerror = function(e) {      postMessage({ callback: "onError", e: { isTrusted: "true" } });    };  } else if (event.data.cmd === "sendMessage") {    if (_socket !== null) {      _socket.send(event.data.data);    }  } else if (event.data.cmd === "stop") {    if (_socket !== null) {      _socket.close(event.data.code);      _socket = null;    }  }};'], {
            type: "application/javascript; charset=utf-8"
          }));
          this._workerSocket = new Worker(a);
          var s = this;
          this._workerSocket.onmessage = function (e) {
            var t = e.data,
              o = t.callback,
              n = t.e;
            "onOpen" === o ? s._onOpen() : "onClose" === o ? s._onClose(n) : "onError" === o ? s._onError(n) : "onMessage" === o && s._onMessage(e.data);
          }, this._workerSocket.postMessage({
            cmd: "start",
            id: this._id,
            url: o
          });
        } else te ? Q ? (ne.connectSocket({
          url: o,
          header: {
            "content-type": "application/json"
          }
        }), ne.onSocketClose(this._onClose.bind(this)), ne.onSocketOpen(this._onOpen.bind(this)), ne.onSocketMessage(this._onMessage.bind(this)), ne.onSocketError(this._onError.bind(this))) : (this._socket = ne.connectSocket({
          url: o,
          header: {
            "content-type": "application/json"
          },
          complete: function complete() {}
        }), this._socket.onClose(this._onClose.bind(this)), this._socket.onOpen(this._onOpen.bind(this)), this._socket.onMessage(this._onMessage.bind(this)), this._socket.onError(this._onError.bind(this))) : oe && (this._socket = new WebSocket(o), this._socket.binaryType = "arraybuffer", this._socket.onopen = this._onOpen.bind(this), this._socket.onmessage = this._onMessage.bind(this), this._socket.onclose = this._onClose.bind(this), this._socket.onerror = this._onError.bind(this));
        this._canIUseBinaryFrame = t.canIUseBinaryFrame();
      }
      return s(e, [{
        key: "getID",
        value: function value() {
          return this._id;
        }
      }, {
        key: "_onOpen",
        value: function value() {
          this._handler.onOpen({
            id: this._id
          });
        }
      }, {
        key: "_onClose",
        value: function value(e) {
          this._handler.onClose({
            id: this._id,
            e: e
          });
        }
      }, {
        key: "_onMessage",
        value: function value(e) {
          this._handler.onMessage({
            data: this._canIUseBinaryFrame ? gr(e.data) : e.data
          });
        }
      }, {
        key: "_onError",
        value: function value(e) {
          this._handler.onError({
            id: this._id,
            e: e
          });
        }
      }, {
        key: "setIsWorkerEnabled",
        value: function value(e) {
          this._isWorkerEnabled = !0;
        }
      }, {
        key: "close",
        value: function value(e) {
          if (this._workerSocket && (this._workerSocket.postMessage({
            cmd: "stop",
            code: e
          }), this._workerSocket.terminate(), this._workerSocket = null), Q) return ne.offSocketClose(), ne.offSocketMessage(), ne.offSocketOpen(), ne.offSocketError(), void ne.closeSocket();
          this._socket && (te ? (this._socket.onClose(function () {}), this._socket.onOpen(function () {}), this._socket.onMessage(function () {}), this._socket.onError(function () {})) : oe && (this._socket.onopen = null, this._socket.onmessage = null, this._socket.onclose = null, this._socket.onerror = null), X ? this._socket.close({
            code: e
          }) : this._socket.close(e), this._socket = null);
        }
      }, {
        key: "send",
        value: function value(e) {
          if (this._workerSocket) this._workerSocket.postMessage({
            cmd: "sendMessage",
            data: this._canIUseBinaryFrame ? pr(e.data).buffer : e.data
          });else {
            if (Q) return void ne.sendSocketMessage({
              data: e.data,
              fail: function fail() {
                e.fail && e.requestID && e.fail(e.requestID);
              }
            });
            this._socket && (te ? this._socket.send({
              data: this._canIUseBinaryFrame ? pr(e.data).buffer : e.data,
              fail: function fail() {
                e.fail && e.requestID && e.fail(e.requestID);
              }
            }) : oe && this._socket.send(this._canIUseBinaryFrame ? pr(e.data).buffer : e.data));
          }
        }
      }]), e;
    }(),
    hr = 4e3,
    fr = 4001,
    mr = ["keyMap"],
    Mr = ["keyMap"],
    vr = "connected",
    yr = "connecting",
    Ir = "disconnected",
    Er = function () {
      function e(t) {
        n(this, e), this._channelModule = t, this._className = "SocketHandler", this._promiseMap = new Map(), this._readyState = Ir, this._simpleRequestMap = new Map(), this.MAX_SIZE = 100, this._startSequence = dt(), this._startTs = 0, this._reConnectFlag = !1, this._nextPingTs = 0, this._reConnectCount = 0, this.MAX_RECONNECT_COUNT = 3, this._socketID = -1, this._random = 0, this._socket = null, this._url = "", this._onOpenTs = 0, this._canIUseBinaryFrame = !0, this._isWorkerEnabled = !0, this._setWebsocketHost(), this._initConnection();
      }
      return s(e, [{
        key: "_setWebsocketHost",
        value: function value() {
          var e = this._channelModule.getModule(uo),
            t = w;
          this._channelModule.isOversea() && (t = b), e.isSingaporeSite() ? t = F : e.isKoreaSite() ? t = q : e.isGermanySite() ? t = V : e.isIndiaSite() && (t = K), H.HOST.setCurrent(t);
        }
      }, {
        key: "_initConnection",
        value: function value() {
          Ze(H.HOST.CURRENT.BACKUP) || "" === this._url ? this._url = H.HOST.CURRENT.DEFAULT : this._url === H.HOST.CURRENT.DEFAULT ? this._url = H.HOST.CURRENT.BACKUP : this._url === H.HOST.CURRENT.BACKUP && (this._url = H.HOST.CURRENT.DEFAULT);
          var e = this._channelModule.getModule(uo).getProxyServer();
          Vt(e) || (this._url = e), this._connect(), this._nextPingTs = 0;
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          e % 1 == 0 && this._checkPromiseMap();
        }
      }, {
        key: "_checkPromiseMap",
        value: function value() {
          var e = this;
          0 !== this._promiseMap.size && this._promiseMap.forEach(function (t, o) {
            var n = t.reject,
              a = t.timestamp,
              s = 15e3;
            -1 !== o.indexOf(No) && (s = 9e4), Date.now() - a >= s && (we.log("".concat(e._className, "._checkPromiseMap request timeout, delete requestID:").concat(o)), e._promiseMap.delete(o), n(new Ba({
              code: na.NETWORK_TIMEOUT,
              message: aa.NETWORK_TIMEOUT
            })), e._channelModule.onRequestTimeout(o));
          });
        }
      }, {
        key: "onOpen",
        value: function value(e) {
          if ("" !== this._readyState) {
            this._onOpenTs = Date.now();
            var t = e.id;
            this._socketID = t;
            var o = Date.now() - this._startTs;
            we.log("".concat(this._className, "._onOpen cost ").concat(o, " ms. socketID:").concat(t)), new va(ya.WS_ON_OPEN).setMessage(o).setCostTime(o).setMoreMessage("socketID:".concat(t)).end(), e.id === this._socketID && (this._readyState = vr, this._reConnectCount = 0, this._resend(), !0 === this._reConnectFlag && (this._channelModule.onReconnected(), this._reConnectFlag = !1), this._channelModule.onOpen());
          }
        }
      }, {
        key: "onClose",
        value: function value(e) {
          var t = new va(ya.WS_ON_CLOSE),
            o = e.id,
            n = e.e,
            a = "sourceSocketID:".concat(o, " currentSocketID:").concat(this._socketID, " code:").concat(n.code, " reason:").concat(n.reason),
            s = 0;
          0 !== this._onOpenTs && (s = Date.now() - this._onOpenTs), t.setMessage(s).setCostTime(s).setMoreMessage(a).setCode(n.code).end(), we.log("".concat(this._className, "._onClose ").concat(a, " onlineTime:").concat(s)), o === this._socketID && (this._readyState = Ir, s < 1e3 ? this._channelModule.onReconnectFailed() : this._channelModule.onClose());
        }
      }, {
        key: "onError",
        value: function value(e) {
          var t = e.id,
            o = e.e,
            n = "sourceSocketID:".concat(t, " currentSocketID:").concat(this._socketID);
          new va(ya.WS_ON_ERROR).setMessage(o.errMsg || ut(o)).setMoreMessage(n).setLevel("error").end(), we.warn("".concat(this._className, "._onError"), o, n), t === this._socketID && (this._readyState = "", this._channelModule.onError());
        }
      }, {
        key: "onMessage",
        value: function value(e) {
          var t;
          try {
            t = JSON.parse(e.data);
          } catch (u) {
            new va(ya.JSON_PARSE_ERROR).setMessage(e.data).end();
          }
          if (t && t.head) {
            var o = this._getRequestIDFromHead(t.head),
              n = Gt(t.head),
              a = ur(t.body, this._getResponseKeyMap(n));
            if (we.debug("".concat(this._className, ".onMessage ret:").concat(JSON.stringify(a), " requestID:").concat(o, " has:").concat(this._promiseMap.has(o))), this._setNextPingTs(), this._promiseMap.has(o)) {
              var s = this._promiseMap.get(o),
                r = s.resolve,
                i = s.reject,
                c = s.timestamp;
              return this._promiseMap.delete(o), this._calcRTT(c), void (a.errorCode && 0 !== a.errorCode ? (this._channelModule.onErrorCodeNotZero(a), i(new Ba({
                code: a.errorCode,
                message: a.errorInfo || "",
                data: {
                  elements: a.elements,
                  messageVersion: a.messageVersion,
                  cloudCustomData: a.cloudCustomData
                }
              }))) : r(ba(a)));
            }
            this._channelModule.onMessage({
              head: t.head,
              body: a
            });
          }
        }
      }, {
        key: "_calcRTT",
        value: function value(e) {
          var t = Date.now() - e;
          this._channelModule.getModule(Co).addRTT(t);
        }
      }, {
        key: "_connect",
        value: function value() {
          this._startTs = Date.now(), this._onOpenTs = 0, this._socket = new _r(this), this._socketID = this._socket.getID(), this._readyState = yr, we.log("".concat(this._className, "._connect isWorkerEnabled:").concat(this.getIsWorkerEnabled(), " socketID:").concat(this._socketID, " url:").concat(this.getURL())), new va(ya.WS_CONNECT).setMessage("socketID:".concat(this._socketID, " url:").concat(this.getURL())).end();
        }
      }, {
        key: "getURL",
        value: function value() {
          var e = this._channelModule.getModule(uo);
          e.isDevMode() && (this._canIUseBinaryFrame = !1);
          var t = Rt();
          (Q || $ && "windows" === t || Z) && (this._canIUseBinaryFrame = !1);
          var o = -1;
          "ios" === t ? o = de || -1 : "android" === t && (o = ge || -1);
          var n = this._channelModule.getPlatform(),
            a = e.getSDKAppID(),
            s = e.getInstanceID();
          return this._canIUseBinaryFrame ? "".concat(this._url, "/binfo?sdkappid=").concat(a, "&instanceid=").concat(s, "&random=").concat(this._getRandom(), "&platform=").concat(n, "&host=").concat(t, "&version=").concat(o) : "".concat(this._url, "/info?sdkappid=").concat(a, "&instanceid=").concat(s, "&random=").concat(this._getRandom(), "&platform=").concat(n, "&host=").concat(t, "&version=").concat(o);
        }
      }, {
        key: "_closeConnection",
        value: function value(e) {
          we.log("".concat(this._className, "._closeConnection socketID:").concat(this._socketID)), this._socket && (this._socket.close(e), this._socketID = -1, this._socket = null, this._readyState = Ir);
        }
      }, {
        key: "_resend",
        value: function value() {
          var e = this;
          if (we.log("".concat(this._className, "._resend reConnectFlag:").concat(this._reConnectFlag), "promiseMap.size:".concat(this._promiseMap.size, " simpleRequestMap.size:").concat(this._simpleRequestMap.size)), this._promiseMap.size > 0 && this._promiseMap.forEach(function (t, o) {
            var n = t.uplinkData,
              a = t.resolve,
              s = t.reject;
            e._promiseMap.set(o, {
              resolve: a,
              reject: s,
              timestamp: Date.now(),
              uplinkData: n
            }), e._execute(o, n);
          }), this._simpleRequestMap.size > 0) {
            var t,
              o = C(this._simpleRequestMap);
            try {
              for (o.s(); !(t = o.n()).done;) {
                var n = m(t.value, 2),
                  a = n[0],
                  s = n[1];
                this._execute(a, s);
              }
            } catch (r) {
              o.e(r);
            } finally {
              o.f();
            }
            this._simpleRequestMap.clear();
          }
        }
      }, {
        key: "send",
        value: function value(e) {
          var t = this;
          e.head.seq = this._getSequence(), e.head.reqtime = Math.floor(Date.now() / 1e3);
          e.keyMap;
          var o = g(e, mr),
            n = this._getRequestIDFromHead(e.head),
            a = JSON.stringify(o);
          return new Promise(function (e, s) {
            (t._promiseMap.set(n, {
              resolve: e,
              reject: s,
              timestamp: Date.now(),
              uplinkData: a
            }), we.debug("".concat(t._className, ".send uplinkData:").concat(JSON.stringify(o), " requestID:").concat(n, " readyState:").concat(t._readyState)), t._readyState !== vr) ? t._reConnect() : (t._execute(n, a), t._channelModule.getModule(Co).addRequestCount());
          });
        }
      }, {
        key: "simplySend",
        value: function value(e) {
          e.head.seq = this._getSequence(), e.head.reqtime = Math.floor(Date.now() / 1e3);
          e.keyMap;
          var t = g(e, Mr),
            o = this._getRequestIDFromHead(e.head),
            n = JSON.stringify(t);
          this._readyState !== vr ? (this._simpleRequestMap.size < this.MAX_SIZE ? this._simpleRequestMap.set(o, n) : we.log("".concat(this._className, ".simplySend. simpleRequestMap is full, drop request!")), this._reConnect()) : this._execute(o, n);
        }
      }, {
        key: "_execute",
        value: function value(e, t) {
          this._socket.send({
            data: t,
            fail: te ? this._onSendFail.bind(this) : void 0,
            requestID: e
          });
        }
      }, {
        key: "_onSendFail",
        value: function value(e) {
          we.log("".concat(this._className, "._onSendFail requestID:").concat(e));
        }
      }, {
        key: "_getSequence",
        value: function value() {
          var e;
          if (this._startSequence < 2415919103) return e = this._startSequence, this._startSequence += 1, 2415919103 === this._startSequence && (this._startSequence = dt()), e;
        }
      }, {
        key: "_getRequestIDFromHead",
        value: function value(e) {
          return e.servcmd + e.seq;
        }
      }, {
        key: "_getResponseKeyMap",
        value: function value(e) {
          var o = this._channelModule.getKeyMap(e);
          return t(t({}, sr.response), o.response);
        }
      }, {
        key: "_reConnect",
        value: function value() {
          this._readyState !== vr && this._readyState !== yr && this.forcedReconnect();
        }
      }, {
        key: "forcedReconnect",
        value: function value() {
          var e = this;
          we.log("".concat(this._className, ".forcedReconnect count:").concat(this._reConnectCount, " readyState:").concat(this._readyState)), this._reConnectFlag = !0, this._resetRandom(), this._reConnectCount < this.MAX_RECONNECT_COUNT ? (this._reConnectCount += 1, this._closeConnection(fr), this._initConnection()) : (this._reConnectCount = 0, this._channelModule.probeNetwork().then(function (t) {
            var o = m(t, 2),
              n = o[0];
            o[1];
            n ? (we.warn("".concat(e._className, ".forcedReconnect disconnected from wsserver but network is ok, continue...")), e._closeConnection(fr), e._initConnection()) : e._channelModule.onReconnectFailed();
          }));
        }
      }, {
        key: "getReconnectFlag",
        value: function value() {
          return this._reConnectFlag;
        }
      }, {
        key: "_setNextPingTs",
        value: function value() {
          this._nextPingTs = Date.now() + 1e4;
        }
      }, {
        key: "getNextPingTs",
        value: function value() {
          return this._nextPingTs;
        }
      }, {
        key: "isConnected",
        value: function value() {
          return this._readyState === vr;
        }
      }, {
        key: "canIUseBinaryFrame",
        value: function value() {
          return this._canIUseBinaryFrame;
        }
      }, {
        key: "setIsWorkerEnabled",
        value: function value(e) {
          we.log("".concat(this._className, ".setIsWorkerEnabled flag:").concat(e)), this._isWorkerEnabled = e;
        }
      }, {
        key: "getIsWorkerEnabled",
        value: function value() {
          return this._isWorkerEnabled && Ee;
        }
      }, {
        key: "_getRandom",
        value: function value() {
          return 0 === this._random && (this._random = Math.random()), this._random;
        }
      }, {
        key: "_resetRandom",
        value: function value() {
          this._random = 0;
        }
      }, {
        key: "close",
        value: function value() {
          we.log("".concat(this._className, ".close")), this._closeConnection(hr), this._promiseMap.clear(), this._startSequence = dt(), this._readyState = Ir, this._simpleRequestMap.clear(), this._reConnectFlag = !1, this._reConnectCount = 0, this._onOpenTs = 0, this._url = "", this._random = 0, this._canIUseBinaryFrame = !0, this._isWorkerEnabled = !0;
        }
      }]), e;
    }(),
    Tr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        if (n(this, o), (a = t.call(this, e))._className = "ChannelModule", a._socketHandler = new Er(_(a)), a._probing = !1, a._isAppShowing = !0, a._previousState = D.NET_STATE_CONNECTED, te && "function" == typeof ne.onAppShow && "function" == typeof ne.onAppHide) {
          var s = a._onAppHide.bind(_(a)),
            r = a._onAppShow.bind(_(a));
          "function" == typeof ne.offAppHide && ne.offAppHide(s), "function" == typeof ne.offAppShow && ne.offAppShow(r), ne.onAppHide(s), ne.onAppShow(r);
        }
        return a._timerForNotLoggedIn = -1, a._timerForNotLoggedIn = setInterval(a.onCheckTimer.bind(_(a)), 1e3), a._fatalErrorFlag = !1, a;
      }
      return s(o, [{
        key: "onCheckTimer",
        value: function value(e) {
          this._socketHandler && (this.isLoggedIn() ? (this._timerForNotLoggedIn > 0 && (clearInterval(this._timerForNotLoggedIn), this._timerForNotLoggedIn = -1), this._socketHandler.onCheckTimer(e)) : this._socketHandler.onCheckTimer(1), this._checkNextPing());
        }
      }, {
        key: "onErrorCodeNotZero",
        value: function value(e) {
          this.getModule(Mo).onErrorCodeNotZero(e);
        }
      }, {
        key: "onMessage",
        value: function value(e) {
          this.getModule(Mo).onMessage(e);
        }
      }, {
        key: "send",
        value: function value(e) {
          return this._socketHandler ? this._previousState !== D.NET_STATE_CONNECTED && e.head.servcmd.includes(Vn) ? (this.reConnect(), this._sendLogViaHTTP(e)) : this._socketHandler.send(e) : Promise.reject();
        }
      }, {
        key: "_sendLogViaHTTP",
        value: function value(e) {
          var t = H.HOST.CURRENT.STAT;
          return new Promise(function (o, n) {
            var a = "".concat(t, "/v4/imopenstat/tim_web_report_v2?sdkappid=").concat(e.head.sdkappid, "&reqtime=").concat(Date.now()),
              s = JSON.stringify(e.body),
              r = "application/x-www-form-urlencoded;charset=UTF-8";
            if (te) ne.request({
              url: a,
              data: s,
              method: "POST",
              timeout: 3e3,
              header: {
                "content-type": r
              },
              success: function success() {
                o();
              },
              fail: function fail() {
                n(new Ba({
                  code: na.NETWORK_ERROR,
                  message: aa.NETWORK_ERROR
                }));
              }
            });else {
              var i = new XMLHttpRequest(),
                c = setTimeout(function () {
                  i.abort(), n(new Ba({
                    code: na.NETWORK_TIMEOUT,
                    message: aa.NETWORK_TIMEOUT
                  }));
                }, 3e3);
              i.onreadystatechange = function () {
                4 === i.readyState && (clearTimeout(c), 200 === i.status || 304 === i.status ? o() : n(new Ba({
                  code: na.NETWORK_ERROR,
                  message: aa.NETWORK_ERROR
                })));
              }, i.open("POST", a, !0), i.setRequestHeader("Content-type", r), i.send(s);
            }
          });
        }
      }, {
        key: "simplySend",
        value: function value(e) {
          return this._socketHandler ? this._socketHandler.simplySend(e) : Promise.reject();
        }
      }, {
        key: "onOpen",
        value: function value() {
          this._ping();
        }
      }, {
        key: "onClose",
        value: function value() {
          this._socketHandler && this._socketHandler.getReconnectFlag() && this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
          this.reConnect();
        }
      }, {
        key: "onError",
        value: function value() {
          te && !Z && we.error("".concat(this._className, ".onError 从v2.11.2起，SDK 支持了 WebSocket，如您未添加相关受信域名，请先添加！(如已添加请忽略)，升级指引: https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-02-upgradeguideline.html")), this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
        }
      }, {
        key: "getKeyMap",
        value: function value(e) {
          return this.getModule(Mo).getKeyMap(e);
        }
      }, {
        key: "_onAppHide",
        value: function value() {
          this._isAppShowing = !1;
        }
      }, {
        key: "_onAppShow",
        value: function value() {
          this._isAppShowing = !0;
        }
      }, {
        key: "onRequestTimeout",
        value: function value(e) {}
      }, {
        key: "onReconnected",
        value: function value() {
          we.log("".concat(this._className, ".onReconnected")), this.getModule(Mo).onReconnected(), this._emitNetStateChangeEvent(D.NET_STATE_CONNECTED);
        }
      }, {
        key: "onReconnectFailed",
        value: function value() {
          we.log("".concat(this._className, ".onReconnectFailed")), this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
        }
      }, {
        key: "setIsWorkerEnabled",
        value: function value(e) {
          this._socketHandler && this._socketHandler.setIsWorkerEnabled(!1);
        }
      }, {
        key: "offline",
        value: function value() {
          this._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
        }
      }, {
        key: "reConnect",
        value: function value() {
          var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
            t = !1;
          this._socketHandler && (t = this._socketHandler.getReconnectFlag());
          var o = "forcedFlag:".concat(e, " fatalErrorFlag:").concat(this._fatalErrorFlag, " previousState:").concat(this._previousState, " reconnectFlag:").concat(t);
          if (we.log("".concat(this._className, ".reConnect ").concat(o)), !this._fatalErrorFlag && this._socketHandler) {
            if (!0 === e) this._socketHandler.forcedReconnect();else {
              if (this._previousState === D.NET_STATE_CONNECTING && t) return;
              this._socketHandler.forcedReconnect();
            }
            this._emitNetStateChangeEvent(D.NET_STATE_CONNECTING);
          }
        }
      }, {
        key: "_emitNetStateChangeEvent",
        value: function value(e) {
          this._previousState !== e && (we.log("".concat(this._className, "._emitNetStateChangeEvent from ").concat(this._previousState, " to ").concat(e)), this._previousState = e, this.emitOuterEvent(S.NET_STATE_CHANGE, {
            state: e
          }));
        }
      }, {
        key: "_ping",
        value: function value() {
          var e = this;
          if (!0 !== this._probing) {
            this._probing = !0;
            var t = this.getModule(Mo).getProtocolData({
              protocolName: Kn
            });
            this.send(t).then(function () {
              e._probing = !1;
            }).catch(function (t) {
              if (we.warn("".concat(e._className, "._ping failed. error:"), t), e._probing = !1, t && 60002 === t.code) return new va(ya.ERROR).setMessage("code:".concat(t.code, " message:").concat(t.message)).setNetworkType(e.getModule(go).getNetworkType()).end(), e._fatalErrorFlag = !0, void e._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
              e.probeNetwork().then(function (t) {
                var o = m(t, 2),
                  n = o[0],
                  a = o[1];
                we.log("".concat(e._className, "._ping failed. probe network, isAppShowing:").concat(e._isAppShowing, " online:").concat(n, " networkType:").concat(a)), n ? e.reConnect() : e._emitNetStateChangeEvent(D.NET_STATE_DISCONNECTED);
              });
            });
          }
        }
      }, {
        key: "_checkNextPing",
        value: function value() {
          this._socketHandler && this._socketHandler.isConnected() && Date.now() >= this._socketHandler.getNextPingTs() && this._ping();
        }
      }, {
        key: "dealloc",
        value: function value() {
          this._socketHandler && (this._socketHandler.close(), this._socketHandler = null), this._timerForNotLoggedIn > -1 && clearInterval(this._timerForNotLoggedIn);
        }
      }, {
        key: "onRestApiKickedOut",
        value: function value() {
          this._socketHandler && (this._socketHandler.close(), this.reConnect(!0));
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._previousState = D.NET_STATE_CONNECTED, this._probing = !1, this._fatalErrorFlag = !1, this._timerForNotLoggedIn = setInterval(this.onCheckTimer.bind(this), 1e3);
        }
      }]), o;
    }(Do),
    Cr = ["a2", "tinyid"],
    Sr = ["a2", "tinyid"],
    Dr = function () {
      function e(t) {
        n(this, e), this._className = "ProtocolHandler", this._sessionModule = t, this._configMap = new Map(), this._fillConfigMap();
      }
      return s(e, [{
        key: "_fillConfigMap",
        value: function value() {
          this._configMap.clear();
          var e = this._sessionModule.genCommonHead(),
            o = this._sessionModule.genCosSpecifiedHead(),
            n = this._sessionModule.genSSOReportHead();
          this._configMap.set(No, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_STATUS, ".").concat(H.CMD.LOGIN)
              }),
              body: {
                state: "Online"
              },
              keyMap: {
                response: {
                  InstId: "instanceID",
                  HelloInterval: "helloInterval"
                }
              }
            };
          }(e)), this._configMap.set(Ao, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_STATUS, ".").concat(H.CMD.LOGOUT)
              }),
              body: {
                type: 0
              },
              keyMap: {
                request: {
                  type: "wslogout_type"
                }
              }
            };
          }(e)), this._configMap.set(Oo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_STATUS, ".").concat(H.CMD.HELLO)
              }),
              body: {},
              keyMap: {
                response: {
                  NewInstInfo: "newInstanceInfo"
                }
              }
            };
          }(e)), this._configMap.set(Ro, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.STAT_SERVICE, ".").concat(H.CMD.KICK_OTHER)
              }),
              body: {}
            };
          }(e)), this._configMap.set(bn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_COS_SIGN, ".").concat(H.CMD.COS_SIGN)
              }),
              body: {
                cmd: "open_im_cos_svc",
                subCmd: "get_cos_token",
                duration: 300,
                version: 2
              },
              keyMap: {
                request: {
                  userSig: "usersig",
                  subCmd: "sub_cmd",
                  cmd: "cmd",
                  duration: "duration",
                  version: "version"
                },
                response: {
                  expired_time: "expiredTime",
                  bucket_name: "bucketName",
                  session_token: "sessionToken",
                  tmp_secret_id: "secretId",
                  tmp_secret_key: "secretKey"
                }
              }
            };
          }(o)), this._configMap.set(Fn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.CUSTOM_UPLOAD, ".").concat(H.CMD.COS_PRE_SIG)
              }),
              body: {
                fileType: void 0,
                fileName: void 0,
                uploadMethod: 0,
                duration: 900
              },
              keyMap: {
                request: {
                  userSig: "usersig",
                  fileType: "file_type",
                  fileName: "file_name",
                  uploadMethod: "upload_method"
                },
                response: {
                  expired_time: "expiredTime",
                  request_id: "requestId",
                  head_url: "headUrl",
                  upload_url: "uploadUrl",
                  download_url: "downloadUrl",
                  ci_url: "ciUrl",
                  snapshot_url: "requestSnapshotUrl"
                }
              }
            };
          }(o)), this._configMap.set(qn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.CUSTOM_UPLOAD, ".").concat(H.CMD.VIDEO_COVER)
              }),
              body: {
                version: 1,
                platform: void 0,
                coverName: void 0,
                requestSnapshotUrl: void 0
              },
              keyMap: {
                request: {
                  version: "version",
                  platform: "platform",
                  coverName: "cover_name",
                  requestSnapshotUrl: "snapshot_url"
                },
                response: {
                  error_code: "errorCode",
                  error_msg: "errorInfo",
                  download_url: "snapshotUrl"
                }
              }
            };
          }(o)), this._configMap.set(Jn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_CONFIG_MANAGER, ".").concat(H.CMD.FETCH_COMMERCIAL_CONFIG)
              }),
              body: {
                SDKAppID: 0
              },
              keyMap: {
                request: {
                  SDKAppID: "uint32_sdkappid"
                },
                response: {
                  int32_error_code: "errorCode",
                  str_error_message: "errorMessage",
                  str_purchase_bits: "purchaseBits",
                  uint32_expired_time: "expiredTime"
                }
              }
            };
          }(e)), this._configMap.set(Xn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_CONFIG_MANAGER, ".").concat(H.CMD.PUSHED_COMMERCIAL_CONFIG)
              }),
              body: {},
              keyMap: {
                response: {
                  int32_error_code: "errorCode",
                  str_error_message: "errorMessage",
                  str_purchase_bits: "purchaseBits",
                  uint32_expired_time: "expiredTime"
                }
              }
            };
          }(e)), this._configMap.set($n, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_CONFIG_MANAGER, ".").concat(H.CMD.FETCH_CLOUD_CONTROL_CONFIG)
              }),
              body: {
                SDKAppID: 0,
                version: 0
              },
              keyMap: {
                request: {
                  SDKAppID: "uint32_sdkappid",
                  version: "uint64_version"
                },
                response: {
                  int32_error_code: "errorCode",
                  str_error_message: "errorMessage",
                  str_json_config: "cloudControlConfig",
                  uint32_expired_time: "expiredTime",
                  uint32_sdkappid: "SDKAppID",
                  uint64_version: "version"
                }
              }
            };
          }(e)), this._configMap.set(zn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_CONFIG_MANAGER, ".").concat(H.CMD.PUSHED_CLOUD_CONTROL_CONFIG)
              }),
              body: {},
              keyMap: {
                response: {
                  int32_error_code: "errorCode",
                  str_error_message: "errorMessage",
                  str_json_config: "cloudControlConfig",
                  uint32_expired_time: "expiredTime",
                  uint32_sdkappid: "SDKAppID",
                  uint64_version: "version"
                }
              }
            };
          }(e)), this._configMap.set(Qn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OVERLOAD_PUSH, ".").concat(H.CMD.OVERLOAD_NOTIFY)
              }),
              body: {},
              keyMap: {
                response: {
                  OverLoadServCmd: "overloadCommand",
                  DelaySecs: "waitingTime"
                }
              }
            };
          }(e)), this._configMap.set(Lo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.GET_MESSAGES)
              }),
              body: {
                cookie: "",
                syncFlag: 0,
                needAbstract: 1,
                isOnlineSync: 0
              },
              keyMap: {
                request: {
                  fromAccount: "From_Account",
                  toAccount: "To_Account",
                  from: "From_Account",
                  to: "To_Account",
                  time: "MsgTimeStamp",
                  sequence: "MsgSeq",
                  random: "MsgRandom",
                  elements: "MsgBody"
                },
                response: {
                  MsgList: "messageList",
                  SyncFlag: "syncFlag",
                  To_Account: "to",
                  From_Account: "from",
                  ClientSeq: "clientSequence",
                  MsgSeq: "sequence",
                  NoticeSeq: "noticeSequence",
                  NotifySeq: "notifySequence",
                  MsgRandom: "random",
                  MsgTimeStamp: "time",
                  MsgContent: "content",
                  ToGroupId: "groupID",
                  MsgKey: "messageKey",
                  GroupTips: "groupTips",
                  MsgBody: "elements",
                  MsgType: "type",
                  C2CRemainingUnreadCount: "C2CRemainingUnreadList",
                  C2CPairUnreadCount: "C2CPairUnreadList"
                }
              }
            };
          }(e)), this._configMap.set(ko, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.BIG_DATA_HALLWAY_AUTH_KEY)
              }),
              body: {}
            };
          }(e)), this._configMap.set(Go, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.SEND_MESSAGE)
              }),
              body: {
                fromAccount: "",
                toAccount: "",
                msgSeq: 0,
                msgRandom: 0,
                msgBody: [],
                cloudCustomData: void 0,
                nick: "",
                avatar: "",
                msgLifeTime: void 0,
                offlinePushInfo: {
                  pushFlag: 0,
                  title: "",
                  desc: "",
                  ext: "",
                  apnsInfo: {
                    badgeMode: 0
                  },
                  androidInfo: {
                    OPPOChannelID: ""
                  }
                },
                messageControlInfo: void 0,
                clientTime: void 0,
                needReadReceipt: 0
              },
              keyMap: {
                request: {
                  fromAccount: "From_Account",
                  toAccount: "To_Account",
                  msgTimeStamp: "MsgTimeStamp",
                  msgSeq: "MsgSeq",
                  msgRandom: "MsgRandom",
                  msgBody: "MsgBody",
                  count: "MaxCnt",
                  lastMessageTime: "LastMsgTime",
                  messageKey: "MsgKey",
                  peerAccount: "Peer_Account",
                  data: "Data",
                  description: "Desc",
                  extension: "Ext",
                  type: "MsgType",
                  content: "MsgContent",
                  sizeType: "Type",
                  uuid: "UUID",
                  url: "",
                  imageUrl: "URL",
                  fileUrl: "Url",
                  remoteAudioUrl: "Url",
                  remoteVideoUrl: "VideoUrl",
                  thumbUUID: "ThumbUUID",
                  videoUUID: "VideoUUID",
                  videoUrl: "",
                  downloadFlag: "Download_Flag",
                  nick: "From_AccountNick",
                  avatar: "From_AccountHeadurl",
                  from: "From_Account",
                  time: "MsgTimeStamp",
                  messageRandom: "MsgRandom",
                  messageSequence: "MsgSeq",
                  elements: "MsgBody",
                  clientSequence: "ClientSeq",
                  payload: "MsgContent",
                  messageList: "MsgList",
                  messageNumber: "MsgNum",
                  abstractList: "AbstractList",
                  messageBody: "MsgBody",
                  needReadReceipt: "IsNeedReadReceipt"
                }
              }
            };
          }(e)), this._configMap.set(Po, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.SEND_GROUP_MESSAGE)
              }),
              body: {
                fromAccount: "",
                groupID: "",
                random: 0,
                clientSequence: 0,
                priority: "",
                msgBody: [],
                cloudCustomData: void 0,
                onlineOnlyFlag: 0,
                offlinePushInfo: {
                  pushFlag: 0,
                  title: "",
                  desc: "",
                  ext: "",
                  apnsInfo: {
                    badgeMode: 0
                  },
                  androidInfo: {
                    OPPOChannelID: ""
                  }
                },
                groupAtInfo: [],
                messageControlInfo: void 0,
                clientTime: void 0,
                needReadReceipt: 0,
                topicID: void 0
              },
              keyMap: {
                request: {
                  to: "GroupId",
                  extension: "Ext",
                  data: "Data",
                  description: "Desc",
                  random: "Random",
                  sequence: "ReqMsgSeq",
                  count: "ReqMsgNumber",
                  type: "MsgType",
                  priority: "MsgPriority",
                  content: "MsgContent",
                  elements: "MsgBody",
                  sizeType: "Type",
                  uuid: "UUID",
                  url: "",
                  imageUrl: "URL",
                  fileUrl: "Url",
                  remoteAudioUrl: "Url",
                  remoteVideoUrl: "VideoUrl",
                  thumbUUID: "ThumbUUID",
                  videoUUID: "VideoUUID",
                  videoUrl: "",
                  downloadFlag: "Download_Flag",
                  clientSequence: "ClientSeq",
                  from: "From_Account",
                  time: "MsgTimeStamp",
                  messageRandom: "MsgRandom",
                  messageSequence: "MsgSeq",
                  payload: "MsgContent",
                  messageList: "MsgList",
                  messageNumber: "MsgNum",
                  abstractList: "AbstractList",
                  messageBody: "MsgBody",
                  needReadReceipt: "NeedReadReceipt"
                },
                response: {
                  MsgTime: "time",
                  MsgSeq: "sequence"
                }
              }
            };
          }(e)), this._configMap.set(Vo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.REVOKE_C2C_MESSAGE)
              }),
              body: {
                msgInfo: {
                  fromAccount: "",
                  toAccount: "",
                  msgTimeStamp: 0,
                  msgSeq: 0,
                  msgRandom: 0
                }
              },
              keyMap: {
                request: {
                  msgInfo: "MsgInfo",
                  msgTimeStamp: "MsgTimeStamp",
                  msgSeq: "MsgSeq",
                  msgRandom: "MsgRandom"
                }
              }
            };
          }(e)), this._configMap.set(pn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.REVOKE_GROUP_MESSAGE)
              }),
              body: {
                groupID: "",
                msgSeqList: void 0,
                topicID: ""
              },
              keyMap: {
                request: {
                  msgSeqList: "MsgSeqList",
                  msgSeq: "MsgSeq"
                }
              }
            };
          }(e)), this._configMap.set(xo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.GET_C2C_ROAM_MESSAGES)
              }),
              body: {
                peerAccount: "",
                count: 15,
                lastMessageTime: 0,
                messageKey: "",
                withRecalledMessage: 1,
                direction: 0
              },
              keyMap: {
                request: {
                  messageKey: "MsgKey",
                  peerAccount: "Peer_Account",
                  count: "MaxCnt",
                  lastMessageTime: "LastMsgTime",
                  withRecalledMessage: "WithRecalledMsg",
                  direction: "GetDirection"
                },
                response: {
                  LastMsgTime: "lastMessageTime",
                  IsNeedReadReceipt: "needReadReceipt"
                }
              }
            };
          }(e)), this._configMap.set(jo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.MODIFY_C2C_MESSAGE)
              }),
              body: {
                from: "",
                to: "",
                sequence: 0,
                random: 0,
                time: 0,
                version: 0,
                elements: void 0,
                cloudCustomData: void 0
              },
              keyMap: {
                request: {
                  sequence: "MsgSeq",
                  random: "MsgRandom",
                  time: "MsgTime",
                  version: "MsgVersion",
                  type: "MsgType",
                  content: "MsgContent"
                }
              }
            };
          }(e)), this._configMap.set(hn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_GROUP_ROAM_MESSAGES)
              }),
              body: {
                withRecalledMsg: 1,
                groupID: "",
                count: 15,
                sequence: "",
                topicID: void 0
              },
              keyMap: {
                request: {
                  sequence: "ReqMsgSeq",
                  count: "ReqMsgNumber",
                  withRecalledMessage: "WithRecalledMsg"
                },
                response: {
                  Random: "random",
                  MsgTime: "time",
                  MsgSeq: "sequence",
                  ReqMsgSeq: "sequence",
                  RspMsgList: "messageList",
                  IsPlaceMsg: "isPlaceMessage",
                  IsSystemMsg: "isSystemMessage",
                  ToGroupId: "to",
                  EnumFrom_AccountType: "fromAccountType",
                  EnumTo_AccountType: "toAccountType",
                  GroupCode: "groupCode",
                  MsgPriority: "priority",
                  MsgBody: "elements",
                  MsgType: "type",
                  MsgContent: "content",
                  IsFinished: "complete",
                  Download_Flag: "downloadFlag",
                  ClientSeq: "clientSequence",
                  ThumbUUID: "thumbUUID",
                  VideoUUID: "videoUUID",
                  ToTopicId: "topicID"
                }
              }
            };
          }(e)), this._configMap.set(Ko, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.SET_C2C_MESSAGE_READ)
              }),
              body: {
                C2CMsgReaded: void 0
              },
              keyMap: {
                request: {
                  lastMessageTime: "LastedMsgTime"
                }
              }
            };
          }(e)), this._configMap.set(Ho, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.SET_C2C_PEER_MUTE_NOTIFICATIONS)
              }),
              body: {
                userIDList: void 0,
                muteFlag: 0
              },
              keyMap: {
                request: {
                  userIDList: "Peer_Account",
                  muteFlag: "Mute_Notifications"
                }
              }
            };
          }(e)), this._configMap.set(Bo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.GET_C2C_PEER_MUTE_NOTIFICATIONS)
              }),
              body: {
                updateSequence: 0
              },
              keyMap: {
                response: {
                  MuteNotificationsList: "muteFlagList"
                }
              }
            };
          }(e)), this._configMap.set(gn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.SET_GROUP_MESSAGE_READ)
              }),
              body: {
                groupID: void 0,
                messageReadSeq: void 0,
                topicID: void 0
              },
              keyMap: {
                request: {
                  messageReadSeq: "MsgReadedSeq"
                }
              }
            };
          }(e)), this._configMap.set(_n, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.SET_ALL_MESSAGE_READ)
              }),
              body: {
                readAllC2CMessage: 0,
                groupMessageReadInfoList: []
              },
              keyMap: {
                request: {
                  readAllC2CMessage: "C2CReadAllMsg",
                  groupMessageReadInfoList: "GroupReadInfo",
                  messageSequence: "MsgSeq"
                },
                response: {
                  C2CReadAllMsg: "readAllC2CMessage",
                  GroupReadInfoArray: "groupMessageReadInfoList"
                }
              }
            };
          }(e)), this._configMap.set(Yo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.DELETE_C2C_MESSAGE)
              }),
              body: {
                fromAccount: "",
                to: "",
                keyList: void 0
              },
              keyMap: {
                request: {
                  keyList: "MsgKeyList"
                }
              }
            };
          }(e)), this._configMap.set(Sn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.DELETE_GROUP_MESSAGE)
              }),
              body: {
                groupID: "",
                deleter: "",
                keyList: void 0,
                topicID: void 0
              },
              keyMap: {
                request: {
                  deleter: "Deleter_Account",
                  keyList: "Seqs"
                }
              }
            };
          }(e)), this._configMap.set(Dn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.MODIFY_GROUP_MESSAGE)
              }),
              body: {
                groupID: "",
                topicID: void 0,
                sequence: 0,
                version: 0,
                elements: void 0,
                cloudCustomData: void 0
              },
              keyMap: {
                request: {
                  sequence: "MsgSeq",
                  version: "MsgVersion",
                  type: "MsgType",
                  content: "MsgContent"
                }
              }
            };
          }(e)), this._configMap.set(fn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_READ_RECEIPT)
              }),
              body: {
                groupID: "",
                sequenceList: void 0
              },
              keyMap: {
                request: {
                  sequence: "MsgSeq"
                }
              }
            };
          }(e)), this._configMap.set(Mn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.SEND_C2C_READ_RECEIPT)
              }),
              body: {
                peerAccount: "",
                messageInfoList: void 0
              },
              keyMap: {
                request: {
                  peerAccount: "Peer_Account",
                  messageInfoList: "C2CMsgInfo",
                  fromAccount: "From_Account",
                  toAccount: "To_Account",
                  sequence: "MsgSeq",
                  random: "MsgRandom",
                  time: "MsgTime",
                  clientTime: "MsgClientTime"
                }
              }
            };
          }(e)), this._configMap.set(mn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.SEND_READ_RECEIPT)
              }),
              body: {
                groupID: "",
                sequenceList: void 0
              },
              keyMap: {
                request: {
                  sequenceList: "MsgSeqList",
                  sequence: "MsgSeq"
                }
              }
            };
          }(e)), this._configMap.set(vn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_READ_RECEIPT_DETAIL)
              }),
              body: {
                groupID: "",
                sequence: void 0,
                flag: 0,
                cursor: 0,
                count: 0
              },
              keyMap: {
                request: {
                  sequence: "MsgSeq",
                  count: "Num"
                },
                response: {
                  ReadList: "readUserIDList",
                  Read_Account: "userID",
                  UnreadList: "unreadUserIDList",
                  Unread_Account: "userID",
                  IsFinish: "isCompleted"
                }
              }
            };
          }(e)), this._configMap.set(Wo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.GET_PEER_READ_TIME)
              }),
              body: {
                userIDList: void 0
              },
              keyMap: {
                request: {
                  userIDList: "To_Account"
                },
                response: {
                  ReadTime: "peerReadTimeList"
                }
              }
            };
          }(e)), this._configMap.set(zo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.RECENT_CONTACT, ".").concat(H.CMD.GET_CONVERSATION_LIST)
              }),
              body: {
                fromAccount: void 0,
                count: 0
              },
              keyMap: {
                request: {},
                response: {
                  SessionItem: "conversations",
                  ToAccount: "groupID",
                  To_Account: "userID",
                  UnreadMsgCount: "unreadCount",
                  MsgGroupReadedSeq: "messageReadSeq",
                  C2cPeerReadTime: "c2cPeerReadTime"
                }
              }
            };
          }(e)), this._configMap.set($o, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.RECENT_CONTACT, ".").concat(H.CMD.PAGING_GET_CONVERSATION_LIST)
              }),
              body: {
                fromAccount: void 0,
                timeStamp: void 0,
                startIndex: void 0,
                pinnedTimeStamp: void 0,
                pinnedStartIndex: void 0,
                orderType: void 0,
                messageAssistFlag: 4,
                assistFlag: 15
              },
              keyMap: {
                request: {
                  messageAssistFlag: "MsgAssistFlags",
                  assistFlag: "AssistFlags",
                  pinnedTimeStamp: "TopTimeStamp",
                  pinnedStartIndex: "TopStartIndex"
                },
                response: {
                  SessionItem: "conversations",
                  ToAccount: "groupID",
                  To_Account: "userID",
                  UnreadMsgCount: "unreadCount",
                  MsgGroupReadedSeq: "messageReadSeq",
                  C2cPeerReadTime: "c2cPeerReadTime",
                  LastMsgFlags: "lastMessageFlag",
                  TopFlags: "isPinned",
                  TopTimeStamp: "pinnedTimeStamp",
                  TopStartIndex: "pinnedStartIndex"
                }
              }
            };
          }(e)), this._configMap.set(Jo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.RECENT_CONTACT, ".").concat(H.CMD.DELETE_CONVERSATION)
              }),
              body: {
                fromAccount: "",
                toAccount: void 0,
                type: 1,
                toGroupID: void 0,
                clearHistoryMessage: 1
              },
              keyMap: {
                request: {
                  toGroupID: "ToGroupid",
                  clearHistoryMessage: "ClearRamble"
                }
              }
            };
          }(e)), this._configMap.set(Xo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.RECENT_CONTACT, ".").concat(H.CMD.PIN_CONVERSATION)
              }),
              body: {
                fromAccount: "",
                operationType: 1,
                itemList: void 0
              },
              keyMap: {
                request: {
                  itemList: "RecentContactItem"
                }
              }
            };
          }(e)), this._configMap.set(Qo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.DELETE_GROUP_AT_TIPS)
              }),
              body: {
                messageListToDelete: void 0
              },
              keyMap: {
                request: {
                  messageListToDelete: "DelMsgList",
                  messageSeq: "MsgSeq",
                  messageRandom: "MsgRandom"
                }
              }
            };
          }(e)), this._configMap.set(Uo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.PROFILE, ".").concat(H.CMD.PORTRAIT_GET)
              }),
              body: {
                fromAccount: "",
                userItem: []
              },
              keyMap: {
                request: {
                  toAccount: "To_Account",
                  standardSequence: "StandardSequence",
                  customSequence: "CustomSequence"
                }
              }
            };
          }(e)), this._configMap.set(wo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.PROFILE, ".").concat(H.CMD.PORTRAIT_SET)
              }),
              body: {
                fromAccount: "",
                profileItem: [{
                  tag: Fe.NICK,
                  value: ""
                }, {
                  tag: Fe.GENDER,
                  value: ""
                }, {
                  tag: Fe.ALLOWTYPE,
                  value: ""
                }, {
                  tag: Fe.AVATAR,
                  value: ""
                }]
              },
              keyMap: {
                request: {
                  toAccount: "To_Account",
                  standardSequence: "StandardSequence",
                  customSequence: "CustomSequence"
                }
              }
            };
          }(e)), this._configMap.set(bo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.FRIEND, ".").concat(H.CMD.GET_BLACKLIST)
              }),
              body: {
                fromAccount: "",
                startIndex: 0,
                maxLimited: 30,
                lastSequence: 0
              },
              keyMap: {
                response: {
                  CurruentSequence: "currentSequence"
                }
              }
            };
          }(e)), this._configMap.set(Fo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.FRIEND, ".").concat(H.CMD.ADD_BLACKLIST)
              }),
              body: {
                fromAccount: "",
                toAccount: []
              }
            };
          }(e)), this._configMap.set(qo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.FRIEND, ".").concat(H.CMD.DELETE_BLACKLIST)
              }),
              body: {
                fromAccount: "",
                toAccount: []
              }
            };
          }(e)), this._configMap.set(Zo, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_JOINED_GROUPS)
              }),
              body: {
                memberAccount: "",
                limit: void 0,
                offset: void 0,
                groupType: void 0,
                responseFilter: {
                  groupBaseInfoFilter: void 0,
                  selfInfoFilter: void 0
                },
                isSupportTopic: 0
              },
              keyMap: {
                request: {
                  memberAccount: "Member_Account"
                },
                response: {
                  GroupIdList: "groups",
                  MsgFlag: "messageRemindType",
                  NoUnreadSeqList: "excludedUnreadSequenceList",
                  MsgSeq: "readedSequence"
                }
              }
            };
          }(e)), this._configMap.set(en, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_GROUP_INFO)
              }),
              body: {
                groupIDList: void 0,
                responseFilter: {
                  groupBaseInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "Owner_Account", "CreateTime", "InfoSeq", "LastInfoTime", "LastMsgTime", "MemberNum", "MaxMemberNum", "ApplyJoinOption", "NextMsgSeq", "ShutUpAllMember"],
                  groupCustomFieldFilter: void 0,
                  memberInfoFilter: void 0,
                  memberCustomFieldFilter: void 0
                }
              },
              keyMap: {
                request: {
                  groupIDList: "GroupIdList",
                  groupCustomField: "AppDefinedData",
                  memberCustomField: "AppMemberDefinedData",
                  groupCustomFieldFilter: "AppDefinedDataFilter_Group",
                  memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember"
                },
                response: {
                  GroupIdList: "groups",
                  MsgFlag: "messageRemindType",
                  AppDefinedData: "groupCustomField",
                  AppMemberDefinedData: "memberCustomField",
                  AppDefinedDataFilter_Group: "groupCustomFieldFilter",
                  AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter",
                  InfoSeq: "infoSequence",
                  MemberList: "members",
                  GroupInfo: "groups",
                  ShutUpUntil: "muteUntil",
                  ShutUpAllMember: "muteAllMembers",
                  ApplyJoinOption: "joinOption"
                }
              }
            };
          }(e)), this._configMap.set(tn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.CREATE_GROUP)
              }),
              body: {
                type: void 0,
                name: void 0,
                groupID: void 0,
                ownerID: void 0,
                introduction: void 0,
                notification: void 0,
                maxMemberNum: void 0,
                joinOption: void 0,
                memberList: void 0,
                groupCustomField: void 0,
                memberCustomField: void 0,
                webPushFlag: 1,
                avatar: "",
                isSupportTopic: void 0
              },
              keyMap: {
                request: {
                  ownerID: "Owner_Account",
                  userID: "Member_Account",
                  avatar: "FaceUrl",
                  maxMemberNum: "MaxMemberCount",
                  joinOption: "ApplyJoinOption",
                  groupCustomField: "AppDefinedData",
                  memberCustomField: "AppMemberDefinedData"
                },
                response: {
                  HugeGroupFlag: "avChatRoomFlag",
                  OverJoinedGroupLimit_Account: "overLimitUserIDList"
                }
              }
            };
          }(e)), this._configMap.set(on, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.DESTROY_GROUP)
              }),
              body: {
                groupID: void 0
              }
            };
          }(e)), this._configMap.set(nn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.MODIFY_GROUP_INFO)
              }),
              body: {
                groupID: void 0,
                name: void 0,
                introduction: void 0,
                notification: void 0,
                avatar: void 0,
                maxMemberNum: void 0,
                joinOption: void 0,
                groupCustomField: void 0,
                muteAllMembers: void 0
              },
              keyMap: {
                request: {
                  maxMemberNum: "MaxMemberCount",
                  groupCustomField: "AppDefinedData",
                  muteAllMembers: "ShutUpAllMember",
                  joinOption: "ApplyJoinOption",
                  avatar: "FaceUrl"
                },
                response: {
                  AppDefinedData: "groupCustomField",
                  ShutUpAllMember: "muteAllMembers",
                  ApplyJoinOption: "joinOption"
                }
              }
            };
          }(e)), this._configMap.set(an, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.APPLY_JOIN_GROUP)
              }),
              body: {
                groupID: void 0,
                applyMessage: void 0,
                userDefinedField: void 0,
                webPushFlag: 1,
                historyMessageFlag: void 0
              },
              keyMap: {
                request: {
                  applyMessage: "ApplyMsg",
                  historyMessageFlag: "HugeGroupHistoryMsgFlag"
                },
                response: {
                  HugeGroupFlag: "avChatRoomFlag",
                  AVChatRoomKey: "avChatRoomKey",
                  RspMsgList: "messageList",
                  ToGroupId: "to"
                }
              }
            };
          }(e)), this._configMap.set(sn, function (e) {
            e.a2, e.tinyid;
            return {
              head: t(t({}, g(e, Cr)), {}, {
                servcmd: "".concat(H.NAME.BIG_GROUP_NO_AUTH, ".").concat(H.CMD.APPLY_JOIN_GROUP)
              }),
              body: {
                groupID: void 0,
                applyMessage: void 0,
                userDefinedField: void 0,
                webPushFlag: 1
              },
              keyMap: {
                request: {
                  applyMessage: "ApplyMsg"
                },
                response: {
                  HugeGroupFlag: "avChatRoomFlag"
                }
              }
            };
          }(e)), this._configMap.set(rn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.QUIT_GROUP)
              }),
              body: {
                groupID: void 0
              }
            };
          }(e)), this._configMap.set(cn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.SEARCH_GROUP_BY_ID)
              }),
              body: {
                groupIDList: void 0,
                responseFilter: {
                  groupBasePublicInfoFilter: ["Type", "Name", "Introduction", "Notification", "FaceUrl", "CreateTime", "Owner_Account", "LastInfoTime", "LastMsgTime", "NextMsgSeq", "MemberNum", "MaxMemberNum", "ApplyJoinOption"]
                }
              },
              keyMap: {
                response: {
                  ApplyJoinOption: "joinOption"
                }
              }
            };
          }(e)), this._configMap.set(un, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.CHANGE_GROUP_OWNER)
              }),
              body: {
                groupID: void 0,
                newOwnerID: void 0
              },
              keyMap: {
                request: {
                  newOwnerID: "NewOwner_Account"
                }
              }
            };
          }(e)), this._configMap.set(ln, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.HANDLE_APPLY_JOIN_GROUP)
              }),
              body: {
                groupID: void 0,
                applicant: void 0,
                handleAction: void 0,
                handleMessage: void 0,
                authentication: void 0,
                messageKey: void 0,
                userDefinedField: void 0
              },
              keyMap: {
                request: {
                  applicant: "Applicant_Account",
                  handleAction: "HandleMsg",
                  handleMessage: "ApprovalMsg",
                  messageKey: "MsgKey"
                }
              }
            };
          }(e)), this._configMap.set(dn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.HANDLE_GROUP_INVITATION)
              }),
              body: {
                groupID: void 0,
                inviter: void 0,
                handleAction: void 0,
                handleMessage: void 0,
                authentication: void 0,
                messageKey: void 0,
                userDefinedField: void 0
              },
              keyMap: {
                request: {
                  inviter: "Inviter_Account",
                  handleAction: "HandleMsg",
                  handleMessage: "ApprovalMsg",
                  messageKey: "MsgKey"
                }
              }
            };
          }(e)), this._configMap.set(yn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_GROUP_APPLICATION)
              }),
              body: {
                startTime: void 0,
                limit: void 0,
                handleAccount: void 0
              },
              keyMap: {
                request: {
                  handleAccount: "Handle_Account"
                }
              }
            };
          }(e)), this._configMap.set(In, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.DELETE_GROUP_SYSTEM_MESSAGE)
              }),
              body: {
                messageListToDelete: void 0
              },
              keyMap: {
                request: {
                  messageListToDelete: "DelMsgList",
                  messageSeq: "MsgSeq",
                  messageRandom: "MsgRandom"
                }
              }
            };
          }(e)), this._configMap.set(En, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.BIG_GROUP_LONG_POLLING, ".").concat(H.CMD.AVCHATROOM_LONG_POLL)
              }),
              body: {
                USP: 1,
                startSeq: 1,
                holdTime: 90,
                key: void 0
              },
              keyMap: {
                request: {
                  USP: "USP"
                },
                response: {
                  ToGroupId: "groupID"
                }
              }
            };
          }(e)), this._configMap.set(Tn, function (e) {
            e.a2, e.tinyid;
            return {
              head: t(t({}, g(e, Sr)), {}, {
                servcmd: "".concat(H.NAME.BIG_GROUP_LONG_POLLING_NO_AUTH, ".").concat(H.CMD.AVCHATROOM_LONG_POLL)
              }),
              body: {
                USP: 1,
                startSeq: 1,
                holdTime: 90,
                key: void 0
              },
              keyMap: {
                request: {
                  USP: "USP"
                },
                response: {
                  ToGroupId: "groupID"
                }
              }
            };
          }(e)), this._configMap.set(Cn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_ONLINE_MEMBER_NUM)
              }),
              body: {
                groupID: void 0
              }
            };
          }(e)), this._configMap.set(Nn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.SET_GROUP_ATTRIBUTES)
              }),
              body: {
                groupID: void 0,
                groupAttributeList: void 0,
                mainSequence: void 0,
                avChatRoomKey: void 0,
                attributeControl: ["RaceConflict"]
              },
              keyMap: {
                request: {
                  key: "key",
                  value: "value"
                }
              }
            };
          }(e)), this._configMap.set(An, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.MODIFY_GROUP_ATTRIBUTES)
              }),
              body: {
                groupID: void 0,
                groupAttributeList: void 0,
                mainSequence: void 0,
                avChatRoomKey: void 0,
                attributeControl: ["RaceConflict"]
              },
              keyMap: {
                request: {
                  key: "key",
                  value: "value"
                }
              }
            };
          }(e)), this._configMap.set(On, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.DELETE_GROUP_ATTRIBUTES)
              }),
              body: {
                groupID: void 0,
                groupAttributeList: void 0,
                mainSequence: void 0,
                avChatRoomKey: void 0,
                attributeControl: ["RaceConflict"]
              },
              keyMap: {
                request: {
                  key: "key"
                }
              }
            };
          }(e)), this._configMap.set(Rn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.CLEAR_GROUP_ATTRIBUTES)
              }),
              body: {
                groupID: void 0,
                mainSequence: void 0,
                avChatRoomKey: void 0,
                attributeControl: ["RaceConflict"]
              }
            };
          }(e)), this._configMap.set(Ln, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP_ATTR, ".").concat(H.CMD.GET_GROUP_ATTRIBUTES)
              }),
              body: {
                groupID: void 0,
                avChatRoomKey: void 0,
                groupType: 1
              },
              keyMap: {
                request: {
                  avChatRoomKey: "Key",
                  groupType: "GroupType"
                }
              }
            };
          }(e)), this._configMap.set(Zn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP_COMMUNITY, ".").concat(H.CMD.CREATE_TOPIC)
              }),
              body: {
                groupID: void 0,
                topicName: void 0,
                avatar: void 0,
                customData: void 0,
                topicID: void 0,
                notification: void 0,
                introduction: void 0
              },
              keyMap: {
                request: {
                  avatar: "FaceUrl"
                }
              }
            };
          }(e)), this._configMap.set(ea, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP_COMMUNITY, ".").concat(H.CMD.DELETE_TOPIC)
              }),
              body: {
                groupID: void 0,
                topicIDList: void 0
              },
              keyMap: {
                request: {
                  topicIDList: "TopicIdList"
                },
                response: {
                  DestroyResultItem: "resultList",
                  ErrorCode: "code",
                  ErrorInfo: "message"
                }
              }
            };
          }(e)), this._configMap.set(ta, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP_COMMUNITY, ".").concat(H.CMD.UPDATE_TOPIC_PROFILE)
              }),
              body: {
                groupID: void 0,
                topicID: void 0,
                avatar: void 0,
                customData: void 0,
                notification: void 0,
                introduction: void 0,
                muteAllMembers: void 0,
                topicName: void 0
              },
              keyMap: {
                request: {
                  avatar: "FaceUrl",
                  muteAllMembers: "ShutUpAllMember"
                }
              }
            };
          }(e)), this._configMap.set(oa, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP_COMMUNITY, ".").concat(H.CMD.GET_TOPIC_LIST)
              }),
              body: {
                groupID: void 0,
                topicIDList: void 0
              },
              keyMap: {
                request: {
                  topicIDList: "TopicIdList"
                },
                response: {
                  TopicAndSelfInfo: "topicInfoList",
                  TopicInfo: "topic",
                  GroupID: "groupID",
                  ShutUpTime: "muteTime",
                  ShutUpAllFlag: "muteAllMembers",
                  LastMsgTime: "lastMessageTime",
                  MsgSeq: "readedSequence",
                  MsgFlag: "messageRemindType",
                  ErrorCode: "code",
                  ErrorInfo: "message"
                }
              }
            };
          }(e)), this._configMap.set(kn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_GROUP_MEMBER_LIST)
              }),
              body: {
                groupID: void 0,
                limit: 0,
                offset: void 0,
                next: void 0,
                memberRoleFilter: void 0,
                memberInfoFilter: ["Role", "NameCard", "ShutUpUntil", "JoinTime"],
                memberCustomFieldFilter: void 0
              },
              keyMap: {
                request: {
                  memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember"
                },
                response: {
                  AppMemberDefinedData: "memberCustomField",
                  AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter",
                  MemberList: "members",
                  ShutUpUntil: "muteUntil"
                }
              }
            };
          }(e)), this._configMap.set(Gn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.GET_GROUP_MEMBER_INFO)
              }),
              body: {
                groupID: void 0,
                userIDList: void 0,
                memberInfoFilter: void 0,
                memberCustomFieldFilter: void 0
              },
              keyMap: {
                request: {
                  userIDList: "Member_List_Account",
                  memberCustomFieldFilter: "AppDefinedDataFilter_GroupMember"
                },
                response: {
                  MemberList: "members",
                  ShutUpUntil: "muteUntil",
                  AppDefinedDataFilter_GroupMember: "memberCustomFieldFilter",
                  AppMemberDefinedData: "memberCustomField"
                }
              }
            };
          }(e)), this._configMap.set(Pn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.ADD_GROUP_MEMBER)
              }),
              body: {
                groupID: void 0,
                silence: void 0,
                userIDList: void 0
              },
              keyMap: {
                request: {
                  userID: "Member_Account",
                  userIDList: "MemberList"
                },
                response: {
                  MemberList: "members"
                }
              }
            };
          }(e)), this._configMap.set(Un, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.DELETE_GROUP_MEMBER)
              }),
              body: {
                groupID: void 0,
                userIDList: void 0,
                reason: void 0
              },
              keyMap: {
                request: {
                  userIDList: "MemberToDel_Account"
                }
              }
            };
          }(e)), this._configMap.set(wn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.GROUP, ".").concat(H.CMD.MODIFY_GROUP_MEMBER_INFO)
              }),
              body: {
                groupID: void 0,
                topicID: void 0,
                userID: void 0,
                messageRemindType: void 0,
                nameCard: void 0,
                role: void 0,
                memberCustomField: void 0,
                muteTime: void 0
              },
              keyMap: {
                request: {
                  userID: "Member_Account",
                  memberCustomField: "AppMemberDefinedData",
                  muteTime: "ShutUpTime",
                  messageRemindType: "MsgFlag"
                }
              }
            };
          }(e)), this._configMap.set(Vn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_STAT, ".").concat(H.CMD.TIM_WEB_REPORT_V2)
              }),
              body: {
                header: {},
                event: [],
                quality: []
              },
              keyMap: {
                request: {
                  SDKType: "sdk_type",
                  SDKVersion: "sdk_version",
                  deviceType: "device_type",
                  platform: "platform",
                  instanceID: "instance_id",
                  traceID: "trace_id",
                  SDKAppID: "sdk_app_id",
                  userID: "user_id",
                  tinyID: "tiny_id",
                  extension: "extension",
                  timestamp: "timestamp",
                  networkType: "network_type",
                  eventType: "event_type",
                  code: "error_code",
                  message: "error_message",
                  moreMessage: "more_message",
                  duplicate: "duplicate",
                  costTime: "cost_time",
                  level: "level",
                  qualityType: "quality_type",
                  reportIndex: "report_index",
                  wholePeriod: "whole_period",
                  totalCount: "total_count",
                  rttCount: "success_count_business",
                  successRateOfRequest: "percent_business",
                  countLessThan1Second: "success_count_business",
                  percentOfCountLessThan1Second: "percent_business",
                  countLessThan3Second: "success_count_platform",
                  percentOfCountLessThan3Second: "percent_platform",
                  successCountOfBusiness: "success_count_business",
                  successRateOfBusiness: "percent_business",
                  successCountOfPlatform: "success_count_platform",
                  successRateOfPlatform: "percent_platform",
                  successCountOfMessageReceived: "success_count_business",
                  successRateOfMessageReceived: "percent_business",
                  avgRTT: "average_value",
                  avgDelay: "average_value",
                  avgValue: "average_value",
                  uiPlatform: "ui_platform"
                }
              }
            };
          }(n)), this._configMap.set(Kn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.HEARTBEAT, ".").concat(H.CMD.ALIVE)
              }),
              body: {}
            };
          }(e)), this._configMap.set(Hn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_PUSH, ".").concat(H.CMD.MESSAGE_PUSH)
              }),
              body: {},
              keyMap: {
                response: {
                  C2cMsgArray: "C2CMessageArray",
                  GroupMsgArray: "groupMessageArray",
                  GroupTips: "groupTips",
                  C2cNotifyMsgArray: "C2CNotifyMessageArray",
                  C2cMsgInfo: "C2CReadReceiptArray",
                  ClientSeq: "clientSequence",
                  MsgPriority: "priority",
                  NoticeSeq: "noticeSequence",
                  MsgContent: "content",
                  MsgType: "type",
                  MsgBody: "elements",
                  ToGroupId: "to",
                  Desc: "description",
                  Ext: "extension",
                  IsSyncMsg: "isSyncMessage",
                  Flag: "needSync",
                  NeedAck: "needAck",
                  PendencyAdd_Account: "userID",
                  ProfileImNick: "nick",
                  PendencyType: "applicationType",
                  C2CReadAllMsg: "readAllC2CMessage",
                  IsNeedReadReceipt: "needReadReceipt"
                }
              }
            };
          }(e)), this._configMap.set(Bn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_PUSH, ".").concat(H.CMD.MULTI_MESSAGE_PUSH)
              }),
              body: {},
              keyMap: {
                response: {
                  GroupMsgArray: "groupMessageArray",
                  GroupTips: "groupTips",
                  ClientSeq: "clientSequence",
                  MsgPriority: "priority",
                  NoticeSeq: "noticeSequence",
                  MsgContent: "content",
                  MsgType: "type",
                  MsgBody: "elements",
                  ToGroupId: "to",
                  Desc: "description",
                  Ext: "extension",
                  IsSyncMsg: "isSyncMessage",
                  Flag: "needSync",
                  NeedAck: "needAck",
                  PendencyType: "applicationType"
                }
              }
            };
          }(e)), this._configMap.set(xn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.OPEN_IM, ".").concat(H.CMD.MESSAGE_PUSH_ACK)
              }),
              body: {
                sessionData: void 0
              },
              keyMap: {
                request: {
                  sessionData: "SessionData"
                }
              }
            };
          }(e)), this._configMap.set(Wn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_OPEN_STATUS, ".").concat(H.CMD.STATUS_FORCE_OFFLINE)
              }),
              body: {},
              keyMap: {
                response: {
                  C2cNotifyMsgArray: "C2CNotifyMessageArray",
                  NoticeSeq: "noticeSequence",
                  KickoutMsgNotify: "kickoutMsgNotify",
                  NewInstInfo: "newInstanceInfo"
                }
              }
            };
          }(e)), this._configMap.set(jn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_LONG_MESSAGE, ".").concat(H.CMD.DOWNLOAD_MERGER_MESSAGE)
              }),
              body: {
                downloadKey: ""
              },
              keyMap: {
                response: {
                  Data: "data",
                  Desc: "description",
                  Ext: "extension",
                  Download_Flag: "downloadFlag",
                  ThumbUUID: "thumbUUID",
                  VideoUUID: "videoUUID"
                }
              }
            };
          }(e)), this._configMap.set(Yn, function (e) {
            return {
              head: t(t({}, e), {}, {
                servcmd: "".concat(H.NAME.IM_LONG_MESSAGE, ".").concat(H.CMD.UPLOAD_MERGER_MESSAGE)
              }),
              body: {
                messageList: []
              },
              keyMap: {
                request: {
                  fromAccount: "From_Account",
                  toAccount: "To_Account",
                  msgTimeStamp: "MsgTimeStamp",
                  msgSeq: "MsgSeq",
                  msgRandom: "MsgRandom",
                  msgBody: "MsgBody",
                  type: "MsgType",
                  content: "MsgContent",
                  data: "Data",
                  description: "Desc",
                  extension: "Ext",
                  sizeType: "Type",
                  uuid: "UUID",
                  url: "",
                  imageUrl: "URL",
                  fileUrl: "Url",
                  remoteAudioUrl: "Url",
                  remoteVideoUrl: "VideoUrl",
                  thumbUUID: "ThumbUUID",
                  videoUUID: "VideoUUID",
                  videoUrl: "",
                  downloadFlag: "Download_Flag",
                  from: "From_Account",
                  time: "MsgTimeStamp",
                  messageRandom: "MsgRandom",
                  messageSequence: "MsgSeq",
                  elements: "MsgBody",
                  clientSequence: "ClientSeq",
                  payload: "MsgContent",
                  messageList: "MsgList",
                  messageNumber: "MsgNum",
                  abstractList: "AbstractList",
                  messageBody: "MsgBody"
                }
              }
            };
          }(e));
        }
      }, {
        key: "has",
        value: function value(e) {
          return this._configMap.has(e);
        }
      }, {
        key: "get",
        value: function value(e) {
          return this._configMap.get(e);
        }
      }, {
        key: "update",
        value: function value() {
          this._fillConfigMap();
        }
      }, {
        key: "getKeyMap",
        value: function value(e) {
          return this.has(e) ? this.get(e).keyMap || {} : (we.warn("".concat(this._className, ".getKeyMap unknown protocolName:").concat(e)), {});
        }
      }, {
        key: "getProtocolData",
        value: function value(e) {
          var t = e.protocolName,
            o = e.requestData,
            n = this.get(t),
            a = null;
          if (o) {
            var s = this._simpleDeepCopy(n),
              r = this._updateService(o, s),
              i = r.body,
              c = Object.create(null);
            for (var u in i) {
              if (Object.prototype.hasOwnProperty.call(i, u)) {
                if (c[u] = i[u], void 0 === o[u]) continue;
                c[u] = o[u];
              }
            }
            r.body = c, a = this._getUplinkData(r);
          } else a = this._getUplinkData(n);
          return a;
        }
      }, {
        key: "_getUplinkData",
        value: function value(e) {
          var t = this._requestDataCleaner(e),
            o = Gt(t.head),
            n = cr(t.body, this._getRequestKeyMap(o));
          return t.body = n, t;
        }
      }, {
        key: "_updateService",
        value: function value(e, t) {
          var o = Gt(t.head);
          if (t.head.servcmd.includes(H.NAME.GROUP)) {
            var n = e.type,
              a = e.groupID,
              s = void 0 === a ? void 0 : a,
              r = e.groupIDList,
              i = void 0 === r ? [] : r;
            Ze(s) && (s = i[0] || ""), Et({
              type: n,
              groupID: s
            }) && (t.head.servcmd = "".concat(H.NAME.GROUP_COMMUNITY, ".").concat(o));
          }
          return t;
        }
      }, {
        key: "_getRequestKeyMap",
        value: function value(e) {
          var o = this.getKeyMap(e);
          return t(t({}, sr.request), o.request);
        }
      }, {
        key: "_requestDataCleaner",
        value: function value(e) {
          var t = Array.isArray(e) ? [] : Object.create(null);
          for (var n in e) {
            Object.prototype.hasOwnProperty.call(e, n) && st(n) && null !== e[n] && void 0 !== e[n] && ("object" !== o(e[n]) ? t[n] = e[n] : t[n] = this._requestDataCleaner.bind(this)(e[n]));
          }
          return t;
        }
      }, {
        key: "_simpleDeepCopy",
        value: function value(e) {
          for (var t, o = Object.keys(e), n = {}, a = 0, s = o.length; a < s; a++) {
            t = o[a], Qe(e[t]) ? n[t] = Array.from(e[t]) : Je(e[t]) ? n[t] = this._simpleDeepCopy(e[t]) : n[t] = e[t];
          }
          return n;
        }
      }]), e;
    }(),
    Nr = [xn],
    Ar = function () {
      function e(t) {
        n(this, e), this._sessionModule = t, this._className = "DownlinkHandler", this._eventHandlerMap = new Map(), this._eventHandlerMap.set("C2CMessageArray", this._c2cMessageArrayHandler.bind(this)), this._eventHandlerMap.set("groupMessageArray", this._groupMessageArrayHandler.bind(this)), this._eventHandlerMap.set("groupTips", this._groupTipsHandler.bind(this)), this._eventHandlerMap.set("C2CNotifyMessageArray", this._C2CNotifyMessageArrayHandler.bind(this)), this._eventHandlerMap.set("C2CReadReceiptArray", this._C2CReadReceiptArrayHandler.bind(this)), this._eventHandlerMap.set("profileModify", this._profileHandler.bind(this)), this._eventHandlerMap.set("friendListMod", this._relationChainHandler.bind(this)), this._eventHandlerMap.set("recentContactMod", this._recentContactHandler.bind(this)), this._eventHandlerMap.set("readAllC2CMessage", this._allMessageReadHandler.bind(this)), this._eventHandlerMap.set("c2cMessageModified", this._c2cMessageModifiedHandler.bind(this)), this._eventHandlerMap.set("groupMessageModified", this._groupMessageModifiedHandler.bind(this)), this._keys = M(this._eventHandlerMap.keys());
      }
      return s(e, [{
        key: "_c2cMessageArrayHandler",
        value: function value(e) {
          var t = this._sessionModule.getModule(no);
          if (t) {
            if (e.dataList.forEach(function (e) {
              if (1 === e.isSyncMessage) {
                var t = e.from;
                e.from = e.to, e.to = t;
              }
            }), 1 === e.needSync) this._sessionModule.getModule(mo).startOnlineSync();
            t.onNewC2CMessage({
              dataList: e.dataList,
              isInstantMessage: !0
            });
          }
        }
      }, {
        key: "_c2cMessageModifiedHandler",
        value: function value(e) {
          var t = this._sessionModule.getModule(no);
          t && t.onC2CMessageModified(e);
        }
      }, {
        key: "_groupMessageArrayHandler",
        value: function value(e) {
          var t = this._sessionModule.getModule(ao);
          t && t.onNewGroupMessage({
            event: e.event,
            dataList: e.dataList,
            isInstantMessage: !0
          });
        }
      }, {
        key: "_groupMessageModifiedHandler",
        value: function value(e) {
          var t = this._sessionModule.getModule(ao);
          t && t.onGroupMessageModified(e);
        }
      }, {
        key: "_groupTipsHandler",
        value: function value(e) {
          var t = this._sessionModule.getModule(ao);
          if (t) {
            var o = e.event,
              n = e.dataList,
              a = e.isInstantMessage,
              s = void 0 === a || a,
              r = e.isSyncingEnded;
            switch (o) {
              case 4:
              case 6:
                t.onNewGroupTips({
                  event: o,
                  dataList: n
                });
                break;
              case 5:
                n.forEach(function (e) {
                  Qe(e.elements.revokedInfos) ? t.onGroupMessageRevoked({
                    dataList: n
                  }) : Qe(e.elements.groupMessageReadNotice) ? t.onGroupMessageReadNotice({
                    dataList: n
                  }) : Qe(e.elements.readReceiptList) ? t.onReadReceiptList({
                    dataList: n
                  }) : t.onNewGroupSystemNotice({
                    dataList: n,
                    isInstantMessage: s,
                    isSyncingEnded: r
                  });
                });
                break;
              case 12:
                this._sessionModule.getModule(co).onNewGroupAtTips({
                  dataList: n
                });
                break;
              default:
                we.log("".concat(this._className, "._groupTipsHandler unknown event:").concat(o, " dataList:"), n);
            }
          }
        }
      }, {
        key: "_C2CNotifyMessageArrayHandler",
        value: function value(e) {
          var t = this,
            o = e.dataList;
          if (Qe(o)) {
            var n = this._sessionModule.getModule(no);
            o.forEach(function (e) {
              if (Xe(e)) if (e.hasOwnProperty("kickoutMsgNotify")) {
                var a = e.kickoutMsgNotify,
                  s = a.kickType,
                  r = a.newInstanceInfo,
                  i = void 0 === r ? {} : r;
                1 === s ? t._sessionModule.onMultipleAccountKickedOut(i) : 2 === s ? t._sessionModule.onMultipleDeviceKickedOut(i) : 3 === s && t._sessionModule.onRestApiKickedOut(i);
              } else if (e.hasOwnProperty("c2cMessageRevokedNotify")) n && n.onC2CMessageRevoked({
                dataList: o
              });else if (e.hasOwnProperty("c2cMessageReadReceipt")) n && n.onC2CMessageReadReceipt({
                dataList: o
              });else if (e.hasOwnProperty("c2cMessageReadNotice")) n && n.onC2CMessageReadNotice({
                dataList: o
              });else if (e.hasOwnProperty("muteNotificationsSync")) {
                t._sessionModule.getModule(co).onC2CMessageRemindTypeSynced({
                  dataList: o
                });
              }
            });
          }
        }
      }, {
        key: "_C2CReadReceiptArrayHandler",
        value: function value(e) {
          this._sessionModule.getModule(no).onReadReceiptList(e);
        }
      }, {
        key: "_profileHandler",
        value: function value(e) {
          this._sessionModule.getModule(oo).onProfileModified({
            dataList: e.dataList
          });
          var t = this._sessionModule.getModule(so);
          t && t.onFriendProfileModified({
            dataList: e.dataList
          });
        }
      }, {
        key: "_relationChainHandler",
        value: function value(e) {
          this._sessionModule.getModule(oo).onRelationChainModified({
            dataList: e.dataList
          });
          var t = this._sessionModule.getModule(so);
          t && t.onRelationChainModified({
            dataList: e.dataList
          });
        }
      }, {
        key: "_recentContactHandler",
        value: function value(e) {
          var t = e.dataList;
          if (Qe(t)) {
            var o = this._sessionModule.getModule(co);
            o && t.forEach(function (e) {
              var t = e.pushType,
                n = e.recentContactTopItem,
                a = e.recentContactDeleteItem;
              1 === t ? o.onConversationDeleted(a.recentContactList) : 2 === t ? o.onConversationPinned(n.recentContactList) : 3 === t && o.onConversationUnpinned(n.recentContactList);
            });
          }
        }
      }, {
        key: "_allMessageReadHandler",
        value: function value(e) {
          var t = e.dataList,
            o = this._sessionModule.getModule(co);
          o && o.onPushedAllMessageRead(t);
        }
      }, {
        key: "onMessage",
        value: function value(e) {
          var t = this,
            o = e.body;
          if (this._filterMessageFromIMOpenPush(e)) {
            var n = o.eventArray,
              a = o.isInstantMessage,
              s = o.isSyncingEnded,
              r = o.needSync;
            if (Qe(n)) for (var i = null, c = null, u = 0, l = 0, d = n.length; l < d; l++) {
              u = (i = n[l]).event;
              var p = Object.keys(i).find(function (e) {
                return -1 !== t._keys.indexOf(e);
              });
              p ? (c = 14 === u ? {
                readAllC2CMessage: i[p],
                groupMessageReadInfoList: i.groupMessageReadNotice || []
              } : 16 === u ? {
                userID: i.userID,
                readReceiptList: i[p]
              } : i[p], this._eventHandlerMap.get(p)({
                event: u,
                dataList: c,
                isInstantMessage: a,
                isSyncingEnded: s,
                needSync: r
              })) : we.log("".concat(this._className, ".onMessage unknown eventItem:").concat(i));
            }
          }
        }
      }, {
        key: "_filterMessageFromIMOpenPush",
        value: function value(e) {
          var t = e.head,
            o = e.body,
            n = t.servcmd,
            a = !1;
          if (Ze(n) || (a = n.includes(H.NAME.IM_CONFIG_MANAGER) || n.includes(H.NAME.OVERLOAD_PUSH) || n.includes(H.NAME.STAT_SERVICE)), !a) return !0;
          if (n.includes(H.CMD.PUSHED_CLOUD_CONTROL_CONFIG)) this._sessionModule.getModule(Io).onPushedCloudControlConfig(o);else if (n.includes(H.CMD.PUSHED_COMMERCIAL_CONFIG)) {
            this._sessionModule.getModule(So).onPushedConfig(o);
          } else if (n.includes(H.CMD.OVERLOAD_NOTIFY)) this._sessionModule.onPushedServerOverload(o);else if (n.includes(H.CMD.KICK_OTHER)) {
            var s = Date.now();
            this._sessionModule.reLoginOnKickOther();
            var r = new va(ya.KICK_OTHER),
              i = this._sessionModule.getModule(eo).getLastWsHelloTs(),
              c = s - i;
            r.setMessage("last wshello time:".concat(i, " diff:").concat(c, "ms")).setNetworkType(this._sessionModule.getNetworkType()).end();
          }
          return !1;
        }
      }]), e;
    }(),
    Or = [{
      cmd: H.CMD.GET_GROUP_INFO,
      interval: 1,
      count: 20
    }, {
      cmd: H.CMD.GET_GROUP_TOPIC_LIST,
      interval: 1,
      count: 10
    }, {
      cmd: H.CMD.SET_GROUP_ATTRIBUTES,
      interval: 5,
      count: 10
    }, {
      cmd: H.CMD.MODIFY_GROUP_ATTRIBUTES,
      interval: 5,
      count: 10
    }, {
      cmd: H.CMD.DELETE_GROUP_ATTRIBUTES,
      interval: 5,
      count: 10
    }, {
      cmd: H.CMD.CLEAR_GROUP_ATTRIBUTES,
      interval: 5,
      count: 10
    }, {
      cmd: H.CMD.GET_GROUP_ATTRIBUTES,
      interval: 5,
      count: 20
    }, {
      cmd: H.CMD.SET_ALL_MESSAGE_READ,
      interval: 1,
      count: 1
    }],
    Rr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "SessionModule", a._platform = a.getPlatform(), a._protocolHandler = new Dr(_(a)), a._messageDispatcher = new Ar(_(a)), a._commandFrequencyLimitMap = new Map(), a._commandRequestInfoMap = new Map(), a._serverOverloadInfoMap = new Map(), a._init(), a.getInnerEmitterInstance().on(Xa, a._onCloudConfigUpdated, _(a)), a;
      }
      return s(o, [{
        key: "_init",
        value: function value() {
          this._updateCommandFrequencyLimitMap(Or);
        }
      }, {
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this.getCloudConfig("cmd_frequency_limit");
          Ze(e) || (e = JSON.parse(e), this._updateCommandFrequencyLimitMap(e));
        }
      }, {
        key: "_updateCommandFrequencyLimitMap",
        value: function value(e) {
          var t = this;
          e.forEach(function (e) {
            t._commandFrequencyLimitMap.set(e.cmd, {
              interval: e.interval,
              count: e.count
            });
          });
        }
      }, {
        key: "updateProtocolConfig",
        value: function value() {
          this._protocolHandler.update();
        }
      }, {
        key: "request",
        value: function value(e) {
          we.debug("".concat(this._className, ".request options:"), e);
          var t = e.protocolName,
            o = e.tjgID;
          if (!this._protocolHandler.has(t)) return we.warn("".concat(this._className, ".request unknown protocol:").concat(t)), ja({
            code: na.CANNOT_FIND_PROTOCOL,
            message: aa.CANNOT_FIND_PROTOCOL
          });
          var n = this.getProtocolData(e),
            a = n.head.servcmd;
          if (this._isFrequencyOverLimit(a)) return ja({
            code: na.OVER_FREQUENCY_LIMIT,
            message: aa.OVER_FREQUENCY_LIMIT
          });
          if (this._isServerOverload(a)) return ja({
            code: na.OPEN_SERVICE_OVERLOAD_ERROR,
            message: aa.OPEN_SERVICE_OVERLOAD_ERROR
          });
          Vt(o) || (n.head.tjgID = o);
          var s = this.getModule(vo);
          return Nr.includes(t) ? s.simplySend(n) : s.send(n);
        }
      }, {
        key: "getKeyMap",
        value: function value(e) {
          return this._protocolHandler.getKeyMap(e);
        }
      }, {
        key: "genCommonHead",
        value: function value() {
          var e = this.getModule(uo);
          return {
            ver: "v4",
            platform: this._platform,
            websdkappid: U,
            websdkversion: P,
            a2: e.getA2Key() || void 0,
            tinyid: e.getTinyID() || void 0,
            status_instid: e.getStatusInstanceID(),
            sdkappid: e.getSDKAppID(),
            contenttype: e.getContentType(),
            reqtime: 0,
            identifier: e.getA2Key() ? void 0 : e.getUserID(),
            usersig: e.getA2Key() ? void 0 : e.getUserSig(),
            sdkability: 1587,
            tjgID: ""
          };
        }
      }, {
        key: "genCosSpecifiedHead",
        value: function value() {
          var e = this.getModule(uo);
          return {
            ver: "v4",
            platform: this._platform,
            websdkappid: U,
            websdkversion: P,
            sdkappid: e.getSDKAppID(),
            contenttype: e.getContentType(),
            reqtime: 0,
            identifier: e.getUserID(),
            usersig: e.getUserSig(),
            status_instid: e.getStatusInstanceID(),
            sdkability: 1587
          };
        }
      }, {
        key: "genSSOReportHead",
        value: function value() {
          var e = this.getModule(uo);
          return {
            ver: "v4",
            platform: this._platform,
            websdkappid: U,
            websdkversion: P,
            sdkappid: e.getSDKAppID(),
            contenttype: "",
            reqtime: 0,
            identifier: "",
            usersig: "",
            status_instid: e.getStatusInstanceID(),
            sdkability: 1587
          };
        }
      }, {
        key: "getProtocolData",
        value: function value(e) {
          return this._protocolHandler.getProtocolData(e);
        }
      }, {
        key: "onErrorCodeNotZero",
        value: function value(e) {
          var t = e.errorCode;
          if (t === na.HELLO_ANSWER_KICKED_OUT) {
            var o = e.kickType,
              n = e.newInstanceInfo,
              a = void 0 === n ? {} : n;
            1 === o ? this.onMultipleAccountKickedOut(a) : 2 === o ? this.onMultipleDeviceKickedOut(a) : 3 === o && this.onRestApiKickedOut(a);
          }
          t !== na.MESSAGE_A2KEY_EXPIRED && t !== na.ACCOUNT_A2KEY_EXPIRED || (this._onUserSigExpired(), this.getModule(vo).reConnect());
        }
      }, {
        key: "onMessage",
        value: function value(e) {
          var t = e.body,
            o = t.needAck,
            n = void 0 === o ? 0 : o,
            a = t.sessionData;
          1 === n && this._sendACK(a), this._messageDispatcher.onMessage(e);
        }
      }, {
        key: "onReconnected",
        value: function value() {
          this._reLoginOnReconnected();
        }
      }, {
        key: "reLoginOnKickOther",
        value: function value() {
          we.log("".concat(this._className, ".reLoginOnKickOther")), this._reLogin();
        }
      }, {
        key: "_reLoginOnReconnected",
        value: function value() {
          we.log("".concat(this._className, "._reLoginOnReconnected")), this._reLogin();
        }
      }, {
        key: "_reLogin",
        value: function value() {
          var e = this;
          this.isLoggedIn() && this.request({
            protocolName: No
          }).then(function (t) {
            var o = t.data.instanceID;
            e.getModule(uo).setStatusInstanceID(o), we.log("".concat(e._className, "._reLogin ok. start to sync unread messages")), e.getModule(mo).startSyncOnReconnected(), e.getModule(To).startPull(), e.getModule(ao).updateLocalMainSequenceOnReconnected();
            var n = e.getModule(io);
            n.resetGetTopicTime(), n.getTopicListOnReconnected();
          });
        }
      }, {
        key: "onMultipleAccountKickedOut",
        value: function value(e) {
          this.getModule(eo).onMultipleAccountKickedOut(e);
        }
      }, {
        key: "onMultipleDeviceKickedOut",
        value: function value(e) {
          this.getModule(eo).onMultipleDeviceKickedOut(e);
        }
      }, {
        key: "_onUserSigExpired",
        value: function value() {
          this.getModule(eo).onUserSigExpired();
        }
      }, {
        key: "onRestApiKickedOut",
        value: function value(e) {
          this.getModule(eo).onRestApiKickedOut(e);
        }
      }, {
        key: "_sendACK",
        value: function value(e) {
          this.request({
            protocolName: xn,
            requestData: {
              sessionData: e
            }
          });
        }
      }, {
        key: "_isFrequencyOverLimit",
        value: function value(e) {
          var t = e.split(".")[1];
          if (!this._commandFrequencyLimitMap.has(t)) return !1;
          if (!this._commandRequestInfoMap.has(t)) return this._commandRequestInfoMap.set(t, {
            startTime: Date.now(),
            requestCount: 1
          }), !1;
          var o = this._commandFrequencyLimitMap.get(t),
            n = o.count,
            a = o.interval,
            s = this._commandRequestInfoMap.get(t),
            r = s.startTime,
            i = s.requestCount;
          if (Date.now() - r > 1e3 * a) return this._commandRequestInfoMap.set(t, {
            startTime: Date.now(),
            requestCount: 1
          }), !1;
          i += 1, this._commandRequestInfoMap.set(t, {
            startTime: r,
            requestCount: i
          });
          var c = !1;
          return i > n && (c = !0), c;
        }
      }, {
        key: "_isServerOverload",
        value: function value(e) {
          if (!this._serverOverloadInfoMap.has(e)) return !1;
          var t = this._serverOverloadInfoMap.get(e),
            o = t.overloadTime,
            n = t.waitingTime,
            a = !1;
          return Date.now() - o <= 1e3 * n ? a = !0 : (this._serverOverloadInfoMap.delete(e), a = !1), a;
        }
      }, {
        key: "onPushedServerOverload",
        value: function value(e) {
          var t = e.overloadCommand,
            o = e.waitingTime;
          this._serverOverloadInfoMap.set(t, {
            overloadTime: Date.now(),
            waitingTime: o
          }), we.warn("".concat(this._className, ".onPushedServerOverload waitingTime:").concat(o, "s"));
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._updateCommandFrequencyLimitMap(Or), this._commandRequestInfoMap.clear(), this._serverOverloadInfoMap.clear();
        }
      }]), o;
    }(Do),
    Lr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "MessageLossDetectionModule", a._maybeLostSequencesMap = new Map(), a._firstRoundRet = [], a;
      }
      return s(o, [{
        key: "onMessageMaybeLost",
        value: function value(e, t, o) {
          this._maybeLostSequencesMap.has(e) || this._maybeLostSequencesMap.set(e, []);
          for (var n = this._maybeLostSequencesMap.get(e), a = 0; a < o; a++) {
            -1 === n.indexOf(t + a) && n.push(t + a);
          }
        }
      }, {
        key: "detectFirstRound",
        value: function value(e, t) {
          var o = this._maybeLostSequencesMap.get(e);
          if (!Vt(o) && !Vt(t)) {
            var n = o.filter(function (e) {
              return -1 === t.indexOf(e);
            });
            0 === n.length ? we.info("".concat(this._className, ".detectFirstRound no message loss. conversationID:").concat(e)) : this._firstRoundRet = this._firstRoundRet.concat(n), o.length = 0;
          }
        }
      }, {
        key: "detectSecondRound",
        value: function value(e, t) {
          if (!Vt(this._firstRoundRet) && !Vt(t)) {
            var o = this._firstRoundRet.filter(function (e) {
              return -1 === t.indexOf(e);
            });
            this._firstRoundRet.length = 0;
            var n,
              a = o.length;
            if (0 !== a) a <= 5 ? n = e + "-" + o.join("-") : (o.sort(function (e, t) {
              return e - t;
            }), n = e + " start:" + o[0] + " end:" + o[a - 1] + " count:" + a), new va(ya.MESSAGE_LOSS).setMessage(n).setNetworkType(this.getNetworkType()).setLevel("warning").end(), we.info("".concat(this._className, ".detectSecondRound message loss detected. conversationID:").concat(e, " lostSequences:").concat(o));
          }
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._maybeLostSequencesMap.clear(), this._firstRoundRet.length = 0;
        }
      }]), o;
    }(Do),
    kr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "CloudControlModule", a._cloudConfig = new Map(), a._expiredTime = 0, a._version = 0, a._isFetching = !1, a;
      }
      return s(o, [{
        key: "getCloudConfig",
        value: function value(e) {
          return Ze(e) ? this._cloudConfig : this._cloudConfig.has(e) ? this._cloudConfig.get(e) : void 0;
        }
      }, {
        key: "_canFetchConfig",
        value: function value() {
          return this.isLoggedIn() && !this._isFetching && Date.now() >= this._expiredTime;
        }
      }, {
        key: "fetchConfig",
        value: function value() {
          var e = this,
            t = this._canFetchConfig();
          if (we.log("".concat(this._className, ".fetchConfig canFetchConfig:").concat(t)), t) {
            var o = new va(ya.FETCH_CLOUD_CONTROL_CONFIG),
              n = this.getModule(uo).getSDKAppID();
            this._isFetching = !0, this.request({
              protocolName: $n,
              requestData: {
                SDKAppID: n,
                version: this._version
              }
            }).then(function (t) {
              e._isFetching = !1, o.setMessage("version:".concat(e._version, " newVersion:").concat(t.data.version, " config:").concat(t.data.cloudControlConfig)).setNetworkType(e.getNetworkType()).end(), we.log("".concat(e._className, ".fetchConfig ok")), e._parseCloudControlConfig(t.data);
            }).catch(function (t) {
              e._isFetching = !1, e.probeNetwork().then(function (e) {
                var n = m(e, 2),
                  a = n[0],
                  s = n[1];
                o.setError(t, a, s).end();
              }), we.log("".concat(e._className, ".fetchConfig failed. error:"), t), e._setExpiredTimeOnResponseError(12e4);
            });
          }
        }
      }, {
        key: "onPushedCloudControlConfig",
        value: function value(e) {
          we.log("".concat(this._className, ".onPushedCloudControlConfig")), new va(ya.PUSHED_CLOUD_CONTROL_CONFIG).setNetworkType(this.getNetworkType()).setMessage("newVersion:".concat(e.version, " config:").concat(e.cloudControlConfig)).end(), this._parseCloudControlConfig(e);
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          this._canFetchConfig() && this.fetchConfig();
        }
      }, {
        key: "_parseCloudControlConfig",
        value: function value(e) {
          var t = this,
            o = "".concat(this._className, "._parseCloudControlConfig"),
            n = e.errorCode,
            a = e.errorMessage,
            s = e.cloudControlConfig,
            r = e.version,
            i = e.expiredTime;
          if (0 === n) {
            if (this._version !== r) {
              var c = null;
              try {
                c = JSON.parse(s);
              } catch (u) {
                we.error("".concat(o, " JSON parse error:").concat(s));
              }
              c && (this._cloudConfig.clear(), Object.keys(c).forEach(function (e) {
                t._cloudConfig.set(e, c[e]);
              }), this._version = r, this.emitInnerEvent(Xa));
            }
            this._expiredTime = Date.now() + 1e3 * i;
          } else Ze(n) ? (we.log("".concat(o, " failed. Invalid message format:"), e), this._setExpiredTimeOnResponseError(36e5)) : (we.error("".concat(o, " errorCode:").concat(n, " errorMessage:").concat(a)), this._setExpiredTimeOnResponseError(12e4));
        }
      }, {
        key: "_setExpiredTimeOnResponseError",
        value: function value(e) {
          this._expiredTime = Date.now() + e;
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._cloudConfig.clear(), this._expiredTime = 0, this._version = 0, this._isFetching = !1;
        }
      }]), o;
    }(Do),
    Gr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "PullGroupMessageModule", a._remoteLastMessageSequenceMap = new Map(), a.PULL_LIMIT_COUNT = 15, a;
      }
      return s(o, [{
        key: "startPull",
        value: function value() {
          var e = this,
            t = this._getNeedPullConversationList();
          this._getRemoteLastMessageSequenceList().then(function () {
            var o = e.getModule(co);
            t.forEach(function (t) {
              var n = t.conversationID,
                a = n.replace(D.CONV_GROUP, ""),
                s = o.getGroupLocalLastMessageSequence(n),
                r = e._remoteLastMessageSequenceMap.get(a) || 0,
                i = r - s;
              we.log("".concat(e._className, ".startPull groupID:").concat(a, " localLastMessageSequence:").concat(s, " ") + "remoteLastMessageSequence:".concat(r, " diff:").concat(i)), s > 0 && i >= 1 && i < 300 && e._pullMissingMessage({
                groupID: a,
                localLastMessageSequence: s,
                remoteLastMessageSequence: r,
                diff: i
              });
            });
          });
        }
      }, {
        key: "_getNeedPullConversationList",
        value: function value() {
          return this.getModule(co).getLocalConversationList().filter(function (e) {
            return e.type === D.CONV_GROUP && e.groupProfile.type !== D.GRP_AVCHATROOM;
          });
        }
      }, {
        key: "_getRemoteLastMessageSequenceList",
        value: function value() {
          var e = this;
          return this.getModule(ao).getGroupList().then(function (t) {
            for (var o = t.data.groupList, n = void 0 === o ? [] : o, a = 0; a < n.length; a++) {
              var s = n[a],
                r = s.groupID,
                i = s.nextMessageSeq;
              if (s.type !== D.GRP_AVCHATROOM) {
                var c = i - 1;
                e._remoteLastMessageSequenceMap.set(r, c);
              }
            }
          });
        }
      }, {
        key: "_pullMissingMessage",
        value: function value(e) {
          var t = this,
            o = e.localLastMessageSequence,
            n = e.remoteLastMessageSequence,
            a = e.diff;
          e.count = a > this.PULL_LIMIT_COUNT ? this.PULL_LIMIT_COUNT : a, e.sequence = a > this.PULL_LIMIT_COUNT ? o + this.PULL_LIMIT_COUNT : o + a, this._getGroupMissingMessage(e).then(function (s) {
            s.length > 0 && (s[0].sequence + 1 <= n && (e.localLastMessageSequence = o + t.PULL_LIMIT_COUNT, e.diff = a - t.PULL_LIMIT_COUNT, t._pullMissingMessage(e)), t.getModule(ao).onNewGroupMessage({
              dataList: s,
              isInstantMessage: !1
            }));
          });
        }
      }, {
        key: "_getGroupMissingMessage",
        value: function value(e) {
          var t = this,
            o = new va(ya.GET_GROUP_MISSING_MESSAGE);
          return this.request({
            protocolName: hn,
            requestData: {
              groupID: e.groupID,
              count: e.count,
              sequence: e.sequence
            }
          }).then(function (n) {
            var a = n.data.messageList,
              s = void 0 === a ? [] : a;
            return o.setNetworkType(t.getNetworkType()).setMessage("groupID:".concat(e.groupID, " count:").concat(e.count, " sequence:").concat(e.sequence, " messageList length:").concat(s.length)).end(), s;
          }).catch(function (e) {
            t.probeNetwork().then(function (t) {
              var n = m(t, 2),
                a = n[0],
                s = n[1];
              o.setError(e, a, s).end();
            });
          });
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._remoteLastMessageSequenceMap.clear();
        }
      }]), o;
    }(Do),
    Pr = function () {
      function e() {
        n(this, e), this._className = "AvgE2EDelay", this._e2eDelayArray = [];
      }
      return s(e, [{
        key: "addMessageDelay",
        value: function value(e) {
          var t = ke() - e;
          t >= 0 && this._e2eDelayArray.push(t);
        }
      }, {
        key: "_calcAvg",
        value: function value(e, t) {
          if (0 === t) return 0;
          var o = 0;
          return e.forEach(function (e) {
            o += e;
          }), Pt(o / t, 1);
        }
      }, {
        key: "_calcCountWithLimit",
        value: function value(e) {
          var t = e.e2eDelayArray,
            o = e.min,
            n = e.max;
          return t.filter(function (e) {
            return o <= e && e < n;
          }).length;
        }
      }, {
        key: "_calcPercent",
        value: function value(e, t) {
          var o = Pt(e / t * 100, 2);
          return o > 100 && (o = 100), o;
        }
      }, {
        key: "_checkE2EDelayException",
        value: function value(e, t) {
          var o = e.filter(function (e) {
            return e > t;
          });
          if (o.length > 0) {
            var n = o.length,
              a = Math.min.apply(Math, M(o)),
              s = Math.max.apply(Math, M(o)),
              r = this._calcAvg(o, n),
              i = Pt(n / e.length * 100, 2);
            if (i > 50) new va(ya.MESSAGE_E2E_DELAY_EXCEPTION).setMessage("message e2e delay exception. count:".concat(n, " min:").concat(a, " max:").concat(s, " avg:").concat(r, " percent:").concat(i)).setLevel("warning").end();
          }
        }
      }, {
        key: "getStatResult",
        value: function value() {
          var e = this._e2eDelayArray.length;
          if (0 === e) return null;
          var t = M(this._e2eDelayArray),
            o = this._calcCountWithLimit({
              e2eDelayArray: t,
              min: 0,
              max: 1
            }),
            n = this._calcCountWithLimit({
              e2eDelayArray: t,
              min: 1,
              max: 3
            }),
            a = this._calcPercent(o, e),
            s = this._calcPercent(n, e),
            r = this._calcAvg(t, e);
          return this._checkE2EDelayException(t, 3), t.length = 0, this.reset(), {
            totalCount: e,
            countLessThan1Second: o,
            percentOfCountLessThan1Second: a,
            countLessThan3Second: n,
            percentOfCountLessThan3Second: s,
            avgDelay: r
          };
        }
      }, {
        key: "reset",
        value: function value() {
          this._e2eDelayArray.length = 0;
        }
      }]), e;
    }(),
    Ur = function () {
      function e() {
        n(this, e), this._className = "AvgRTT", this._requestCount = 0, this._rttArray = [];
      }
      return s(e, [{
        key: "addRequestCount",
        value: function value() {
          this._requestCount += 1;
        }
      }, {
        key: "addRTT",
        value: function value(e) {
          this._rttArray.push(e);
        }
      }, {
        key: "_calcTotalCount",
        value: function value() {
          return this._requestCount;
        }
      }, {
        key: "_calcRTTCount",
        value: function value(e) {
          return e.length;
        }
      }, {
        key: "_calcSuccessRateOfRequest",
        value: function value(e, t) {
          if (0 === t) return 0;
          var o = Pt(e / t * 100, 2);
          return o > 100 && (o = 100), o;
        }
      }, {
        key: "_calcAvg",
        value: function value(e, t) {
          if (0 === t) return 0;
          var o = 0;
          return e.forEach(function (e) {
            o += e;
          }), parseInt(o / t);
        }
      }, {
        key: "_calcMax",
        value: function value() {
          return Math.max.apply(Math, M(this._rttArray));
        }
      }, {
        key: "_calcMin",
        value: function value() {
          return Math.min.apply(Math, M(this._rttArray));
        }
      }, {
        key: "getStatResult",
        value: function value() {
          var e = this._calcTotalCount(),
            t = M(this._rttArray);
          if (0 === e) return null;
          var o = this._calcRTTCount(t),
            n = this._calcSuccessRateOfRequest(o, e),
            a = this._calcAvg(t, o);
          return we.log("".concat(this._className, ".getStatResult max:").concat(this._calcMax(), " min:").concat(this._calcMin(), " avg:").concat(a)), this.reset(), {
            totalCount: e,
            rttCount: o,
            successRateOfRequest: n,
            avgRTT: a
          };
        }
      }, {
        key: "reset",
        value: function value() {
          this._requestCount = 0, this._rttArray.length = 0;
        }
      }]), e;
    }(),
    wr = function () {
      function e() {
        n(this, e), this._map = new Map();
      }
      return s(e, [{
        key: "initMap",
        value: function value(e) {
          var t = this;
          e.forEach(function (e) {
            t._map.set(e, {
              totalCount: 0,
              successCount: 0,
              failedCountOfUserSide: 0,
              costArray: [],
              fileSizeArray: []
            });
          });
        }
      }, {
        key: "addTotalCount",
        value: function value(e) {
          return !(Ze(e) || !this._map.has(e)) && (this._map.get(e).totalCount += 1, !0);
        }
      }, {
        key: "addSuccessCount",
        value: function value(e) {
          return !(Ze(e) || !this._map.has(e)) && (this._map.get(e).successCount += 1, !0);
        }
      }, {
        key: "addFailedCountOfUserSide",
        value: function value(e) {
          return !(Ze(e) || !this._map.has(e)) && (this._map.get(e).failedCountOfUserSide += 1, !0);
        }
      }, {
        key: "addCost",
        value: function value(e, t) {
          return !(Ze(e) || !this._map.has(e)) && (this._map.get(e).costArray.push(t), !0);
        }
      }, {
        key: "addFileSize",
        value: function value(e, t) {
          return !(Ze(e) || !this._map.has(e)) && (this._map.get(e).fileSizeArray.push(t), !0);
        }
      }, {
        key: "_calcSuccessRateOfBusiness",
        value: function value(e) {
          if (Ze(e) || !this._map.has(e)) return -1;
          var t = this._map.get(e),
            o = Pt(t.successCount / t.totalCount * 100, 2);
          return o > 100 && (o = 100), o;
        }
      }, {
        key: "_calcSuccessRateOfPlatform",
        value: function value(e) {
          if (Ze(e) || !this._map.has(e)) return -1;
          var t = this._map.get(e),
            o = this._calcSuccessCountOfPlatform(e) / t.totalCount * 100;
          return (o = Pt(o, 2)) > 100 && (o = 100), o;
        }
      }, {
        key: "_calcTotalCount",
        value: function value(e) {
          return Ze(e) || !this._map.has(e) ? -1 : this._map.get(e).totalCount;
        }
      }, {
        key: "_calcSuccessCountOfBusiness",
        value: function value(e) {
          return Ze(e) || !this._map.has(e) ? -1 : this._map.get(e).successCount;
        }
      }, {
        key: "_calcSuccessCountOfPlatform",
        value: function value(e) {
          if (Ze(e) || !this._map.has(e)) return -1;
          var t = this._map.get(e);
          return t.successCount + t.failedCountOfUserSide;
        }
      }, {
        key: "_calcAvg",
        value: function value(e) {
          return Ze(e) || !this._map.has(e) ? -1 : e === da ? this._calcAvgSpeed(e) : this._calcAvgCost(e);
        }
      }, {
        key: "_calcAvgCost",
        value: function value(e) {
          var t = this._map.get(e).costArray.length;
          if (0 === t) return 0;
          var o = 0;
          return this._map.get(e).costArray.forEach(function (e) {
            o += e;
          }), parseInt(o / t);
        }
      }, {
        key: "_calcAvgSpeed",
        value: function value(e) {
          var t = 0,
            o = 0;
          return this._map.get(e).costArray.forEach(function (e) {
            t += e;
          }), this._map.get(e).fileSizeArray.forEach(function (e) {
            o += e;
          }), parseInt(1e3 * o / t);
        }
      }, {
        key: "getStatResult",
        value: function value(e) {
          var t = this._calcTotalCount(e);
          if (0 === t) return null;
          var o = this._calcSuccessCountOfBusiness(e),
            n = this._calcSuccessRateOfBusiness(e),
            a = this._calcSuccessCountOfPlatform(e),
            s = this._calcSuccessRateOfPlatform(e),
            r = this._calcAvg(e);
          return this.reset(e), {
            totalCount: t,
            successCountOfBusiness: o,
            successRateOfBusiness: n,
            successCountOfPlatform: a,
            successRateOfPlatform: s,
            avgValue: r
          };
        }
      }, {
        key: "reset",
        value: function value(e) {
          Ze(e) ? this._map.clear() : this._map.set(e, {
            totalCount: 0,
            successCount: 0,
            failedCountOfUserSide: 0,
            costArray: [],
            fileSizeArray: []
          });
        }
      }]), e;
    }(),
    br = function () {
      function e() {
        n(this, e), this._lastMap = new Map(), this._currentMap = new Map();
      }
      return s(e, [{
        key: "initMap",
        value: function value(e) {
          var t = this;
          e.forEach(function (e) {
            t._lastMap.set(e, new Map()), t._currentMap.set(e, new Map());
          });
        }
      }, {
        key: "addMessageSequence",
        value: function value(e) {
          var t = e.key,
            o = e.message;
          if (Ze(t) || !this._lastMap.has(t) || !this._currentMap.has(t)) return !1;
          var n = o.conversationID,
            a = o.sequence,
            s = n.replace(D.CONV_GROUP, "");
          if (0 === this._lastMap.get(t).size) this._addCurrentMap(e);else if (this._lastMap.get(t).has(s)) {
            var r = this._lastMap.get(t).get(s),
              i = r.length - 1;
            a > r[0] && a < r[i] ? (r.push(a), r.sort(), this._lastMap.get(t).set(s, r)) : this._addCurrentMap(e);
          } else this._addCurrentMap(e);
          return !0;
        }
      }, {
        key: "_addCurrentMap",
        value: function value(e) {
          var t = e.key,
            o = e.message,
            n = o.conversationID,
            a = o.sequence,
            s = n.replace(D.CONV_GROUP, "");
          this._currentMap.get(t).has(s) || this._currentMap.get(t).set(s, []), this._currentMap.get(t).get(s).push(a);
        }
      }, {
        key: "_copyData",
        value: function value(e) {
          if (!Ze(e)) {
            this._lastMap.set(e, new Map());
            var t,
              o = this._lastMap.get(e),
              n = C(this._currentMap.get(e));
            try {
              for (n.s(); !(t = n.n()).done;) {
                var a = m(t.value, 2),
                  s = a[0],
                  r = a[1];
                o.set(s, r);
              }
            } catch (i) {
              n.e(i);
            } finally {
              n.f();
            }
            o = null, this._currentMap.set(e, new Map());
          }
        }
      }, {
        key: "getStatResult",
        value: function value(e) {
          if (Ze(this._currentMap.get(e)) || Ze(this._lastMap.get(e))) return null;
          if (0 === this._lastMap.get(e).size) return this._copyData(e), null;
          var t = 0,
            o = 0;
          if (this._lastMap.get(e).forEach(function (e, n) {
            var a = M(e.values()),
              s = a.length,
              r = a[s - 1] - a[0] + 1;
            t += r, o += s;
          }), 0 === t) return null;
          var n = Pt(o / t * 100, 2);
          return n > 100 && (n = 100), this._copyData(e), {
            totalCount: t,
            successCountOfMessageReceived: o,
            successRateOfMessageReceived: n
          };
        }
      }, {
        key: "reset",
        value: function value() {
          this._currentMap.clear(), this._lastMap.clear();
        }
      }]), e;
    }(),
    Fr = function (e) {
      i(a, e);
      var o = f(a);
      function a(e) {
        var t;
        n(this, a), (t = o.call(this, e))._className = "QualityStatModule", t.TAG = "im-ssolog-quality-stat", t.reportIndex = 0, t.wholePeriod = !1, t._qualityItems = [sa, ra, ia, ca, ua, la, da, pa, ga, _a], t._messageSentItems = [ia, ca, ua, la, da], t._messageReceivedItems = [pa, ga, _a], t.REPORT_INTERVAL = 120, t.REPORT_SDKAPPID_BLACKLIST = [], t.REPORT_TINYID_WHITELIST = [], t._statInfoArr = [], t._avgRTT = new Ur(), t._avgE2EDelay = new Pr(), t._rateMessageSent = new wr(), t._rateMessageReceived = new br();
        var s = t.getInnerEmitterInstance();
        return s.on(Ja, t._onLoginSuccess, _(t)), s.on(Xa, t._onCloudConfigUpdated, _(t)), t;
      }
      return s(a, [{
        key: "_onLoginSuccess",
        value: function value() {
          var e = this;
          this._rateMessageSent.initMap(this._messageSentItems), this._rateMessageReceived.initMap(this._messageReceivedItems);
          var t = this.getModule(lo),
            o = t.getItem(this.TAG, !1);
          !Vt(o) && ot(o.forEach) && (we.log("".concat(this._className, "._onLoginSuccess.get quality stat log in storage, nums=").concat(o.length)), o.forEach(function (t) {
            e._statInfoArr.push(t);
          }), t.removeItem(this.TAG, !1));
        }
      }, {
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this.getCloudConfig("q_rpt_interval"),
            t = this.getCloudConfig("q_rpt_sdkappid_bl"),
            o = this.getCloudConfig("q_rpt_tinyid_wl");
          Ze(e) || (this.REPORT_INTERVAL = Number(e)), Ze(t) || (this.REPORT_SDKAPPID_BLACKLIST = t.split(",").map(function (e) {
            return Number(e);
          })), Ze(o) || (this.REPORT_TINYID_WHITELIST = o.split(","));
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          this.isLoggedIn() && e % this.REPORT_INTERVAL == 0 && (this.wholePeriod = !0, this._report());
        }
      }, {
        key: "addRequestCount",
        value: function value() {
          this._avgRTT.addRequestCount();
        }
      }, {
        key: "addRTT",
        value: function value(e) {
          this._avgRTT.addRTT(e);
        }
      }, {
        key: "addMessageDelay",
        value: function value(e) {
          this._avgE2EDelay.addMessageDelay(e);
        }
      }, {
        key: "addTotalCount",
        value: function value(e) {
          this._rateMessageSent.addTotalCount(e) || we.warn("".concat(this._className, ".addTotalCount invalid key:"), e);
        }
      }, {
        key: "addSuccessCount",
        value: function value(e) {
          this._rateMessageSent.addSuccessCount(e) || we.warn("".concat(this._className, ".addSuccessCount invalid key:"), e);
        }
      }, {
        key: "addFailedCountOfUserSide",
        value: function value(e) {
          this._rateMessageSent.addFailedCountOfUserSide(e) || we.warn("".concat(this._className, ".addFailedCountOfUserSide invalid key:"), e);
        }
      }, {
        key: "addCost",
        value: function value(e, t) {
          this._rateMessageSent.addCost(e, t) || we.warn("".concat(this._className, ".addCost invalid key or cost:"), e, t);
        }
      }, {
        key: "addFileSize",
        value: function value(e, t) {
          this._rateMessageSent.addFileSize(e, t) || we.warn("".concat(this._className, ".addFileSize invalid key or size:"), e, t);
        }
      }, {
        key: "addMessageSequence",
        value: function value(e) {
          this._rateMessageReceived.addMessageSequence(e) || we.warn("".concat(this._className, ".addMessageSequence invalid key:"), e.key);
        }
      }, {
        key: "_getQualityItem",
        value: function value(e) {
          var o = {},
            n = ma[this.getNetworkType()];
          Ze(n) && (n = 8);
          var a = {
            qualityType: ha[e],
            timestamp: Re(),
            networkType: n,
            extension: ""
          };
          switch (e) {
            case sa:
              o = this._avgRTT.getStatResult();
              break;
            case ra:
              o = this._avgE2EDelay.getStatResult();
              break;
            case ia:
            case ca:
            case ua:
            case la:
            case da:
              o = this._rateMessageSent.getStatResult(e);
              break;
            case pa:
            case ga:
            case _a:
              o = this._rateMessageReceived.getStatResult(e);
          }
          return null === o ? null : t(t({}, a), o);
        }
      }, {
        key: "_report",
        value: function value(e) {
          var t = this,
            o = [],
            n = null;
          Ze(e) ? this._qualityItems.forEach(function (e) {
            null !== (n = t._getQualityItem(e)) && (n.reportIndex = t.reportIndex, n.wholePeriod = t.wholePeriod, o.push(n));
          }) : null !== (n = this._getQualityItem(e)) && (n.reportIndex = this.reportIndex, n.wholePeriod = this.wholePeriod, o.push(n)), we.debug("".concat(this._className, "._report"), o), this._statInfoArr.length > 0 && (o = o.concat(this._statInfoArr), this._statInfoArr = []);
          var a = this.getModule(uo),
            s = a.getSDKAppID(),
            r = a.getTinyID();
          Ut(this.REPORT_SDKAPPID_BLACKLIST, s) && !wt(this.REPORT_TINYID_WHITELIST, r) && (o = []), o.length > 0 && this._doReport(o);
        }
      }, {
        key: "_doReport",
        value: function value(e) {
          var o = this,
            n = {
              header: Hs(this),
              quality: e
            };
          this.request({
            protocolName: Vn,
            requestData: t({}, n)
          }).then(function () {
            o.reportIndex++, o.wholePeriod = !1;
          }).catch(function (t) {
            we.warn("".concat(o._className, "._doReport, online:").concat(o.getNetworkType(), " error:"), t), o._statInfoArr = o._statInfoArr.concat(e), o._flushAtOnce();
          });
        }
      }, {
        key: "_flushAtOnce",
        value: function value() {
          var e = this.getModule(lo),
            t = e.getItem(this.TAG, !1),
            o = this._statInfoArr;
          if (Vt(t)) we.log("".concat(this._className, "._flushAtOnce count:").concat(o.length)), e.setItem(this.TAG, o, !0, !1);else {
            var n = o.concat(t);
            n.length > 10 && (n = n.slice(0, 10)), we.log("".concat(this.className, "._flushAtOnce count:").concat(n.length)), e.setItem(this.TAG, n, !0, !1);
          }
          this._statInfoArr = [];
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._report(), this.reportIndex = 0, this.wholePeriod = !1, this.REPORT_SDKAPPID_BLACKLIST = [], this.REPORT_TINYID_WHITELIST = [], this._avgRTT.reset(), this._avgE2EDelay.reset(), this._rateMessageSent.reset(), this._rateMessageReceived.reset();
        }
      }]), a;
    }(Do),
    qr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "WorkerTimerModule", a._isWorkerEnabled = !0, a._workerTimer = null, a._init(), a.getInnerEmitterInstance().on(Xa, a._onCloudConfigUpdated, _(a)), a;
      }
      return s(o, [{
        key: "isWorkerEnabled",
        value: function value() {
          return this._isWorkerEnabled && Ee;
        }
      }, {
        key: "startWorkerTimer",
        value: function value() {
          we.log("".concat(this._className, ".startWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("start");
        }
      }, {
        key: "stopWorkerTimer",
        value: function value() {
          we.log("".concat(this._className, ".stopWorkerTimer")), this._workerTimer && this._workerTimer.postMessage("stop");
        }
      }, {
        key: "_init",
        value: function value() {
          if (Ee) {
            var e = URL.createObjectURL(new Blob(['let interval = -1;onmessage = function(event) {  if (event.data === "start") {    if (interval > 0) {      clearInterval(interval);    }    interval = setInterval(() => {      postMessage("");    }, 1000)  } else if (event.data === "stop") {    clearInterval(interval);    interval = -1;  }};'], {
              type: "application/javascript; charset=utf-8"
            }));
            this._workerTimer = new Worker(e);
            var t = this;
            this._workerTimer.onmessage = function () {
              t._moduleManager.onCheckTimer();
            };
          }
        }
      }, {
        key: "_onCloudConfigUpdated",
        value: function value() {
          var e = this.getCloudConfig("enable_worker");
          we.log("".concat(this._className, "._onCloudConfigUpdated enableWorker:").concat(e)), "1" === e ? !this._isWorkerEnabled && Ee && (this._isWorkerEnabled = !0, this.startWorkerTimer(), this._moduleManager.onWorkerTimerEnabled()) : this._isWorkerEnabled && Ee && (this._isWorkerEnabled = !1, this.stopWorkerTimer(), this._moduleManager.onWorkerTimerDisabled());
        }
      }, {
        key: "terminate",
        value: function value() {
          we.log("".concat(this._className, ".terminate")), this._workerTimer && (this._workerTimer.terminate(), this._workerTimer = null);
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset"));
        }
      }]), o;
    }(Do),
    Vr = function () {
      function e() {
        n(this, e), this._className = "PurchasedFeatureHandler", this._purchasedFeatureMap = new Map();
      }
      return s(e, [{
        key: "isValidPurchaseBits",
        value: function value(e) {
          return e && "string" == typeof e && e.length >= 1 && e.length <= 64 && /[01]{1,64}/.test(e);
        }
      }, {
        key: "parsePurchaseBits",
        value: function value(e) {
          var t = "".concat(this._className, ".parsePurchaseBits");
          if (this.isValidPurchaseBits(e)) {
            this._purchasedFeatureMap.clear();
            for (var o = Object.values(B), n = null, a = e.length - 1, s = 0; a >= 0; a--, s++) {
              n = s < 32 ? new L(0, Math.pow(2, s)).toString() : new L(Math.pow(2, s - 32), 0).toString(), -1 !== o.indexOf(n) && ("1" === e[a] ? this._purchasedFeatureMap.set(n, !0) : this._purchasedFeatureMap.set(n, !1));
            }
          } else we.warn("".concat(t, " invalid purchase bits:").concat(e));
        }
      }, {
        key: "hasPurchasedFeature",
        value: function value(e) {
          return !!this._purchasedFeatureMap.get(e);
        }
      }, {
        key: "clear",
        value: function value() {
          this._purchasedFeatureMap.clear();
        }
      }]), e;
    }(),
    Kr = function (e) {
      i(o, e);
      var t = f(o);
      function o(e) {
        var a;
        return n(this, o), (a = t.call(this, e))._className = "CommercialConfigModule", a._expiredTime = 0, a._isFetching = !1, a._purchasedFeatureHandler = new Vr(), a;
      }
      return s(o, [{
        key: "_canFetch",
        value: function value() {
          return this.isLoggedIn() ? !this._isFetching && Date.now() >= this._expiredTime : (this._expiredTime = Date.now() + 2e3, !1);
        }
      }, {
        key: "onCheckTimer",
        value: function value(e) {
          this._canFetch() && this.fetchConfig();
        }
      }, {
        key: "fetchConfig",
        value: function value() {
          var e = this,
            t = this._canFetch(),
            o = "".concat(this._className, ".fetchConfig");
          if (we.log("".concat(o, " canFetch:").concat(t)), t) {
            var n = new va(ya.FETCH_COMMERCIAL_CONFIG);
            n.setNetworkType(this.getNetworkType());
            var a = this.getModule(uo).getSDKAppID();
            this._isFetching = !0, this.request({
              protocolName: Jn,
              requestData: {
                SDKAppID: a
              }
            }).then(function (t) {
              n.setMessage("purchaseBits:".concat(t.data.purchaseBits)).end(), we.log("".concat(o, " ok.")), e._parseConfig(t.data), e._isFetching = !1;
            }).catch(function (t) {
              e.probeNetwork().then(function (e) {
                var o = m(e, 2),
                  a = o[0],
                  s = o[1];
                n.setError(t, a, s).end();
              }), e._isFetching = !1;
            });
          }
        }
      }, {
        key: "onPushedConfig",
        value: function value(e) {
          var t = "".concat(this._className, ".onPushedConfig");
          we.log("".concat(t)), new va(ya.PUSHED_COMMERCIAL_CONFIG).setNetworkType(this.getNetworkType()).setMessage("purchaseBits:".concat(e.purchaseBits)).end(), this._parseConfig(e);
        }
      }, {
        key: "_parseConfig",
        value: function value(e) {
          var t = "".concat(this._className, "._parseConfig"),
            o = e.errorCode,
            n = e.errorMessage,
            a = e.purchaseBits,
            s = e.expiredTime;
          0 === o ? (this._purchasedFeatureHandler.parsePurchaseBits(a), this._expiredTime = Date.now() + 1e3 * s) : Ze(o) ? (we.log("".concat(t, " failed. Invalid message format:"), e), this._setExpiredTimeOnResponseError(36e5)) : (we.error("".concat(t, " errorCode:").concat(o, " errorMessage:").concat(n)), this._setExpiredTimeOnResponseError(12e4));
        }
      }, {
        key: "_setExpiredTimeOnResponseError",
        value: function value(e) {
          this._expiredTime = Date.now() + e;
        }
      }, {
        key: "hasPurchasedFeature",
        value: function value(e) {
          return this._purchasedFeatureHandler.hasPurchasedFeature(e);
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), this._expiredTime = 0, this._isFetching = !1, this._purchasedFeatureHandler.clear();
        }
      }]), o;
    }(Do),
    Hr = function () {
      function e(t) {
        n(this, e);
        var o = new va(ya.SDK_CONSTRUCT);
        this._className = "ModuleManager", this._isReady = !1, this._reason = na.USER_NOT_LOGGED_IN, this._startLoginTs = 0, this._moduleMap = new Map(), this._innerEmitter = null, this._outerEmitter = null, this._checkCount = 0, this._checkTimer = -1, this._moduleMap.set(uo, new bs(this, t)), this._moduleMap.set(So, new Kr(this)), this._moduleMap.set(Io, new kr(this)), this._moduleMap.set(Eo, new qr(this)), this._moduleMap.set(Co, new Fr(this)), this._moduleMap.set(vo, new Tr(this)), this._moduleMap.set(Mo, new Rr(this)), this._moduleMap.set(eo, new Fs(this)), this._moduleMap.set(to, new or(this)), this._moduleMap.set(oo, new ws(this)), this._moduleMap.set(no, new $a(this)), this._moduleMap.set(co, new _s(this)), this._moduleMap.set(ao, new Ds(this)), this._moduleMap.set(ro, new As(this)), this._moduleMap.set(io, new ks(this)), this._moduleMap.set(lo, new Vs(this)), this._moduleMap.set(po, new Bs(this)), this._moduleMap.set(go, new js(this)), this._moduleMap.set(_o, new zs(this)), this._moduleMap.set(ho, new Xs(this)), this._moduleMap.set(fo, new nr(this)), this._moduleMap.set(mo, new ar(this)), this._moduleMap.set(yo, new Lr(this)), this._moduleMap.set(To, new Gr(this)), this._eventThrottleMap = new Map();
        var a = t.instanceID,
          s = t.oversea,
          r = t.SDKAppID,
          i = "instanceID:".concat(a, " SDKAppID:").concat(r, " host:").concat(Rt(), " oversea:").concat(s, " inBrowser:").concat(oe, " inMiniApp:").concat(te) + " workerAvailable:".concat(Ee, " UserAgent:").concat(se);
        va.bindEventStatModule(this._moduleMap.get(po)), o.setMessage("".concat(i, " ").concat(function () {
          var e = "";
          if (te) try {
            var t = ne.getSystemInfoSync(),
              o = t.model,
              n = t.version,
              a = t.system,
              s = t.platform,
              r = t.SDKVersion;
            e = "model:".concat(o, " version:").concat(n, " system:").concat(a, " platform:").concat(s, " SDKVersion:").concat(r);
          } catch (i) {
            e = "";
          }
          return e;
        }())).end(), we.info("SDK ".concat(i)), this._readyList = void 0, this._ssoLogForReady = null, this._initReadyList();
      }
      return s(e, [{
        key: "_startTimer",
        value: function value() {
          var e = this._moduleMap.get(Eo),
            t = e.isWorkerEnabled();
          we.log("".concat(this._className, ".startTimer isWorkerEnabled:").concat(t, " seed:").concat(this._checkTimer)), t ? e.startWorkerTimer() : this._startMainThreadTimer();
        }
      }, {
        key: "_startMainThreadTimer",
        value: function value() {
          we.log("".concat(this._className, "._startMainThreadTimer")), this._checkTimer < 0 && (this._checkTimer = setInterval(this.onCheckTimer.bind(this), 1e3));
        }
      }, {
        key: "stopTimer",
        value: function value() {
          var e = this._moduleMap.get(Eo),
            t = e.isWorkerEnabled();
          we.log("".concat(this._className, ".stopTimer isWorkerEnabled:").concat(t, " seed:").concat(this._checkTimer)), t ? e.stopWorkerTimer() : this._stopMainThreadTimer();
        }
      }, {
        key: "_stopMainThreadTimer",
        value: function value() {
          we.log("".concat(this._className, "._stopMainThreadTimer")), this._checkTimer > 0 && (clearInterval(this._checkTimer), this._checkTimer = -1, this._checkCount = 0);
        }
      }, {
        key: "_stopMainThreadSocket",
        value: function value() {
          we.log("".concat(this._className, "._stopMainThreadSocket"));
          var e = this._moduleMap.get(vo);
          e.setIsWorkerEnabled(!0), e.reConnect();
        }
      }, {
        key: "_startMainThreadSocket",
        value: function value() {
          we.log("".concat(this._className, "._startMainThreadSocket"));
          var e = this._moduleMap.get(vo);
          e.setIsWorkerEnabled(!1), e.reConnect();
        }
      }, {
        key: "onWorkerTimerEnabled",
        value: function value() {
          we.log("".concat(this._className, ".onWorkerTimerEnabled, disable main thread timer and socket")), this._stopMainThreadTimer(), this._stopMainThreadSocket();
        }
      }, {
        key: "onWorkerTimerDisabled",
        value: function value() {
          we.log("".concat(this._className, ".onWorkerTimerDisabled, enable main thread timer and socket")), this._startMainThreadTimer(), this._startMainThreadSocket();
        }
      }, {
        key: "onCheckTimer",
        value: function value() {
          this._checkCount += 1;
          var e,
            t = C(this._moduleMap);
          try {
            for (t.s(); !(e = t.n()).done;) {
              var o = m(e.value, 2)[1];
              o.onCheckTimer && o.onCheckTimer(this._checkCount);
            }
          } catch (n) {
            t.e(n);
          } finally {
            t.f();
          }
        }
      }, {
        key: "_initReadyList",
        value: function value() {
          var e = this;
          this._readyList = [this._moduleMap.get(eo), this._moduleMap.get(co)], this._readyList.forEach(function (t) {
            t.ready(function () {
              return e._onModuleReady();
            });
          });
        }
      }, {
        key: "_onModuleReady",
        value: function value() {
          var e = !0;
          if (this._readyList.forEach(function (t) {
            t.isReady() || (e = !1);
          }), e && !this._isReady) {
            this._isReady = !0, this._outerEmitter.emit(S.SDK_READY);
            var t = Date.now() - this._startLoginTs;
            we.warn("SDK is ready. cost ".concat(t, " ms")), this._startLoginTs = Date.now();
            var o = this._moduleMap.get(go).getNetworkType(),
              n = this._ssoLogForReady.getStartTs() + Oe;
            this._ssoLogForReady.setNetworkType(o).setMessage(t).start(n).end();
          }
        }
      }, {
        key: "login",
        value: function value() {
          0 === this._startLoginTs && (Le(), this._startLoginTs = Date.now(), this._startTimer(), this._moduleMap.get(go).start(), this._ssoLogForReady = new va(ya.SDK_READY), this._reason = na.LOGGING_IN);
        }
      }, {
        key: "onLoginFailed",
        value: function value() {
          this._startLoginTs = 0;
        }
      }, {
        key: "getOuterEmitterInstance",
        value: function value() {
          return null === this._outerEmitter && (this._outerEmitter = new $s(), Wa(this._outerEmitter), this._outerEmitter._emit = this._outerEmitter.emit, this._outerEmitter.emit = function (e, t) {
            var o = this;
            if (e === S.CONVERSATION_LIST_UPDATED || e === S.FRIEND_LIST_UPDATED || e === S.GROUP_LIST_UPDATED) {
              if (this._eventThrottleMap.has(e)) {
                var n = Date.now(),
                  a = this._eventThrottleMap.get(e);
                n - a.last < 1e3 ? (a.timeoutID && clearTimeout(a.timeoutID), a.timeoutID = setTimeout(function () {
                  a.last = n, o._outerEmitter._emit.apply(o._outerEmitter, [e, {
                    name: e,
                    data: o._getEventData(e)
                  }]);
                }, 500)) : (a.last = n, this._outerEmitter._emit.apply(this._outerEmitter, [e, {
                  name: e,
                  data: this._getEventData(e)
                }]));
              } else this._eventThrottleMap.set(e, {
                last: Date.now(),
                timeoutID: -1
              }), this._outerEmitter._emit.apply(this._outerEmitter, [e, {
                name: e,
                data: this._getEventData(e)
              }]);
            } else this._outerEmitter._emit.apply(this._outerEmitter, [e, {
              name: e,
              data: arguments[1]
            }]);
          }.bind(this)), this._outerEmitter;
        }
      }, {
        key: "_getEventData",
        value: function value(e) {
          return e === S.CONVERSATION_LIST_UPDATED ? this._moduleMap.get(co).getLocalConversationList() : e === S.FRIEND_LIST_UPDATED ? this._moduleMap.get(so).getLocalFriendList(!1) : e === S.GROUP_LIST_UPDATED ? this._moduleMap.get(ao).getLocalGroupList() : void 0;
        }
      }, {
        key: "getInnerEmitterInstance",
        value: function value() {
          return null === this._innerEmitter && (this._innerEmitter = new $s(), this._innerEmitter._emit = this._innerEmitter.emit, this._innerEmitter.emit = function (e, t) {
            var o;
            Xe(arguments[1]) && arguments[1].data ? (we.warn("inner eventData has data property, please check!"), o = [e, {
              name: arguments[0],
              data: arguments[1].data
            }]) : o = [e, {
              name: arguments[0],
              data: arguments[1]
            }], this._innerEmitter._emit.apply(this._innerEmitter, o);
          }.bind(this)), this._innerEmitter;
        }
      }, {
        key: "hasModule",
        value: function value(e) {
          return this._moduleMap.has(e);
        }
      }, {
        key: "getModule",
        value: function value(e) {
          return this._moduleMap.get(e);
        }
      }, {
        key: "isReady",
        value: function value() {
          return this._isReady;
        }
      }, {
        key: "getNotReadyReason",
        value: function value() {
          return this._reason;
        }
      }, {
        key: "setNotReadyReason",
        value: function value(e) {
          this._reason = e;
        }
      }, {
        key: "onError",
        value: function value(e) {
          we.warn("Oops! code:".concat(e.code, " message:").concat(e.message)), new va(ya.ERROR).setMessage("code:".concat(e.code, " message:").concat(e.message)).setNetworkType(this.getModule(go).getNetworkType()).setLevel("error").end(), this.getOuterEmitterInstance().emit(S.ERROR, e);
        }
      }, {
        key: "reset",
        value: function value() {
          we.log("".concat(this._className, ".reset")), Le();
          var e,
            t = C(this._moduleMap);
          try {
            for (t.s(); !(e = t.n()).done;) {
              var o = m(e.value, 2)[1];
              o.reset && o.reset();
            }
          } catch (r) {
            t.e(r);
          } finally {
            t.f();
          }
          this._startLoginTs = 0, this._initReadyList(), this._isReady = !1, this.stopTimer(), this._outerEmitter.emit(S.SDK_NOT_READY);
          var n,
            a = C(this._eventThrottleMap);
          try {
            for (a.s(); !(n = a.n()).done;) {
              var s = m(n.value, 2)[1];
              s.timeoutID && clearTimeout(s.timeoutID);
            }
          } catch (r) {
            a.e(r);
          } finally {
            a.f();
          }
          this._eventThrottleMap.clear();
        }
      }]), e;
    }(),
    Br = function () {
      function e() {
        n(this, e), this._funcMap = new Map();
      }
      return s(e, [{
        key: "defense",
        value: function value(e, t) {
          var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
          if ("string" != typeof e) return null;
          if (0 === e.length) return null;
          if ("function" != typeof t) return null;
          if (this._funcMap.has(e) && this._funcMap.get(e).has(t)) return this._funcMap.get(e).get(t);
          this._funcMap.has(e) || this._funcMap.set(e, new Map());
          var n = null;
          return this._funcMap.get(e).has(t) ? n = this._funcMap.get(e).get(t) : (n = this._pack(e, t, o), this._funcMap.get(e).set(t, n)), n;
        }
      }, {
        key: "defenseOnce",
        value: function value(e, t) {
          var o = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : void 0;
          return "function" != typeof t ? null : this._pack(e, t, o);
        }
      }, {
        key: "find",
        value: function value(e, t) {
          return "string" != typeof e || 0 === e.length || "function" != typeof t ? null : this._funcMap.has(e) ? this._funcMap.get(e).has(t) ? this._funcMap.get(e).get(t) : (we.log("SafetyCallback.find: 找不到 func —— ".concat(e, "/").concat("" !== t.name ? t.name : "[anonymous]")), null) : (we.log("SafetyCallback.find: 找不到 eventName-".concat(e, " 对应的 func")), null);
        }
      }, {
        key: "delete",
        value: function value(e, t) {
          return "function" == typeof t && !!this._funcMap.has(e) && !!this._funcMap.get(e).has(t) && (this._funcMap.get(e).delete(t), 0 === this._funcMap.get(e).size && this._funcMap.delete(e), !0);
        }
      }, {
        key: "_pack",
        value: function value(e, t, o) {
          return function () {
            try {
              t.apply(o, Array.from(arguments));
            } catch (r) {
              var n = Object.values(S).indexOf(e);
              if (-1 !== n) {
                var a = Object.keys(S)[n];
                we.warn("接入侧事件 TIM.EVENT.".concat(a, " 对应的回调函数逻辑存在问题，请检查！"), r);
              }
              var s = new va(ya.CALLBACK_FUNCTION_ERROR);
              s.setMessage("eventName:".concat(e)).setMoreMessage(r.message).end();
            }
          };
        }
      }]), e;
    }(),
    xr = function () {
      function e(t) {
        n(this, e);
        var o = {
          SDKAppID: t.SDKAppID,
          unlimitedAVChatRoom: t.unlimitedAVChatRoom || !1,
          scene: t.scene || "",
          oversea: t.oversea || !1,
          instanceID: Ot(),
          devMode: t.devMode || !1,
          proxyServer: t.proxyServer || void 0
        };
        this._moduleManager = new Hr(o), this._safetyCallbackFactory = new Br();
      }
      return s(e, [{
        key: "onError",
        value: function value(e) {
          this._moduleManager.onError(e);
        }
      }, {
        key: "login",
        value: function value(e) {
          return this._moduleManager.login(), this._moduleManager.getModule(eo).login(e);
        }
      }, {
        key: "logout",
        value: function value() {
          var e = this;
          return this._moduleManager.getModule(eo).logout().then(function (t) {
            return e._moduleManager.reset(), t;
          });
        }
      }, {
        key: "isReady",
        value: function value() {
          return this._moduleManager.isReady();
        }
      }, {
        key: "getNotReadyReason",
        value: function value() {
          return this._moduleManager.getNotReadyReason();
        }
      }, {
        key: "destroy",
        value: function value() {
          var e = this;
          return this.logout().finally(function () {
            e._moduleManager.stopTimer(), e._moduleManager.getModule(Eo).terminate(), e._moduleManager.getModule(vo).dealloc();
            var t = e._moduleManager.getOuterEmitterInstance(),
              o = e._moduleManager.getModule(uo);
            t.emit(S.SDK_DESTROY, {
              SDKAppID: o.getSDKAppID()
            });
          });
        }
      }, {
        key: "on",
        value: function value(e, t, o) {
          e === S.GROUP_SYSTEM_NOTICE_RECEIVED && we.warn("！！！TIM.EVENT.GROUP_SYSTEM_NOTICE_RECEIVED v2.6.0起弃用，为了更好的体验，请在 TIM.EVENT.MESSAGE_RECEIVED 事件回调内接收处理群系统通知，详细请参考：https://web.sdk.qcloud.com/im/doc/zh-cn/Message.html#.GroupSystemNoticePayload"), we.debug("on", "eventName:".concat(e)), this._moduleManager.getOuterEmitterInstance().on(e, this._safetyCallbackFactory.defense(e, t, o), o);
        }
      }, {
        key: "once",
        value: function value(e, t, o) {
          we.debug("once", "eventName:".concat(e)), this._moduleManager.getOuterEmitterInstance().once(e, this._safetyCallbackFactory.defenseOnce(e, t, o), o || this);
        }
      }, {
        key: "off",
        value: function value(e, t, o, n) {
          we.debug("off", "eventName:".concat(e));
          var a = this._safetyCallbackFactory.find(e, t);
          null !== a && (this._moduleManager.getOuterEmitterInstance().off(e, a, o, n), this._safetyCallbackFactory.delete(e, t));
        }
      }, {
        key: "registerPlugin",
        value: function value(e) {
          this._moduleManager.getModule(fo).registerPlugin(e);
        }
      }, {
        key: "setLogLevel",
        value: function value(e) {
          if (e <= 0) {
            console.log(["", " ________  ______  __       __  __       __  ________  _______", "|        \\|      \\|  \\     /  \\|  \\  _  |  \\|        \\|       \\", " \\$$$$$$$$ \\$$$$$$| $$\\   /  $$| $$ / \\ | $$| $$$$$$$$| $$$$$$$\\", "   | $$     | $$  | $$$\\ /  $$$| $$/  $\\| $$| $$__    | $$__/ $$", "   | $$     | $$  | $$$$\\  $$$$| $$  $$$\\ $$| $$  \\   | $$    $$", "   | $$     | $$  | $$\\$$ $$ $$| $$ $$\\$$\\$$| $$$$$   | $$$$$$$\\", "   | $$    _| $$_ | $$ \\$$$| $$| $$$$  \\$$$$| $$_____ | $$__/ $$", "   | $$   |   $$ \\| $$  \\$ | $$| $$$    \\$$$| $$     \\| $$    $$", "    \\$$    \\$$$$$$ \\$$      \\$$ \\$$      \\$$ \\$$$$$$$$ \\$$$$$$$", "", ""].join("\n")), console.log("%cIM 智能客服，随时随地解决您的问题 →_→ https://cloud.tencent.com/act/event/smarty-service?from=im-doc", "color:#006eff"), console.log("%c从v2.11.2起，SDK 支持了 WebSocket，小程序需要添加受信域名！升级指引: https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-02-upgradeguideline.html", "color:#ff0000");
            console.log(["", "参考以下文档，会更快解决问题哦！(#^.^#)\n", "SDK 更新日志: https://cloud.tencent.com/document/product/269/38492\n", "SDK 接口文档: https://web.sdk.qcloud.com/im/doc/zh-cn/SDK.html\n", "常见问题: https://web.sdk.qcloud.com/im/doc/zh-cn/tutorial-01-faq.html\n", "反馈问题？戳我提 issue: https://github.com/tencentyun/TIMSDK/issues\n", "如果您需要在生产环境关闭上面的日志，请 tim.setLogLevel(1)\n"].join("\n"));
          }
          we.setLevel(e);
        }
      }, {
        key: "createTextMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createTextMessage(e);
        }
      }, {
        key: "createTextAtMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createTextMessage(e);
        }
      }, {
        key: "createImageMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createImageMessage(e);
        }
      }, {
        key: "createAudioMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createAudioMessage(e);
        }
      }, {
        key: "createVideoMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createVideoMessage(e);
        }
      }, {
        key: "createCustomMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createCustomMessage(e);
        }
      }, {
        key: "createFaceMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createFaceMessage(e);
        }
      }, {
        key: "createFileMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createFileMessage(e);
        }
      }, {
        key: "createLocationMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createLocationMessage(e);
        }
      }, {
        key: "createMergerMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createMergerMessage(e);
        }
      }, {
        key: "downloadMergerMessage",
        value: function value(e) {
          return e.type !== D.MSG_MERGER ? ja(new Ba({
            code: na.MESSAGE_MERGER_TYPE_INVALID,
            message: aa.MESSAGE_MERGER_TYPE_INVALID
          })) : Vt(e.payload.downloadKey) ? ja(new Ba({
            code: na.MESSAGE_MERGER_KEY_INVALID,
            message: aa.MESSAGE_MERGER_KEY_INVALID
          })) : this._moduleManager.getModule(to).downloadMergerMessage(e).catch(function (e) {
            return ja(new Ba({
              code: na.MESSAGE_MERGER_DOWNLOAD_FAIL,
              message: aa.MESSAGE_MERGER_DOWNLOAD_FAIL
            }));
          });
        }
      }, {
        key: "createForwardMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).createForwardMessage(e);
        }
      }, {
        key: "sendMessage",
        value: function value(e, t) {
          return e instanceof wa ? this._moduleManager.getModule(to).sendMessageInstance(e, t) : ja(new Ba({
            code: na.MESSAGE_SEND_NEED_MESSAGE_INSTANCE,
            message: aa.MESSAGE_SEND_NEED_MESSAGE_INSTANCE
          }));
        }
      }, {
        key: "callExperimentalAPI",
        value: function value(e, t) {
          return "handleGroupInvitation" === e ? this._moduleManager.getModule(ao).handleGroupInvitation(t) : ja(new Ba({
            code: na.INVALID_OPERATION,
            message: aa.INVALID_OPERATION
          }));
        }
      }, {
        key: "revokeMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).revokeMessage(e);
        }
      }, {
        key: "resendMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).resendMessage(e);
        }
      }, {
        key: "deleteMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).deleteMessage(e);
        }
      }, {
        key: "modifyMessage",
        value: function value(e) {
          return this._moduleManager.getModule(to).modifyRemoteMessage(e);
        }
      }, {
        key: "getMessageList",
        value: function value(e) {
          return this._moduleManager.getModule(co).getMessageList(e);
        }
      }, {
        key: "getMessageListHopping",
        value: function value(e) {
          return this._moduleManager.getModule(co).getMessageListHopping(e);
        }
      }, {
        key: "sendMessageReadReceipt",
        value: function value(e) {
          return this._moduleManager.getModule(co).sendReadReceipt(e);
        }
      }, {
        key: "getMessageReadReceiptList",
        value: function value(e) {
          return this._moduleManager.getModule(co).getReadReceiptList(e);
        }
      }, {
        key: "getGroupMessageReadMemberList",
        value: function value(e) {
          return this._moduleManager.getModule(ao).getReadReceiptDetail(e);
        }
      }, {
        key: "findMessage",
        value: function value(e) {
          return this._moduleManager.getModule(co).findMessage(e);
        }
      }, {
        key: "setMessageRead",
        value: function value(e) {
          return this._moduleManager.getModule(co).setMessageRead(e);
        }
      }, {
        key: "getConversationList",
        value: function value(e) {
          return this._moduleManager.getModule(co).getConversationList(e);
        }
      }, {
        key: "getConversationProfile",
        value: function value(e) {
          return this._moduleManager.getModule(co).getConversationProfile(e);
        }
      }, {
        key: "deleteConversation",
        value: function value(e) {
          return this._moduleManager.getModule(co).deleteConversation(e);
        }
      }, {
        key: "pinConversation",
        value: function value(e) {
          return this._moduleManager.getModule(co).pinConversation(e);
        }
      }, {
        key: "setAllMessageRead",
        value: function value(e) {
          return this._moduleManager.getModule(co).setAllMessageRead(e);
        }
      }, {
        key: "setMessageRemindType",
        value: function value(e) {
          return this._moduleManager.getModule(co).setMessageRemindType(e);
        }
      }, {
        key: "getMyProfile",
        value: function value() {
          return this._moduleManager.getModule(oo).getMyProfile();
        }
      }, {
        key: "getUserProfile",
        value: function value(e) {
          return this._moduleManager.getModule(oo).getUserProfile(e);
        }
      }, {
        key: "updateMyProfile",
        value: function value(e) {
          return this._moduleManager.getModule(oo).updateMyProfile(e);
        }
      }, {
        key: "getBlacklist",
        value: function value() {
          return this._moduleManager.getModule(oo).getLocalBlacklist();
        }
      }, {
        key: "addToBlacklist",
        value: function value(e) {
          return this._moduleManager.getModule(oo).addBlacklist(e);
        }
      }, {
        key: "removeFromBlacklist",
        value: function value(e) {
          return this._moduleManager.getModule(oo).deleteBlacklist(e);
        }
      }, {
        key: "getFriendList",
        value: function value() {
          var e = this._moduleManager.getModule(so);
          return e ? e.getLocalFriendList() : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "addFriend",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.addFriend(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "deleteFriend",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.deleteFriend(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "checkFriend",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.checkFriend(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "getFriendProfile",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.getFriendProfile(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "updateFriend",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.updateFriend(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "getFriendApplicationList",
        value: function value() {
          var e = this._moduleManager.getModule(so);
          return e ? e.getLocalFriendApplicationList() : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "acceptFriendApplication",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.acceptFriendApplication(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "refuseFriendApplication",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.refuseFriendApplication(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "deleteFriendApplication",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.deleteFriendApplication(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "setFriendApplicationRead",
        value: function value() {
          var e = this._moduleManager.getModule(so);
          return e ? e.setFriendApplicationRead() : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "getFriendGroupList",
        value: function value() {
          var e = this._moduleManager.getModule(so);
          return e ? e.getLocalFriendGroupList() : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "createFriendGroup",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.createFriendGroup(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "deleteFriendGroup",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.deleteFriendGroup(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "addToFriendGroup",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.addToFriendGroup(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "removeFromFriendGroup",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.removeFromFriendGroup(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "renameFriendGroup",
        value: function value(e) {
          var t = this._moduleManager.getModule(so);
          return t ? t.renameFriendGroup(e) : ja({
            code: na.CANNOT_FIND_MODULE,
            message: aa.CANNOT_FIND_MODULE
          });
        }
      }, {
        key: "getGroupList",
        value: function value(e) {
          return this._moduleManager.getModule(ao).getGroupList(e);
        }
      }, {
        key: "getGroupProfile",
        value: function value(e) {
          return this._moduleManager.getModule(ao).getGroupProfile(e);
        }
      }, {
        key: "createGroup",
        value: function value(e) {
          return this._moduleManager.getModule(ao).createGroup(e);
        }
      }, {
        key: "dismissGroup",
        value: function value(e) {
          return this._moduleManager.getModule(ao).dismissGroup(e);
        }
      }, {
        key: "updateGroupProfile",
        value: function value(e) {
          return this._moduleManager.getModule(ao).updateGroupProfile(e);
        }
      }, {
        key: "joinGroup",
        value: function value(e) {
          return this._moduleManager.getModule(ao).joinGroup(e);
        }
      }, {
        key: "quitGroup",
        value: function value(e) {
          return this._moduleManager.getModule(ao).quitGroup(e);
        }
      }, {
        key: "searchGroupByID",
        value: function value(e) {
          return this._moduleManager.getModule(ao).searchGroupByID(e);
        }
      }, {
        key: "getGroupOnlineMemberCount",
        value: function value(e) {
          return this._moduleManager.getModule(ao).getGroupOnlineMemberCount(e);
        }
      }, {
        key: "changeGroupOwner",
        value: function value(e) {
          return this._moduleManager.getModule(ao).changeGroupOwner(e);
        }
      }, {
        key: "handleGroupApplication",
        value: function value(e) {
          return this._moduleManager.getModule(ao).handleGroupApplication(e);
        }
      }, {
        key: "initGroupAttributes",
        value: function value(e) {
          return this._moduleManager.getModule(ao).initGroupAttributes(e);
        }
      }, {
        key: "setGroupAttributes",
        value: function value(e) {
          return this._moduleManager.getModule(ao).setGroupAttributes(e);
        }
      }, {
        key: "deleteGroupAttributes",
        value: function value(e) {
          return this._moduleManager.getModule(ao).deleteGroupAttributes(e);
        }
      }, {
        key: "getGroupAttributes",
        value: function value(e) {
          return this._moduleManager.getModule(ao).getGroupAttributes(e);
        }
      }, {
        key: "getGroupMemberList",
        value: function value(e) {
          return this._moduleManager.getModule(ro).getGroupMemberList(e);
        }
      }, {
        key: "getGroupMemberProfile",
        value: function value(e) {
          return this._moduleManager.getModule(ro).getGroupMemberProfile(e);
        }
      }, {
        key: "addGroupMember",
        value: function value(e) {
          return this._moduleManager.getModule(ro).addGroupMember(e);
        }
      }, {
        key: "deleteGroupMember",
        value: function value(e) {
          return this._moduleManager.getModule(ro).deleteGroupMember(e);
        }
      }, {
        key: "setGroupMemberMuteTime",
        value: function value(e) {
          return this._moduleManager.getModule(ro).setGroupMemberMuteTime(e);
        }
      }, {
        key: "setGroupMemberRole",
        value: function value(e) {
          return this._moduleManager.getModule(ro).setGroupMemberRole(e);
        }
      }, {
        key: "setGroupMemberNameCard",
        value: function value(e) {
          return this._moduleManager.getModule(ro).setGroupMemberNameCard(e);
        }
      }, {
        key: "setGroupMemberCustomField",
        value: function value(e) {
          return this._moduleManager.getModule(ro).setGroupMemberCustomField(e);
        }
      }, {
        key: "getJoinedCommunityList",
        value: function value() {
          return this._moduleManager.getModule(io).getJoinedCommunityList();
        }
      }, {
        key: "createTopicInCommunity",
        value: function value(e) {
          return this._moduleManager.getModule(io).createTopicInCommunity(e);
        }
      }, {
        key: "deleteTopicFromCommunity",
        value: function value(e) {
          return this._moduleManager.getModule(io).deleteTopicFromCommunity(e);
        }
      }, {
        key: "updateTopicProfile",
        value: function value(e) {
          return this._moduleManager.getModule(io).updateTopicProfile(e);
        }
      }, {
        key: "getTopicList",
        value: function value(e) {
          return this._moduleManager.getModule(io).getTopicList(e);
        }
      }]), e;
    }(),
    Wr = {
      login: "login",
      logout: "logout",
      destroy: "destroy",
      on: "on",
      off: "off",
      ready: "ready",
      setLogLevel: "setLogLevel",
      joinGroup: "joinGroup",
      quitGroup: "quitGroup",
      registerPlugin: "registerPlugin",
      getGroupOnlineMemberCount: "getGroupOnlineMemberCount"
    };
  function Yr(e, t) {
    if (e.isReady() || void 0 !== Wr[t]) return !0;
    var o = e.getNotReadyReason(),
      n = "";
    Object.getOwnPropertyNames(na).forEach(function (e) {
      na[e] === o && (n = aa[e]);
    });
    var a = {
      code: o,
      message: "".concat(n, "导致 sdk not ready。").concat(t, " ").concat(aa.SDK_IS_NOT_READY, "，请参考 https://web.sdk.qcloud.com/im/doc/zh-cn/module-EVENT.html#.SDK_READY")
    };
    return e.onError(a), a;
  }
  var jr = {},
    $r = {};
  return $r.create = function (e) {
    var o = 0;
    if ($e(e.SDKAppID)) o = e.SDKAppID;else if (we.warn("TIM.create SDKAppID 的类型应该为 Number，请修改！"), o = parseInt(e.SDKAppID), isNaN(o)) return we.error("TIM.create failed. 解析 SDKAppID 失败，请检查传参！"), null;
    if (o && jr[o]) return jr[o];
    we.log("TIM.create");
    var n = new xr(t(t({}, e), {}, {
      SDKAppID: o
    }));
    n.on(S.SDK_DESTROY, function (e) {
      jr[e.data.SDKAppID] = null, delete jr[e.data.SDKAppID];
    });
    var a = function (e) {
      var t = Object.create(null);
      return Object.keys(Zt).forEach(function (o) {
        if (e[o]) {
          var n = Zt[o],
            a = new N();
          t[n] = function () {
            var t = Array.from(arguments);
            return a.use(function (t, n) {
              var a = Yr(e, o);
              return !0 === a ? n() : ja(a);
            }).use(function (e, t) {
              if (!0 === Kt(e, Qt[o], n)) return t();
            }).use(function (t, n) {
              return e[o].apply(e, t);
            }), a.run(t);
          };
        }
      }), t;
    }(n);
    return jr[o] = a, we.log("TIM.create ok"), a;
  }, $r.TYPES = D, $r.EVENT = S, $r.VERSION = "2.20.0", we.log("TIM.VERSION: ".concat($r.VERSION)), $r;
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../Applications/HBuilderX.app/Contents/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 3), __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/wx.js */ 1)["default"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 37:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    if(typeof renderjs.beforeCreate === 'function'){
			renderjs.beforeCreate = [renderjs.beforeCreate]
		}
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),

/***/ 38:
/*!**********************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/store/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 11));
var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 25));
var _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 33));
var _baseApi = _interopRequireDefault(__webpack_require__(/*! ./baseApi.js */ 39));
var _chat = _interopRequireDefault(__webpack_require__(/*! ./chat.js */ 42));
var _api = _interopRequireDefault(__webpack_require__(/*! ./api.js */ 43));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
_vue.default.use(_vuex.default);
var state = {
  isLogin: false,
  //判断是否登录
  token: null,
  //用户登录token
  user: null,
  //  用户信息
  navHeight: 50,
  // 顶部导航栏高度
  navTop: 0,
  //状态栏高度
  windowHeight: 0,
  // 窗口高度
  menuButtonObject: 0,
  // 小程序右上角胶南信息
  safeAreaBottom: 0,
  // 手机底部安全距离
  axis: null,
  //当前用户定位坐标信息
  customAxis: null,
  //自定义位置
  isSDKReady: false,
  //im是否初始化成功
  unreadNum: 0,
  //未读消息数量
  currentLocation: null //当前定位城市
};

var mutations = {
  setToken: function setToken(state, token) {
    return state.token = token;
  },
  setisLogin: function setisLogin(state, isLogin) {
    return state.isLogin = isLogin;
  },
  setUser: function setUser(state, data) {
    return state.user = data;
  },
  setAxis: function setAxis(state, data) {
    return state.axis = data;
  },
  setcustomAxis: function setcustomAxis(state, data) {
    return state.customAxis = data;
  },
  setcurrentLocation: function setcurrentLocation(state, data) {
    return state.currentLocation = data;
  },
  setNavHeight: function setNavHeight(state, data) {
    return state.navHeight = data;
  },
  setNavTop: function setNavTop(state, data) {
    return state.navTop = data;
  },
  setWindowHeight: function setWindowHeight(state, data) {
    return state.windowHeight = data;
  },
  setMenuButtonObject: function setMenuButtonObject(state, data) {
    return state.menuButtonObject = data;
  },
  setSafeAreaBottom: function setSafeAreaBottom(state, data) {
    return state.safeAreaBottom = data;
  },
  setIsSDKReady: function setIsSDKReady(state, data) {
    return state.isSDKReady = data;
  },
  setUnreadNum: function setUnreadNum(state, data) {
    return state.unreadNum = data;
  }
};
var getters = {
  getToken: function getToken(state) {
    return state.token;
  },
  getUser: function getUser(state) {
    return state.user;
  },
  // 获取用户信息
  getAxis: function getAxis(state) {
    return state.axis;
  },
  // 获取用户信息
  customAxis: function customAxis(state) {
    return state.customAxis;
  },
  // 获取用户信息
  getIsLogin: function getIsLogin(state) {
    return state.isLogin;
  },
  currentLocation: function currentLocation(state) {
    return state.currentLocation;
  },
  getNavHeight: function getNavHeight(state) {
    return state.navHeight;
  },
  getNavTop: function getNavTop(state) {
    return state.navTop;
  },
  getWindowHeight: function getWindowHeight(state) {
    return state.windowHeight;
  },
  getMenuButtonObject: function getMenuButtonObject(state) {
    return state.menuButtonObject;
  },
  getSafeAreaBottom: function getSafeAreaBottom(state) {
    return state.safeAreaBottom;
  },
  isSDKReady: function isSDKReady(state) {
    return state.isSDKReady;
  },
  unreadNum: function unreadNum(state) {
    return state.unreadNum;
  }
};
var actions = _objectSpread(_objectSpread(_objectSpread({}, _baseApi.default), _chat.default), _api.default);
var store = new _vuex.default.Store({
  state: state,
  mutations: mutations,
  getters: getters,
  actions: actions
});
var _default = store;
exports.default = _default;

/***/ }),

/***/ 39:
/*!************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/store/baseApi.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _httpRequest = _interopRequireDefault(__webpack_require__(/*! @/utils/httpRequest.js */ 40));
var _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 38));
var baseApi = {
  /**
   * 查询手机号
   */
  selWxPhone: function selWxPhone(context, data) {
    return _httpRequest.default.request('/api-business-user-code/user/info/selWxPhone', 'GET');
  },
  /**
   * 绑定手机号
   */
  bindMobileNumber: function bindMobileNumber(context, data) {
    return _httpRequest.default.request('/api-business-user-code/user/info/bindMobileNumber', 'GET', data);
  },
  /**
   * 根据字典编码获取字典值列表
   */
  byDictCode: function byDictCode(context, data) {
    return _httpRequest.default.request('/api-sys/sys/sysDictvalue/byDictCode', 'GET', data);
  },
  /**
   * 验证token是否合法以及过期
   */
  verificationToken: function verificationToken(context, data) {
    return _httpRequest.default.request('/api-auth/signIn/verifyToken', 'GET', data);
  },
  /**
   * login获取token
   */
  authLogin: function authLogin(context, data) {
    return _httpRequest.default.request('/api-auth/signIn/getWxToken', 'POST', data);
  },
  /**
   * 文件上传,直接上传到硬盘,返回的是附件对象
   */
  uploadFileToDisk: function uploadFileToDisk() {
    return '/api-file-uploader/file/uploadFileToDisk';
  },
  /**
   * 删除附件
   */
  deleteFile: function deleteFile(context, data) {
    return _httpRequest.default.request("/api-file-uploader/".concat(data.operationId, "/").concat(data.operationCode), 'DELETE');
  },
  /**
   * 获取im userSig
   */
  getUserSig: function getUserSig(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/getUserSig", 'GET');
  },
  /**
   * 根据坐标获取距离
   */
  getDistance: function getDistance(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/getDistance", 'GET', data, false, true, true);
  },
  /**
   * 获取用户钱包
   */
  getWallet: function getWallet(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/wallet", 'GET');
  },
  /**
   * 获取用户绑定的银行卡号和姓名
   */
  getWithdrawalAccount: function getWithdrawalAccount(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/wallet/getWithdrawalAccount", 'GET');
  },
  /**
   * 设置银行卡提现帐号
   */
  setWithdrawalAccount: function setWithdrawalAccount(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/wallet/setWithdrawalAccount", 'POST', data, false, true, true);
  },
  /**
   * 提现
   */
  transfer: function transfer(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/wallet/transfer", 'GET', data);
  },
  /**
   * 高级查询获取余额变动记录列表
   */
  getSeniorList: function getSeniorList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/balance/changeRecord/getSeniorList", 'POST', data, false, true, true);
  }
};
var _default = baseApi;
exports.default = _default;

/***/ }),

/***/ 392:
/*!***************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/components/tui-icon/tui-icon.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  "about": "\uE772",
  "about-fill": "\uE771",
  "add": "\uE770",
  "add-fill": "\uE76F",
  "addmessage": "\uE76E",
  "addressbook": "\uE76D",
  "agree": "\uE76C",
  "agree-fill": "\uE76B",
  "alarm": "\uE76A",
  "alarm-fill": "\uE769",
  "alipay": "\uE768",
  "android": "\uE767",
  "applets": "\uE766",
  "arrowdown": "\uE765",
  "arrowleft": "\uE764",
  "arrowright": "\uE763",
  "arrowup": "\uE762",
  "attestation": "\uE761",
  "back": "\uE760",
  "bag": "\uE75F",
  "bag-fill": "\uE75E",
  "balloon": "\uE75D",
  "bankcard": "\uE75C",
  "bankcard-fill": "\uE75B",
  "bottom": "\uE75A",
  "calendar": "\uE759",
  "camera": "\uE758",
  "camera-fill": "\uE757",
  "camera-add": "\uE756",
  "card": "\uE755",
  "card-fill": "\uE754",
  "cart": "\uE753",
  "cart-fill": "\uE752",
  "category": "\uE751",
  "category-fill": "\uE750",
  "check": "\uE74F",
  "circle": "\uE74E",
  "circle-fill": "\uE74D",
  "circle-selected": "\uE74C",
  "clock": "\uE74B",
  "clock-fill": "\uE74A",
  "close": "\uE749",
  "close-fill": "\uE748",
  "community": "\uE747",
  "community-fill": "\uE746",
  "computer": "\uE745",
  "computer-fill": "\uE744",
  "coupon": "\uE743",
  "delete": "\uE742",
  "deletekey": "\uE741",
  "dingtalk": "\uE740",
  "dissatisfied": "\uE73F",
  "down": "\uE73E",
  "download": "\uE73D",
  "edit": "\uE73C",
  "ellipsis": "\uE73B",
  "enlarge": "\uE73A",
  "evaluate": "\uE739",
  "exchange": "\uE738",
  "explain": "\uE737",
  "explain-fill": "\uE736",
  "explore": "\uE735",
  "explore-fill": "\uE734",
  "eye": "\uE733",
  "feedback": "\uE732",
  "fingerprint": "\uE730",
  "friendadd": "\uE72F",
  "friendadd-fill": "\uE72E",
  "gps": "\uE72D",
  "histogram": "\uE72C",
  "home": "\uE72B",
  "home-fill": "\uE72A",
  "house": "\uE729",
  "imface": "\uE728",
  "imkeyboard": "\uE727",
  "immore": "\uE726",
  "imvoice": "\uE725",
  "ios": "\uE724",
  "kefu": "\uE723",
  "label": "\uE722",
  "label-fill": "\uE721",
  "like": "\uE720",
  "like-fill": "\uE71F",
  "link": "\uE71E",
  "listview": "\uE71D",
  "loading": "\uE71C",
  "location": "\uE71B",
  "mail": "\uE71A",
  "mail-fill": "\uE719",
  "manage": "\uE718",
  "manage-fill": "\uE717",
  "member": "\uE716",
  "member-fill": "\uE715",
  "message": "\uE714",
  "message-fill": "\uE713",
  "mobile": "\uE712",
  "moments": "\uE711",
  "more": "\uE710",
  "more-fill": "\uE70F",
  "narrow": "\uE70E",
  "news": "\uE70D",
  "news-fill": "\uE70C",
  "nodata": "\uE70B",
  "notice": "\uE699",
  "notice-fill": "\uE698",
  "offline": "\uE697",
  "offline-fill": "\uE696",
  "oppose": "\uE695",
  "oppose-fill": "\uE694",
  "order": "\uE693",
  "partake": "\uE692",
  "people": "\uE691",
  "people-fill": "\uE690",
  "pic": "\uE68F",
  "pic-fill": "\uE68E",
  "picture": "\uE68D",
  "pie": "\uE68C",
  "plus": "\uE689",
  "polygonal": "\uE688",
  "position": "\uE686",
  "pwd": "\uE685",
  "qq": "\uE684",
  "qrcode": "\uE682",
  "redpacket": "\uE681",
  "redpacket-fill": "\uE680",
  "reduce": "\uE67F",
  "refresh": "\uE67E",
  "revoke": "\uE67D",
  "satisfied": "\uE67C",
  "screen": "\uE67B",
  "search": "\uE67A",
  "search-2": "\uE679",
  "send": "\uE678",
  "service": "\uE677",
  "service-fill": "\uE676",
  "setup": "\uE675",
  "setup-fill": "\uE674",
  "share": "\uE673",
  "share-fill": "\uE672",
  "shield": "\uE671",
  "shop": "\uE670",
  "shop-fill": "\uE66F",
  "shut": "\uE66E",
  "signin": "\uE66D",
  "sina": "\uE66C",
  "skin": "\uE66B",
  "soso": "\uE669",
  "square": "\uE668",
  "square-fill": "\uE667",
  "square-selected": "\uE666",
  "star": "\uE665",
  "star-fill": "\uE664",
  "strategy": "\uE663",
  "sweep": "\uE662",
  "time": "\uE661",
  "time-fill": "\uE660",
  "todown": "\uE65F",
  "toleft": "\uE65E",
  "tool": "\uE65D",
  "top": "\uE65C",
  "toright": "\uE65B",
  "towardsleft": "\uE65A",
  "towardsright": "\uE659",
  "towardsright-fill": "\uE658",
  "transport": "\uE657",
  "transport-fill": "\uE656",
  "turningdown": "\uE654",
  "turningleft": "\uE653",
  "turningright": "\uE652",
  "turningup": "\uE651",
  "unreceive": "\uE650",
  "seen": "\uE7D2",
  "unseen": "\uE7D1",
  "up": "\uE64E",
  "upload": "\uE64C",
  "video": "\uE64B",
  "voice": "\uE649",
  "voice-fill": "\uE648",
  "voipphone": "\uE647",
  "wallet": "\uE646",
  "warning": "\uE645",
  "wealth": "\uE644",
  "wealth-fill": "\uE643",
  "weather": "\uE642",
  "wechat": "\uE641",
  "wifi": "\uE640",
  "play": "\uE7D5",
  "suspend": "\uE7D4"
};
exports.default = _default;

/***/ }),

/***/ 4:
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 40:
/*!****************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/utils/httpRequest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ 30));
var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ 32));
var _index = _interopRequireDefault(__webpack_require__(/*! ../config/index.js */ 41));
var _index2 = _interopRequireDefault(__webpack_require__(/*! @/store/index.js */ 38));
/**
 * 常用方法封装 请求，文件上传等
 * @author echo. 
 **/

var tui = {
  //接口地址
  interfaceUrl: function interfaceUrl() {
    return _index.default.api;
  },
  toast: function toast(text, duration, success) {
    uni.showToast({
      duration: duration || 2000,
      title: text || "出错啦~",
      icon: success ? 'success' : 'none'
    });
  },
  modal: function modal(title, content, showCancel, callback, confirmColor, confirmText) {
    uni.showModal({
      title: title || '提示',
      content: content,
      showCancel: showCancel,
      cancelColor: "#555",
      confirmColor: confirmColor || "#5677fc",
      confirmText: confirmText || "确定",
      success: function success(res) {
        if (res.confirm) {
          callback && callback(true);
        } else {
          callback && callback(false);
        }
      }
    });
  },
  isAndroid: function isAndroid() {
    var res = uni.getSystemInfoSync();
    return res.platform.toLocaleLowerCase() == "android";
  },
  isPhoneX: function isPhoneX() {
    var res = uni.getSystemInfoSync();
    var iphonex = false;
    var models = ['iphonex', 'iphonexr', 'iphonexsmax', 'iphone11', 'iphone11pro', 'iphone11promax'];
    var model = res.model.replace(/\s/g, "").toLowerCase();
    if (models.includes(model)) {
      iphonex = true;
    }
    return iphonex;
  },
  constNum: function constNum() {
    var time = 0;
    return time;
  },
  delayed: null,
  loadding: false,
  showLoading: function showLoading(title) {
    var mask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    uni.showLoading({
      mask: mask,
      title: title || '请稍候...'
    });
  },
  /**
   * 请求数据处理
   * @param string url 请求地址
   * @param string method 请求方式
   *  GET or POST
   * @param {*} postData 请求参数
   * @param bool isDelay 是否延迟显示loading
   * @param bool isForm 数据格式
   *  true: 'application/x-www-form-urlencoded'
   *  false:'application/json'
   * @param bool hideLoading 是否隐藏loading
   *  true: 隐藏
   *  false:显示
   */
  request: function () {
    var _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(url, method, postData, isDelay, isForm, hideLoading) {
      var headers;
      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              //接口请求
              tui.loadding && uni.hideLoading();
              tui.loadding = false;
              if (hideLoading) {
                tui.loadding = true;
                tui.showLoading();
              }
              headers = {
                'Content-Type': 'application/x-www-form-urlencoded'
              };
              if (isForm) {
                Object.assign(headers, {
                  'Content-Type': 'application/json'
                });
              }
              if (tui.getToken()) {
                Object.assign(headers, {
                  token: tui.getToken()
                });
              }
              return _context.abrupt("return", new Promise(function (resolve, reject) {
                uni.request({
                  url: tui.interfaceUrl() + url,
                  data: postData,
                  header: headers,
                  method: method || "POST",
                  //'GET','POST'
                  // dataType: 'json',
                  success: function success(res) {
                    clearTimeout(tui.delayed);
                    tui.delayed = null;
                    if (tui.loadding && hideLoading) {
                      uni.hideLoading();
                    }
                    if (res.data.code == 200) {
                      resolve(res.data);
                    } else if (res.data.code == 401 || res.data.code == 405) {
                      // token过期或被串改
                      uni.removeStorageSync('zhimiao_token');
                      uni.removeStorageSync('zhimiao_user');
                      uni.removeStorageSync('userSig');
                      _index2.default.commit('setToken', null);
                      _index2.default.commit('setUser', null);
                      uni.reLaunch({
                        url: '/pages/main'
                      });
                    } else {
                      reject(res.data);
                    }
                  },
                  fail: function fail(res) {
                    clearTimeout(tui.delayed);
                    tui.delayed = null;
                    console.log(tui.interfaceUrl() + url);
                    tui.toast("网络不给力，请稍后再试~");
                    reject(res);
                  }
                });
              }));
            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    function request(_x, _x2, _x3, _x4, _x5, _x6) {
      return _request.apply(this, arguments);
    }
    return request;
  }(),
  /**
   * 上传文件
   * @param string url 请求地址
   * @param string src 文件路径
   */
  uploadFile: function uploadFile(url, src, formData) {
    tui.showLoading();
    return new Promise(function (resolve, reject) {
      console.log(url);
      var uploadTask = uni.uploadFile({
        url: tui.interfaceUrl() + url,
        filePath: src,
        name: 'upfile',
        header: {
          'token': tui.getToken()
        },
        formData: formData,
        success: function success(res) {
          uni.hideLoading();
          var d = JSON.parse(res.data.replace(/\ufeff/g, "") || "{}");
          if (d.code % 100 == 0) {
            //返回图片地址
            var fileObj = d.data;
            resolve(fileObj);
          } else {
            tui.toast(res.msg);
          }
        },
        fail: function fail(res) {
          reject(res);
          tui.toast(res.msg);
        }
      });
    });
  },
  tuiJsonp: function tuiJsonp(url, callback, callbackname) {},
  //设置用户信息
  setUserInfo: function setUserInfo(mobile, token) {
    //uni.setStorageSync("thorui_token", token)
    uni.setStorageSync("zhimiao_mobile", mobile);
  },
  //获取token
  getToken: function getToken() {
    return uni.getStorageSync("zhimiao_token");
  },
  //获取当前用户信息
  getUser: function getUser() {
    var user = uni.getStorageSync("zhimiao_user");
    if (user) {
      return JSON.parse(user);
    }
    return null;
  },
  // 设置缓存值
  setStorage: function setStorage(key, data) {
    uni.setStorageSync(key, JSON.stringify(data));
  },
  // 获取缓存值
  getStorage: function getStorage(key) {
    var data = uni.getStorageSync(key);
    if (data) {
      return JSON.parse(data);
    } else {
      return null;
    }
  },
  //判断是否登录
  isLogin: function isLogin() {
    if (uni.getStorageSync("zhimiao_token") && uni.getStorageSync("zhimiao_user")) {
      return true;
    }
    return false;
  },
  //跳转页面，校验登录状态
  href: function href(url, isVerify) {
    if (isVerify && !tui.isLogin()) {
      uni.navigateTo({
        url: '/pagesA/login/login'
      });
    } else {
      uni.navigateTo({
        url: url
      });
    }
  }
};
var _default = tui;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 41:
/*!***********************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/config/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 11));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var config;
config = {
  development: {
    // api: 'http://47.109.37.1:8762',
    api: 'https://zm.zgzhm.com',
    imgUrl: 'https://zm.zgzhm.com/mini/img'
  },
  production: {
    api: 'https://zm.zgzhm.com',
    imgUrl: 'https://zm.zgzhm.com/mini/img'
  }
};
console.log("development");
var _default = _objectSpread({
  ENV: "development"
}, config["development"]);
exports.default = _default;

/***/ }),

/***/ 42:
/*!*********************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/store/chat.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 11));
var _httpRequest = _interopRequireDefault(__webpack_require__(/*! @/utils/httpRequest.js */ 40));
var _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 38));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var chatApi = {
  /**
   * 消息发送
   */
  sendMessage: function sendMessage(context, data) {
    return _httpRequest.default.request("/api-business-user-code/im/messageSending/sendMessage/".concat(data.imSingleChatSessionId), 'POST', _objectSpread({}, data.msgBody), false, true);
  },
  /**
   * 新建im单聊会话
   */
  createSingleChatSession: function createSingleChatSession(context, data) {
    return _httpRequest.default.request("/api-business-user-code/im/singleChatSession/insert/".concat(data.demandRegistrationId), 'GET');
  },
  /**
   * 通过聊天id获取单聊会话
   */
  selectByPrimaryKey: function selectByPrimaryKey(context, data) {
    return _httpRequest.default.request("/api-business-user-code/im/singleChatSession/selectByPrimaryKey", 'GET', data, false, true);
  },
  /**
   * 是否有回复
   */
  getIsThereAnyReply: function getIsThereAnyReply(context, data) {
    return _httpRequest.default.request("/api-business-user-code/im/messageSending/getIsThereAnyReply", 'GET', data, false, true);
  },
  /**
   * 获取会话列表
   */
  selCommunicationList: function selCommunicationList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/im/singleChatSession/selCommunicationList", 'GET', data, false, true);
  },
  /**
   * 申请接单
   */
  requestReceipt: function requestReceipt(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/undertaking/requestReceipt", 'GET', data);
  },
  /**
   * 发起人邀请接单
   */
  invitationToReceiveOrders: function invitationToReceiveOrders(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/invitationRecord/invitationToReceiveOrders", 'GET', data);
  },
  /**
   * 需求同意或拒绝 发起人同意承接人申请接单
   */
  receiptApproval: function receiptApproval(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/receiptApproval", 'GET', data);
  },
  /**
   * 需求同意或拒绝 承接人同意发起人邀请接单
   */
  declineTheInvitation: function declineTheInvitation(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/invitationRecord/declineTheInvitation", 'GET', data);
  },
  /**
   * 更换会话需求
   */
  replacementRequirements: function replacementRequirements(context, data) {
    return _httpRequest.default.request("/api-business-user-code/im/singleChatSession/replacementRequirements", 'GET', data);
  },
  /**
   * 发起支付
   */
  sendPayment: function sendPayment(context, data) {
    return _httpRequest.default.request("/api-business-user-code/payment/record", 'GET', data);
  },
  /**
   * 查询支付
   */
  queryPayment: function queryPayment(context, data) {
    return _httpRequest.default.request("/api-business-user-code/payment/record/selPay", 'GET', data);
  }
};
var _default = chatApi;
exports.default = _default;

/***/ }),

/***/ 43:
/*!********************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/store/api.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _httpRequest = _interopRequireDefault(__webpack_require__(/*! @/utils/httpRequest.js */ 40));
var _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 38));
var api = {
  /**
   * 获取服务协议
   */
  getServiceAgreement: function getServiceAgreement(context, data) {
    return _httpRequest.default.request("/api-business-user-code/service/agreement/getServiceAgreement/".concat(data.type), 'GET');
  },
  /**
   * 修改名称和头像
   */
  updNameAndPortrait: function updNameAndPortrait(context, data) {
    return _httpRequest.default.request('/api-business-user-code/user/info/updNameAndPortrait', 'GET', data);
  },
  /**
   * 获取当前用户信息
   */
  getCurrentLogonInformation: function getCurrentLogonInformation(context, data) {
    return _httpRequest.default.request('/api-business-user-code/user/info/getCurrentLogonInformation', 'GET').then(function (res) {
      if (res.code == 200) {
        uni.setStorageSync('zhimiao_user', JSON.stringify(res.data));
        _store.default.commit('setUser', res.data);
        if (_httpRequest.default.isLogin()) {
          _store.default.commit('setisLogin', true);
        }
      }
      return res;
    }).catch(function (err) {
      console.log(err, '--------');
    });
  },
  /**
   * 获取登录用户信息数值
   */
  getUserInformationQuantity: function getUserInformationQuantity(context, data) {
    return _httpRequest.default.request('/api-business-user-code/user/info/getUserInformationQuantity', 'GET');
  },
  /**
   * 完善个人资料
   */
  improvePersonalData: function improvePersonalData(context, data) {
    return _httpRequest.default.request('/api-business-user-code/user/info/improvePersonalData', 'POST', data, false, true);
  },
  /**
   * 添加职业标签
   */
  occupationLabel: function occupationLabel(context, data) {
    return _httpRequest.default.request('/api-business-user-code/occupation/label', 'POST', data, false, true);
  },
  /**
   * 获取当前登录人的职业标签
   */
  getUserOccupationLabel: function getUserOccupationLabel(context, data) {
    return _httpRequest.default.request('/api-business-user-code/occupation/label/getUserOccupationLabel', 'POST', data, false, true);
  },
  /**
   * 删除职业标签
   */
  deleteLabel: function deleteLabel(context, data) {
    return _httpRequest.default.request("/api-business-user-code/occupation/label/".concat(data.id), 'DELETE');
  },
  /**
   * 添加需求登记
   */
  registrationDemand: function registrationDemand(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration", 'POST', data, false, true);
  },
  /**
   * 删除需求
   */
  delUserDemandRegistration: function delUserDemandRegistration(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/delUserDemandRegistration", 'DELETE', data);
  },
  /**
   * 获取轮播图列表
   */
  getRotationChartList: function getRotationChartList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/rotation/chart/getRotationChartList", 'GET', data);
  },
  /**
   * 查询我的首页推荐
   */
  getMyHomeRecommendationList: function getMyHomeRecommendationList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/getMyHomeRecommendationList", 'GET', data, false, true);
  },
  /**
   * 获取最新需求
   */
  getNewestList: function getNewestList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/getNewestList", 'GET', data, false, true);
  },
  /**
   * 获取需求登记
   */
  getDemandDatels: function getDemandDatels(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/selectByPrimaryKey/".concat(data.id), 'GET', data, false, false);
  },
  /**
   * 获取用户信息
   */
  getUserInfo: function getUserInfo(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/selectByPrimaryKey/".concat(data.id), 'GET');
  },
  /**
   * 我发布的需求
   */
  getMyPublishedRequirements: function getMyPublishedRequirements(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/getMyPublishedRequirements", 'GET', data);
  },
  /**
   * 我承接的需求
   */
  getDemandUndertakingList: function getDemandUndertakingList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/undertaking/getDemandUndertakingList", 'GET', data);
  },
  /**
   * 获取用户已完成承接或发布需求
   */
  getCompletedAcceptanceReleaseRequirements: function getCompletedAcceptanceReleaseRequirements(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/getCompletedAcceptanceReleaseRequirements", 'GET', data);
  },
  /**
   * 查询用户发布的需求
   */
  getUserPublishedRequirements: function getUserPublishedRequirements(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/getUserPublishedRequirements", 'GET', data);
  },
  /**
   * 用户承接的需求
   */
  getRequirementsUndertakenByUsersList: function getRequirementsUndertakenByUsersList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/undertaking/getRequirementsUndertakenByUsersList", 'GET', data);
  },
  /**
   * 关注
   */
  getFollow: function getFollow(context, data) {
    return _httpRequest.default.request("/api-business-user-code/what/iAreAbout/follow", 'GET', data);
  },
  /**
   * 取消关注
   */
  cancelAttention: function cancelAttention(context, data) {
    return _httpRequest.default.request("/api-business-user-code/what/iAreAbout/cancelAttention", 'GET', data);
  },
  /**
   * 粉丝列表
   */
  getfollowMyList: function getfollowMyList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/what/iAreAbout/followMyList", 'POST', data, false, true);
  },
  /**
   * 我的关注列表
   */
  getmyFollowList: function getmyFollowList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/what/iAreAbout/myFollowList", 'POST', data, false, true);
  },
  /**
   * 需求搜索
   */
  selDemandSearchList: function selDemandSearchList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/selDemandSearchList", 'GET', data, false, true);
  },
  /**
   * 搜索用户
   */
  selUserSearchList: function selUserSearchList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/selUserSearchList", 'GET', data, false, true);
  },
  /**
   * 获取登录人搜索历史
   */
  getSsearchHistoryList: function getSsearchHistoryList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/getSsearchHistoryList", 'GET');
  },
  /**
   * 清空登录人搜索历史
   */
  delSsearchHistory: function delSsearchHistory(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/delSsearchHistory", 'GET');
  },
  /**
   * 添加需求投诉
   */
  demandComplaint: function demandComplaint(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/complaint", 'POST', data, false, true);
  },
  /**
   * 获取星级
   */
  getStarLevel: function getStarLevel(context, data) {
    return _httpRequest.default.request("/api-business-user-code/credit/starSettingTable/getStarLevel", 'GET');
  },
  /**
   * 评价
   */
  evaluateApi: function evaluateApi(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/evaluation/evaluate/".concat(data.userEvaluationId), 'GET', data);
  },
  /**
   * 获取双方评论
   */
  getEvaluation: function getEvaluation(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/evaluation/getEvaluation/".concat(data.userEvaluationId), 'GET');
  },
  /**
   * 获取用户评价列表
   */
  getEvaluationList: function getEvaluationList(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/evaluation/getEvaluationList", 'GET', data);
  },
  /**
   * 确认完工
   */
  confirmCompletion: function confirmCompletion(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/registration/confirmCompletion", 'GET', data);
  },
  /**
   * 完成需求
   */
  completionRequirements: function completionRequirements(context, data) {
    return _httpRequest.default.request("/api-business-user-code/demand/undertaking/completionRequirements", 'GET', data);
  },
  /**
   * 添加意见反馈
   */
  feedbackservice: function feedbackservice(context, data) {
    return _httpRequest.default.request("/api-business-user-code/feedbackservice", 'POST', data, false, true);
  },
  /**
   * 我的承接开关（0、为关闭，1、为开启）
   */
  myAcceptanceSwitch: function myAcceptanceSwitch(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/myAcceptanceSwitch", 'GET', data);
  },
  /**
   * 我的承接开关状态
   */
  myAcceptanceSwitchState: function myAcceptanceSwitchState(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/myAcceptanceSwitchState", 'GET', data);
  },
  /**
   * 我的发布开关（0、为关闭，1、为开启）
   */
  myReleaseSwitch: function myReleaseSwitch(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/myReleaseSwitch", 'GET', data);
  },
  /**
   * 我的发布开关状态
   */
  myReleaseSwitchState: function myReleaseSwitchState(context, data) {
    return _httpRequest.default.request("/api-business-user-code/user/info/myReleaseSwitchState", 'GET', data);
  }
};
var _default = api;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 44:
/*!*************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/utils/debounce.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// 防抖
var _default = {
  data: function data() {
    return {
      debounceTimer: null
    };
  },
  methods: {
    $debounce: function $debounce(func) {
      var _this = this;
      var context = this;
      if (this.debounceTimer) clearTimeout(this.debounceTimer);
      var callNow = !this.debounceTimer; // 是否立即执行
      this.debounceTimer = setTimeout(function () {
        _this.debounceTimer = null;
      }, 1000);
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      if (callNow) func.apply(context, args);
    }
  }
};
exports.default = _default;

/***/ }),

/***/ 447:
/*!************************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-uni.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = MeScroll;
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ 13));
/* mescroll
 * version 1.3.7
 * 2021-04-12 wenju
 * https://www.mescroll.com
 */

function MeScroll(options, isScrollBody) {
  var me = this;
  me.version = '1.3.7'; // mescroll版本号
  me.options = options || {}; // 配置
  me.isScrollBody = isScrollBody || false; // 滚动区域是否为原生页面滚动; 默认为scroll-view

  me.isDownScrolling = false; // 是否在执行下拉刷新的回调
  me.isUpScrolling = false; // 是否在执行上拉加载的回调
  var hasDownCallback = me.options.down && me.options.down.callback; // 是否配置了down的callback

  // 初始化下拉刷新
  me.initDownScroll();
  // 初始化上拉加载,则初始化
  me.initUpScroll();

  // 自动加载
  setTimeout(function () {
    // 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
    // 自动触发下拉刷新 (只有配置了down的callback才自动触发下拉刷新)
    if ((me.optDown.use || me.optDown.native) && me.optDown.auto && hasDownCallback) {
      if (me.optDown.autoShowLoading) {
        me.triggerDownScroll(); // 显示下拉进度,执行下拉回调
      } else {
        me.optDown.callback && me.optDown.callback(me); // 不显示下拉进度,直接执行下拉回调
      }
    }
    // 自动触发上拉加载
    if (!me.isUpAutoLoad) {
      // 部分小程序(头条小程序)emit是异步, 会导致isUpAutoLoad判断有误, 先延时确保先执行down的callback,再执行up的callback
      setTimeout(function () {
        me.optUp.use && me.optUp.auto && !me.isUpAutoLoad && me.triggerUpScroll();
      }, 100);
    }
  }, 30); // 需让me.optDown.inited和me.optUp.inited先执行
}

/* 配置参数:下拉刷新 */
MeScroll.prototype.extendDownScroll = function (optDown) {
  // 下拉刷新的配置
  MeScroll.extend(optDown, {
    use: true,
    // 是否启用下拉刷新; 默认true
    auto: true,
    // 是否在初始化完毕之后自动执行下拉刷新的回调; 默认true
    native: false,
    // 是否使用系统自带的下拉刷新; 默认false; 仅mescroll-body生效 (值为true时,还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
    autoShowLoading: false,
    // 如果设置auto=true(在初始化完毕之后自动执行下拉刷新的回调),那么是否显示下拉刷新的进度; 默认false
    isLock: false,
    // 是否锁定下拉刷新,默认false;
    offset: 80,
    // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调
    startTop: 100,
    // scroll-view快速滚动到顶部时,此时的scroll-top可能大于0, 此值用于控制最大的误差
    inOffsetRate: 1,
    // 在列表顶部,下拉的距离小于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉
    outOffsetRate: 0.2,
    // 在列表顶部,下拉的距离大于offset时,改变下拉区域高度比例;值小于1且越接近0,高度变化越小,表现为越往下越难拉
    bottomOffset: 20,
    // 当手指touchmove位置在距离body底部20px范围内的时候结束上拉刷新,避免Webview嵌套导致touchend事件不执行
    minAngle: 45,
    // 向下滑动最少偏移的角度,取值区间  [0,90];默认45度,即向下滑动的角度大于45度则触发下拉;而小于45度,将不触发下拉,避免与左右滑动的轮播等组件冲突;
    textInOffset: '下拉刷新',
    // 下拉的距离在offset范围内的提示文本
    textOutOffset: '释放更新',
    // 下拉的距离大于offset范围的提示文本
    textLoading: '加载中 ...',
    // 加载中的提示文本
    textSuccess: '加载成功',
    // 加载成功的文本
    textErr: '加载失败',
    // 加载失败的文本
    beforeEndDelay: 0,
    // 延时结束的时长 (显示加载成功/失败的时长, android小程序设置此项结束下拉会卡顿, 配置后请注意测试)
    bgColor: "transparent",
    // 背景颜色 (建议在pages.json中再设置一下backgroundColorTop)
    textColor: "gray",
    // 文本颜色 (当bgColor配置了颜色,而textColor未配置时,则textColor会默认为白色)
    inited: null,
    // 下拉刷新初始化完毕的回调
    inOffset: null,
    // 下拉的距离进入offset范围内那一刻的回调
    outOffset: null,
    // 下拉的距离大于offset那一刻的回调
    onMoving: null,
    // 下拉过程中的回调,滑动过程一直在执行; rate下拉区域当前高度与指定距离的比值(inOffset: rate<1; outOffset: rate>=1); downHight当前下拉区域的高度
    beforeLoading: null,
    // 准备触发下拉刷新的回调: 如果return true,将不触发showLoading和callback回调; 常用来完全自定义下拉刷新, 参考案例【淘宝 v6.8.0】
    showLoading: null,
    // 显示下拉刷新进度的回调
    afterLoading: null,
    // 显示下拉刷新进度的回调之后,马上要执行的代码 (如: 在wxs中使用)
    beforeEndDownScroll: null,
    // 准备结束下拉的回调. 返回结束下拉的延时执行时间,默认0ms; 常用于结束下拉之前再显示另外一小段动画,才去隐藏下拉刷新的场景, 参考案例【dotJump】
    endDownScroll: null,
    // 结束下拉刷新的回调
    afterEndDownScroll: null,
    // 结束下拉刷新的回调,马上要执行的代码 (如: 在wxs中使用)
    callback: function callback(mescroll) {
      // 下拉刷新的回调;默认重置上拉加载列表为第一页
      mescroll.resetUpScroll();
    }
  });
};

/* 配置参数:上拉加载 */
MeScroll.prototype.extendUpScroll = function (optUp) {
  // 上拉加载的配置
  MeScroll.extend(optUp, {
    use: true,
    // 是否启用上拉加载; 默认true
    auto: true,
    // 是否在初始化完毕之后自动执行上拉加载的回调; 默认true
    isLock: false,
    // 是否锁定上拉加载,默认false;
    isBoth: true,
    // 上拉加载时,如果滑动到列表顶部是否可以同时触发下拉刷新;默认true,两者可同时触发;
    callback: null,
    // 上拉加载的回调;function(page,mescroll){ }
    page: {
      num: 0,
      // 当前页码,默认0,回调之前会加1,即callback(page)会从1开始
      size: 10,
      // 每页数据的数量
      time: null // 加载第一页数据服务器返回的时间; 防止用户翻页时,后台新增了数据从而导致下一页数据重复;
    },

    noMoreSize: 5,
    // 如果列表已无数据,可设置列表的总数量要大于等于5条才显示无更多数据;避免列表数据过少(比如只有一条数据),显示无更多数据会不好看
    offset: 150,
    // 距底部多远时,触发upCallback,仅mescroll-uni生效 ( mescroll-body配置的是pages.json的 onReachBottomDistance )
    textLoading: '加载中 ...',
    // 加载中的提示文本
    textNoMore: '-- END --',
    // 没有更多数据的提示文本
    bgColor: "transparent",
    // 背景颜色 (建议在pages.json中再设置一下backgroundColorBottom)
    textColor: "gray",
    // 文本颜色 (当bgColor配置了颜色,而textColor未配置时,则textColor会默认为白色)
    inited: null,
    // 初始化完毕的回调
    showLoading: null,
    // 显示加载中的回调
    showNoMore: null,
    // 显示无更多数据的回调
    hideUpScroll: null,
    // 隐藏上拉加载的回调
    errDistance: 60,
    // endErr的时候需往上滑动一段距离,使其往下滑动时再次触发onReachBottom,仅mescroll-body生效
    toTop: {
      // 回到顶部按钮,需配置src才显示
      src: null,
      // 图片路径,默认null (绝对路径或网络图)
      offset: 1000,
      // 列表滚动多少距离才显示回到顶部按钮,默认1000
      duration: 300,
      // 回到顶部的动画时长,默认300ms (当值为0或300则使用系统自带回到顶部,更流畅; 其他值则通过step模拟,部分机型可能不够流畅,所以非特殊情况不建议修改此项)
      btnClick: null,
      // 点击按钮的回调
      onShow: null,
      // 是否显示的回调
      zIndex: 9990,
      // fixed定位z-index值
      left: null,
      // 到左边的距离, 默认null. 此项有值时,right不生效. (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      right: 20,
      // 到右边的距离, 默认20 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      bottom: 120,
      // 到底部的距离, 默认120 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      safearea: false,
      // bottom的偏移量是否加上底部安全区的距离, 默认false, 需要适配iPhoneX时使用 (具体的界面如果不配置此项,则取本vue的safearea值)
      width: 72,
      // 回到顶部图标的宽度, 默认72 (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
      radius: "50%" // 圆角, 默认"50%" (支持20, "20rpx", "20px", "20%"格式的值, 其中纯数字则默认单位rpx)
    },

    empty: {
      use: true,
      // 是否显示空布局
      icon: null,
      // 图标路径
      tip: '~ 暂无相关数据 ~',
      // 提示
      btnText: '',
      // 按钮
      btnClick: null,
      // 点击按钮的回调
      onShow: null,
      // 是否显示的回调
      fixed: false,
      // 是否使用fixed定位,默认false; 配置fixed为true,以下的top和zIndex才生效 (transform会使fixed失效,最终会降级为absolute)
      top: "100rpx",
      // fixed定位的top值 (完整的单位值,如 "10%"; "100rpx")
      zIndex: 99 // fixed定位z-index值
    },

    onScroll: false // 是否监听滚动事件
  });
};

/* 配置参数 */
MeScroll.extend = function (userOption, defaultOption) {
  if (!userOption) return defaultOption;
  for (var key in defaultOption) {
    if (userOption[key] == null) {
      var def = defaultOption[key];
      if (def != null && (0, _typeof2.default)(def) === 'object') {
        userOption[key] = MeScroll.extend({}, def); // 深度匹配
      } else {
        userOption[key] = def;
      }
    } else if ((0, _typeof2.default)(userOption[key]) === 'object') {
      MeScroll.extend(userOption[key], defaultOption[key]); // 深度匹配
    }
  }

  return userOption;
};

/* 简单判断是否配置了颜色 (非透明,非白色) */
MeScroll.prototype.hasColor = function (color) {
  if (!color) return false;
  var c = color.toLowerCase();
  return c != "#fff" && c != "#ffffff" && c != "transparent" && c != "white";
};

/* -------初始化下拉刷新------- */
MeScroll.prototype.initDownScroll = function () {
  var me = this;
  // 配置参数
  me.optDown = me.options.down || {};
  if (!me.optDown.textColor && me.hasColor(me.optDown.bgColor)) me.optDown.textColor = "#fff"; // 当bgColor有值且textColor未设置,则textColor默认白色
  me.extendDownScroll(me.optDown);

  // 如果是mescroll-body且配置了native,则禁止自定义的下拉刷新
  if (me.isScrollBody && me.optDown.native) {
    me.optDown.use = false;
  } else {
    me.optDown.native = false; // 仅mescroll-body支持,mescroll-uni不支持
  }

  me.downHight = 0; // 下拉区域的高度

  // 在页面中加入下拉布局
  if (me.optDown.use && me.optDown.inited) {
    // 初始化完毕的回调
    setTimeout(function () {
      // 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
      me.optDown.inited(me);
    }, 0);
  }
};

/* 列表touchstart事件 */
MeScroll.prototype.touchstartEvent = function (e) {
  if (!this.optDown.use) return;
  this.startPoint = this.getPoint(e); // 记录起点
  this.startTop = this.getScrollTop(); // 记录此时的滚动条位置
  this.startAngle = 0; // 初始角度
  this.lastPoint = this.startPoint; // 重置上次move的点
  this.maxTouchmoveY = this.getBodyHeight() - this.optDown.bottomOffset; // 手指触摸的最大范围(写在touchstart避免body获取高度为0的情况)
  this.inTouchend = false; // 标记不是touchend
};

/* 列表touchmove事件 */
MeScroll.prototype.touchmoveEvent = function (e) {
  if (!this.optDown.use) return;
  var me = this;
  var scrollTop = me.getScrollTop(); // 当前滚动条的距离
  var curPoint = me.getPoint(e); // 当前点

  var moveY = curPoint.y - me.startPoint.y; // 和起点比,移动的距离,大于0向下拉,小于0向上拉

  // 向下拉 && 在顶部
  // mescroll-body,直接判定在顶部即可
  // scroll-view在滚动时不会触发touchmove,当触顶/底/左/右时,才会触发touchmove
  // scroll-view滚动到顶部时,scrollTop不一定为0,也有可能大于0; 在iOS的APP中scrollTop可能为负数,不一定和startTop相等
  if (moveY > 0 && (me.isScrollBody && scrollTop <= 0 || !me.isScrollBody && (scrollTop <= 0 || scrollTop <= me.optDown.startTop && scrollTop === me.startTop))) {
    // 可下拉的条件
    if (!me.inTouchend && !me.isDownScrolling && !me.optDown.isLock && (!me.isUpScrolling || me.isUpScrolling && me.optUp.isBoth)) {
      // 下拉的初始角度是否在配置的范围内
      if (!me.startAngle) me.startAngle = me.getAngle(me.lastPoint, curPoint); // 两点之间的角度,区间 [0,90]
      if (me.startAngle < me.optDown.minAngle) return; // 如果小于配置的角度,则不往下执行下拉刷新

      // 如果手指的位置超过配置的距离,则提前结束下拉,避免Webview嵌套导致touchend无法触发
      if (me.maxTouchmoveY > 0 && curPoint.y >= me.maxTouchmoveY) {
        me.inTouchend = true; // 标记执行touchend
        me.touchendEvent(); // 提前触发touchend
        return;
      }
      me.preventDefault(e); // 阻止默认事件

      var diff = curPoint.y - me.lastPoint.y; // 和上次比,移动的距离 (大于0向下,小于0向上)

      // 下拉距离  < 指定距离
      if (me.downHight < me.optDown.offset) {
        if (me.movetype !== 1) {
          me.movetype = 1; // 加入标记,保证只执行一次
          me.isDownEndSuccess = null; // 重置是否加载成功的状态 (wxs执行的是wxs.wxs)
          me.optDown.inOffset && me.optDown.inOffset(me); // 进入指定距离范围内那一刻的回调,只执行一次
          me.isMoveDown = true; // 标记下拉区域高度改变,在touchend重置回来
        }

        me.downHight += diff * me.optDown.inOffsetRate; // 越往下,高度变化越小

        // 指定距离  <= 下拉距离
      } else {
        if (me.movetype !== 2) {
          me.movetype = 2; // 加入标记,保证只执行一次
          me.optDown.outOffset && me.optDown.outOffset(me); // 下拉超过指定距离那一刻的回调,只执行一次
          me.isMoveDown = true; // 标记下拉区域高度改变,在touchend重置回来
        }

        if (diff > 0) {
          // 向下拉
          me.downHight += diff * me.optDown.outOffsetRate; // 越往下,高度变化越小
        } else {
          // 向上收
          me.downHight += diff; // 向上收回高度,则向上滑多少收多少高度
        }
      }

      me.downHight = Math.round(me.downHight); // 取整
      var rate = me.downHight / me.optDown.offset; // 下拉区域当前高度与指定距离的比值
      me.optDown.onMoving && me.optDown.onMoving(me, rate, me.downHight); // 下拉过程中的回调,一直在执行
    }
  }

  me.lastPoint = curPoint; // 记录本次移动的点
};

/* 列表touchend事件 */
MeScroll.prototype.touchendEvent = function (e) {
  if (!this.optDown.use) return;
  // 如果下拉区域高度已改变,则需重置回来
  if (this.isMoveDown) {
    if (this.downHight >= this.optDown.offset) {
      // 符合触发刷新的条件
      this.triggerDownScroll();
    } else {
      // 不符合的话 则重置
      this.downHight = 0;
      this.endDownScrollCall(this);
    }
    this.movetype = 0;
    this.isMoveDown = false;
  } else if (!this.isScrollBody && this.getScrollTop() === this.startTop) {
    // scroll-view到顶/左/右/底的滑动事件
    var isScrollUp = this.getPoint(e).y - this.startPoint.y < 0; // 和起点比,移动的距离,大于0向下拉,小于0向上拉
    // 上滑
    if (isScrollUp) {
      // 需检查滑动的角度
      var angle = this.getAngle(this.getPoint(e), this.startPoint); // 两点之间的角度,区间 [0,90]
      if (angle > 80) {
        // 检查并触发上拉
        this.triggerUpScroll(true);
      }
    }
  }
};

/* 根据点击滑动事件获取第一个手指的坐标 */
MeScroll.prototype.getPoint = function (e) {
  if (!e) {
    return {
      x: 0,
      y: 0
    };
  }
  if (e.touches && e.touches[0]) {
    return {
      x: e.touches[0].pageX,
      y: e.touches[0].pageY
    };
  } else if (e.changedTouches && e.changedTouches[0]) {
    return {
      x: e.changedTouches[0].pageX,
      y: e.changedTouches[0].pageY
    };
  } else {
    return {
      x: e.clientX,
      y: e.clientY
    };
  }
};

/* 计算两点之间的角度: 区间 [0,90]*/
MeScroll.prototype.getAngle = function (p1, p2) {
  var x = Math.abs(p1.x - p2.x);
  var y = Math.abs(p1.y - p2.y);
  var z = Math.sqrt(x * x + y * y);
  var angle = 0;
  if (z !== 0) {
    angle = Math.asin(y / z) / Math.PI * 180;
  }
  return angle;
};

/* 触发下拉刷新 */
MeScroll.prototype.triggerDownScroll = function () {
  if (this.optDown.beforeLoading && this.optDown.beforeLoading(this)) {
    //return true则处于完全自定义状态
  } else {
    this.showDownScroll(); // 下拉刷新中...
    !this.optDown.native && this.optDown.callback && this.optDown.callback(this); // 执行回调,联网加载数据
  }
};

/* 显示下拉进度布局 */
MeScroll.prototype.showDownScroll = function () {
  this.isDownScrolling = true; // 标记下拉中
  if (this.optDown.native) {
    uni.startPullDownRefresh(); // 系统自带的下拉刷新
    this.showDownLoadingCall(0); // 仍触发showLoading,因为上拉加载用到
  } else {
    this.downHight = this.optDown.offset; // 更新下拉区域高度
    this.showDownLoadingCall(this.downHight); // 下拉刷新中...
  }
};

MeScroll.prototype.showDownLoadingCall = function (downHight) {
  this.optDown.showLoading && this.optDown.showLoading(this, downHight); // 下拉刷新中...
  this.optDown.afterLoading && this.optDown.afterLoading(this, downHight); // 下拉刷新中...触发之后马上要执行的代码
};

/* 显示系统自带的下拉刷新时需要处理的业务 */
MeScroll.prototype.onPullDownRefresh = function () {
  this.isDownScrolling = true; // 标记下拉中
  this.showDownLoadingCall(0); // 仍触发showLoading,因为上拉加载用到
  this.optDown.callback && this.optDown.callback(this); // 执行回调,联网加载数据
};

/* 结束下拉刷新 */
MeScroll.prototype.endDownScroll = function () {
  if (this.optDown.native) {
    // 结束原生下拉刷新
    this.isDownScrolling = false;
    this.endDownScrollCall(this);
    uni.stopPullDownRefresh();
    return;
  }
  var me = this;
  // 结束下拉刷新的方法
  var endScroll = function endScroll() {
    me.downHight = 0;
    me.isDownScrolling = false;
    me.endDownScrollCall(me);
    if (!me.isScrollBody) {
      me.setScrollHeight(0); // scroll-view重置滚动区域,使数据不满屏时仍可检查触发翻页
      me.scrollTo(0, 0); // scroll-view需重置滚动条到顶部,避免startTop大于0时,对下拉刷新的影响
    }
  };
  // 结束下拉刷新时的回调
  var delay = 0;
  if (me.optDown.beforeEndDownScroll) {
    delay = me.optDown.beforeEndDownScroll(me); // 结束下拉刷新的延时,单位ms
    if (me.isDownEndSuccess == null) delay = 0; // 没有执行加载中,则不延时
  }

  if (typeof delay === 'number' && delay > 0) {
    setTimeout(endScroll, delay);
  } else {
    endScroll();
  }
};
MeScroll.prototype.endDownScrollCall = function () {
  this.optDown.endDownScroll && this.optDown.endDownScroll(this);
  this.optDown.afterEndDownScroll && this.optDown.afterEndDownScroll(this);
};

/* 锁定下拉刷新:isLock=ture,null锁定;isLock=false解锁 */
MeScroll.prototype.lockDownScroll = function (isLock) {
  if (isLock == null) isLock = true;
  this.optDown.isLock = isLock;
};

/* 锁定上拉加载:isLock=ture,null锁定;isLock=false解锁 */
MeScroll.prototype.lockUpScroll = function (isLock) {
  if (isLock == null) isLock = true;
  this.optUp.isLock = isLock;
};

/* -------初始化上拉加载------- */
MeScroll.prototype.initUpScroll = function () {
  var me = this;
  // 配置参数
  me.optUp = me.options.up || {
    use: false
  };
  if (!me.optUp.textColor && me.hasColor(me.optUp.bgColor)) me.optUp.textColor = "#fff"; // 当bgColor有值且textColor未设置,则textColor默认白色
  me.extendUpScroll(me.optUp);
  if (me.optUp.use === false) return; // 配置不使用上拉加载时,则不初始化上拉布局
  me.optUp.hasNext = true; // 如果使用上拉,则默认有下一页
  me.startNum = me.optUp.page.num + 1; // 记录page开始的页码

  // 初始化完毕的回调
  if (me.optUp.inited) {
    setTimeout(function () {
      // 待主线程执行完毕再执行,避免new MeScroll未初始化,在回调获取不到mescroll的实例
      me.optUp.inited(me);
    }, 0);
  }
};

/*滚动到底部的事件 (仅mescroll-body生效)*/
MeScroll.prototype.onReachBottom = function () {
  if (this.isScrollBody && !this.isUpScrolling) {
    // 只能支持下拉刷新的时候同时可以触发上拉加载,否则滚动到底部就需要上滑一点才能触发onReachBottom
    if (!this.optUp.isLock && this.optUp.hasNext) {
      this.triggerUpScroll();
    }
  }
};

/*列表滚动事件 (仅mescroll-body生效)*/
MeScroll.prototype.onPageScroll = function (e) {
  if (!this.isScrollBody) return;

  // 更新滚动条的位置 (主要用于判断下拉刷新时,滚动条是否在顶部)
  this.setScrollTop(e.scrollTop);

  // 顶部按钮的显示隐藏
  if (e.scrollTop >= this.optUp.toTop.offset) {
    this.showTopBtn();
  } else {
    this.hideTopBtn();
  }
};

/*列表滚动事件*/
MeScroll.prototype.scroll = function (e, onScroll) {
  // 更新滚动条的位置
  this.setScrollTop(e.scrollTop);
  // 更新滚动内容高度
  this.setScrollHeight(e.scrollHeight);

  // 向上滑还是向下滑动
  if (this.preScrollY == null) this.preScrollY = 0;
  this.isScrollUp = e.scrollTop - this.preScrollY > 0;
  this.preScrollY = e.scrollTop;

  // 上滑 && 检查并触发上拉
  this.isScrollUp && this.triggerUpScroll(true);

  // 顶部按钮的显示隐藏
  if (e.scrollTop >= this.optUp.toTop.offset) {
    this.showTopBtn();
  } else {
    this.hideTopBtn();
  }

  // 滑动监听
  this.optUp.onScroll && onScroll && onScroll();
};

/* 触发上拉加载 */
MeScroll.prototype.triggerUpScroll = function (isCheck) {
  if (!this.isUpScrolling && this.optUp.use && this.optUp.callback) {
    // 是否校验在底部; 默认不校验
    if (isCheck === true) {
      var canUp = false;
      // 还有下一页 && 没有锁定 && 不在下拉中
      if (this.optUp.hasNext && !this.optUp.isLock && !this.isDownScrolling) {
        if (this.getScrollBottom() <= this.optUp.offset) {
          // 到底部
          canUp = true; // 标记可上拉
        }
      }

      if (canUp === false) return;
    }
    this.showUpScroll(); // 上拉加载中...
    this.optUp.page.num++; // 预先加一页,如果失败则减回
    this.isUpAutoLoad = true; // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调
    this.num = this.optUp.page.num; // 把最新的页数赋值在mescroll上,避免对page的影响
    this.size = this.optUp.page.size; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.time = this.optUp.page.time; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.optUp.callback(this); // 执行回调,联网加载数据
  }
};

/* 显示上拉加载中 */
MeScroll.prototype.showUpScroll = function () {
  this.isUpScrolling = true; // 标记上拉加载中
  this.optUp.showLoading && this.optUp.showLoading(this); // 回调
};

/* 显示上拉无更多数据 */
MeScroll.prototype.showNoMore = function () {
  this.optUp.hasNext = false; // 标记无更多数据
  this.optUp.showNoMore && this.optUp.showNoMore(this); // 回调
};

/* 隐藏上拉区域**/
MeScroll.prototype.hideUpScroll = function () {
  this.optUp.hideUpScroll && this.optUp.hideUpScroll(this); // 回调
};

/* 结束上拉加载 */
MeScroll.prototype.endUpScroll = function (isShowNoMore) {
  if (isShowNoMore != null) {
    // isShowNoMore=null,不处理下拉状态,下拉刷新的时候调用
    if (isShowNoMore) {
      this.showNoMore(); // isShowNoMore=true,显示无更多数据
    } else {
      this.hideUpScroll(); // isShowNoMore=false,隐藏上拉加载
    }
  }

  this.isUpScrolling = false; // 标记结束上拉加载
};

/* 重置上拉加载列表为第一页
 *isShowLoading 是否显示进度布局;
 * 1.默认null,不传参,则显示上拉加载的进度布局
 * 2.传参true, 则显示下拉刷新的进度布局
 * 3.传参false,则不显示上拉和下拉的进度 (常用于静默更新列表数据)
 */
MeScroll.prototype.resetUpScroll = function (isShowLoading) {
  if (this.optUp && this.optUp.use) {
    var page = this.optUp.page;
    this.prePageNum = page.num; // 缓存重置前的页码,加载失败可退回
    this.prePageTime = page.time; // 缓存重置前的时间,加载失败可退回
    page.num = this.startNum; // 重置为第一页
    page.time = null; // 重置时间为空
    if (!this.isDownScrolling && isShowLoading !== false) {
      // 如果不是下拉刷新触发的resetUpScroll并且不配置列表静默更新,则显示进度;
      if (isShowLoading == null) {
        this.removeEmpty(); // 移除空布局
        this.showUpScroll(); // 不传参,默认显示上拉加载的进度布局
      } else {
        this.showDownScroll(); // 传true,显示下拉刷新的进度布局,不清空列表
      }
    }

    this.isUpAutoLoad = true; // 标记上拉已经自动执行过,避免初始化时多次触发上拉回调
    this.num = page.num; // 把最新的页数赋值在mescroll上,避免对page的影响
    this.size = page.size; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.time = page.time; // 把最新的页码赋值在mescroll上,避免对page的影响
    this.optUp.callback && this.optUp.callback(this); // 执行上拉回调
  }
};

/* 设置page.num的值 */
MeScroll.prototype.setPageNum = function (num) {
  this.optUp.page.num = num - 1;
};

/* 设置page.size的值 */
MeScroll.prototype.setPageSize = function (size) {
  this.optUp.page.size = size;
};

/* 联网回调成功,结束下拉刷新和上拉加载
 * dataSize: 当前页的数据量(必传)
 * totalPage: 总页数(必传)
 * systime: 服务器时间 (可空)
 */
MeScroll.prototype.endByPage = function (dataSize, totalPage, systime) {
  var hasNext;
  if (this.optUp.use && totalPage != null) hasNext = this.optUp.page.num < totalPage; // 是否还有下一页
  this.endSuccess(dataSize, hasNext, systime);
};

/* 联网回调成功,结束下拉刷新和上拉加载
 * dataSize: 当前页的数据量(必传)
 * totalSize: 列表所有数据总数量(必传)
 * systime: 服务器时间 (可空)
 */
MeScroll.prototype.endBySize = function (dataSize, totalSize, systime) {
  var hasNext;
  if (this.optUp.use && totalSize != null) {
    var loadSize = (this.optUp.page.num - 1) * this.optUp.page.size + dataSize; // 已加载的数据总数
    hasNext = loadSize < totalSize; // 是否还有下一页
  }

  this.endSuccess(dataSize, hasNext, systime);
};

/* 联网回调成功,结束下拉刷新和上拉加载
 * dataSize: 当前页的数据个数(不是所有页的数据总和),用于上拉加载判断是否还有下一页.如果不传,则会判断还有下一页
 * hasNext: 是否还有下一页,布尔类型;用来解决这个小问题:比如列表共有20条数据,每页加载10条,共2页.如果只根据dataSize判断,则需翻到第三页才会知道无更多数据,如果传了hasNext,则翻到第二页即可显示无更多数据.
 * systime: 服务器时间(可空);用来解决这个小问题:当准备翻下一页时,数据库新增了几条记录,此时翻下一页,前面的几条数据会和上一页的重复;这里传入了systime,那么upCallback的page.time就会有值,把page.time传给服务器,让后台过滤新加入的那几条记录
 */
MeScroll.prototype.endSuccess = function (dataSize, hasNext, systime) {
  var me = this;
  // 结束下拉刷新
  if (me.isDownScrolling) {
    me.isDownEndSuccess = true;
    me.endDownScroll();
  }

  // 结束上拉加载
  if (me.optUp.use) {
    var isShowNoMore; // 是否已无更多数据
    if (dataSize != null) {
      var pageNum = me.optUp.page.num; // 当前页码
      var pageSize = me.optUp.page.size; // 每页长度
      // 如果是第一页
      if (pageNum === 1) {
        if (systime) me.optUp.page.time = systime; // 设置加载列表数据第一页的时间
      }

      if (dataSize < pageSize || hasNext === false) {
        // 返回的数据不满一页时,则说明已无更多数据
        me.optUp.hasNext = false;
        if (dataSize === 0 && pageNum === 1) {
          // 如果第一页无任何数据且配置了空布局
          isShowNoMore = false;
          me.showEmpty();
        } else {
          // 总列表数少于配置的数量,则不显示无更多数据
          var allDataSize = (pageNum - 1) * pageSize + dataSize;
          if (allDataSize < me.optUp.noMoreSize) {
            isShowNoMore = false;
          } else {
            isShowNoMore = true;
          }
          me.removeEmpty(); // 移除空布局
        }
      } else {
        // 还有下一页
        isShowNoMore = false;
        me.optUp.hasNext = true;
        me.removeEmpty(); // 移除空布局
      }
    }

    // 隐藏上拉
    me.endUpScroll(isShowNoMore);
  }
};

/* 回调失败,结束下拉刷新和上拉加载 */
MeScroll.prototype.endErr = function (errDistance) {
  // 结束下拉,回调失败重置回原来的页码和时间
  if (this.isDownScrolling) {
    this.isDownEndSuccess = false;
    var page = this.optUp.page;
    if (page && this.prePageNum) {
      page.num = this.prePageNum;
      page.time = this.prePageTime;
    }
    this.endDownScroll();
  }
  // 结束上拉,回调失败重置回原来的页码
  if (this.isUpScrolling) {
    this.optUp.page.num--;
    this.endUpScroll(false);
    // 如果是mescroll-body,则需往回滚一定距离
    if (this.isScrollBody && errDistance !== 0) {
      // 不处理0
      if (!errDistance) errDistance = this.optUp.errDistance; // 不传,则取默认
      this.scrollTo(this.getScrollTop() - errDistance, 0); // 往上回滚的距离
    }
  }
};

/* 显示空布局 */
MeScroll.prototype.showEmpty = function () {
  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(true);
};

/* 移除空布局 */
MeScroll.prototype.removeEmpty = function () {
  this.optUp.empty.use && this.optUp.empty.onShow && this.optUp.empty.onShow(false);
};

/* 显示回到顶部的按钮 */
MeScroll.prototype.showTopBtn = function () {
  if (!this.topBtnShow) {
    this.topBtnShow = true;
    this.optUp.toTop.onShow && this.optUp.toTop.onShow(true);
  }
};

/* 隐藏回到顶部的按钮 */
MeScroll.prototype.hideTopBtn = function () {
  if (this.topBtnShow) {
    this.topBtnShow = false;
    this.optUp.toTop.onShow && this.optUp.toTop.onShow(false);
  }
};

/* 获取滚动条的位置 */
MeScroll.prototype.getScrollTop = function () {
  return this.scrollTop || 0;
};

/* 记录滚动条的位置 */
MeScroll.prototype.setScrollTop = function (y) {
  this.scrollTop = y;
};

/* 滚动到指定位置 */
MeScroll.prototype.scrollTo = function (y, t) {
  this.myScrollTo && this.myScrollTo(y, t); // scrollview需自定义回到顶部方法
};

/* 自定义scrollTo */
MeScroll.prototype.resetScrollTo = function (myScrollTo) {
  this.myScrollTo = myScrollTo;
};

/* 滚动条到底部的距离 */
MeScroll.prototype.getScrollBottom = function () {
  return this.getScrollHeight() - this.getClientHeight() - this.getScrollTop();
};

/* 计步器
 star: 开始值
 end: 结束值
 callback(step,timer): 回调step值,计步器timer,可自行通过window.clearInterval(timer)结束计步器;
 t: 计步时长,传0则直接回调end值;不传则默认300ms
 rate: 周期;不传则默认30ms计步一次
 * */
MeScroll.prototype.getStep = function (star, end, callback, t, rate) {
  var diff = end - star; // 差值
  if (t === 0 || diff === 0) {
    callback && callback(end);
    return;
  }
  t = t || 300; // 时长 300ms
  rate = rate || 30; // 周期 30ms
  var count = t / rate; // 次数
  var step = diff / count; // 步长
  var i = 0; // 计数
  var timer = setInterval(function () {
    if (i < count - 1) {
      star += step;
      callback && callback(star, timer);
      i++;
    } else {
      callback && callback(end, timer); // 最后一次直接设置end,避免计算误差
      clearInterval(timer);
    }
  }, rate);
};

/* 滚动容器的高度 */
MeScroll.prototype.getClientHeight = function (isReal) {
  var h = this.clientHeight || 0;
  if (h === 0 && isReal !== true) {
    // 未获取到容器的高度,可临时取body的高度 (可能会有误差)
    h = this.getBodyHeight();
  }
  return h;
};
MeScroll.prototype.setClientHeight = function (h) {
  this.clientHeight = h;
};

/* 滚动内容的高度 */
MeScroll.prototype.getScrollHeight = function () {
  return this.scrollHeight || 0;
};
MeScroll.prototype.setScrollHeight = function (h) {
  this.scrollHeight = h;
};

/* body的高度 */
MeScroll.prototype.getBodyHeight = function () {
  return this.bodyHeight || 0;
};
MeScroll.prototype.setBodyHeight = function (h) {
  this.bodyHeight = h;
};

/* 阻止浏览器默认滚动事件 */
MeScroll.prototype.preventDefault = function (e) {
  // 小程序不支持e.preventDefault, 已在wxs中禁止
  // app的bounce只能通过配置pages.json的style.app-plus.bounce为"none"来禁止, 或使用renderjs禁止
  // cancelable:是否可以被禁用; defaultPrevented:是否已经被禁用
  if (e && e.cancelable && !e.defaultPrevented) e.preventDefault();
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 448:
/*!*******************************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-uni-option.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// 全局配置
// mescroll-body 和 mescroll-uni 通用
var GlobalOption = {
  down: {
    // 其他down的配置参数也可以写,这里只展示了常用的配置:
    offset: 80,
    // 在列表顶部,下拉大于80px,松手即可触发下拉刷新的回调
    native: false // 是否使用系统自带的下拉刷新; 默认false; 仅在mescroll-body生效 (值为true时,还需在pages配置enablePullDownRefresh:true;详请参考mescroll-native的案例)
  },

  up: {
    // 其他up的配置参数也可以写,这里只展示了常用的配置:
    offset: 150,
    // 距底部多远时,触发upCallback,仅mescroll-uni生效 ( mescroll-body配置的是pages.json的 onReachBottomDistance )
    toTop: {
      // 回到顶部按钮,需配置src才显示
      src: "https://www.mescroll.com/img/mescroll-totop.png",
      // 图片路径 (建议放入static目录, 如 /static/img/mescroll-totop.png )
      offset: 1000,
      // 列表滚动多少距离才显示回到顶部按钮,默认1000px
      right: 20,
      // 到右边的距离, 默认20 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
      bottom: 120,
      // 到底部的距离, 默认120 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
      width: 72 // 回到顶部图标的宽度, 默认72 (支持"20rpx", "20px", "20%"格式的值, 纯数字则默认单位rpx)
    },

    empty: {
      use: true,
      // 是否显示空布局
      icon: "https://www.mescroll.com/img/mescroll-empty.png" // 图标路径 (建议放入static目录, 如 /static/img/mescroll-empty.png )
    }
  },

  // 国际化配置
  i18n: {
    // 中文
    zh: {
      down: {
        textInOffset: '下拉刷新',
        // 下拉的距离在offset范围内的提示文本
        textOutOffset: '释放更新',
        // 下拉的距离大于offset范围的提示文本
        textLoading: '加载中 ...',
        // 加载中的提示文本
        textSuccess: '加载成功',
        // 加载成功的文本
        textErr: '加载失败' // 加载失败的文本
      },

      up: {
        textLoading: '加载中 ...',
        // 加载中的提示文本
        textNoMore: '-- END --',
        // 没有更多数据的提示文本
        empty: {
          tip: '~ 空空如也 ~' // 空提示
        }
      }
    },

    // 英文
    en: {
      down: {
        textInOffset: 'drop down refresh',
        textOutOffset: 'release updates',
        textLoading: 'loading ...',
        textSuccess: 'loaded successfully',
        textErr: 'loading failed'
      },
      up: {
        textLoading: 'loading ...',
        textNoMore: '-- END --',
        empty: {
          tip: '~ absolutely empty ~'
        }
      }
    }
  }
};
var _default = GlobalOption;
exports.default = _default;

/***/ }),

/***/ 449:
/*!*************************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/mescroll-uni/components/mescroll-uni/mescroll-i18n.js ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// 国际化工具类
var mescrollI18n = {
  // 默认语言
  def: "zh",
  // 获取当前语言类型
  getType: function getType() {
    return uni.getStorageSync("mescroll-i18n") || this.def;
  },
  // 设置当前语言类型
  setType: function setType(type) {
    uni.setStorageSync("mescroll-i18n", type);
  }
};
var _default = mescrollI18n;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 450:
/*!**********************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/mescroll-uni/components/mescroll-uni/wxs/mixins.js ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
// 定义在wxs (含renderjs) 逻辑层的数据和方法, 与视图层相互通信
var WxsMixin = {
  data: function data() {
    return {
      // 传入wxs视图层的数据 (响应式)
      wxsProp: {
        optDown: {},
        // 下拉刷新的配置
        scrollTop: 0,
        // 滚动条的距离
        bodyHeight: 0,
        // body的高度
        isDownScrolling: false,
        // 是否正在下拉刷新中
        isUpScrolling: false,
        // 是否正在上拉加载中
        isScrollBody: true,
        // 是否为mescroll-body滚动
        isUpBoth: true,
        // 上拉加载时,是否同时可以下拉刷新
        t: 0 // 数据更新的标记 (只有数据更新了,才会触发wxs的Observer)
      },

      // 标记调用wxs视图层的方法
      callProp: {
        callType: '',
        // 方法名
        t: 0 // 数据更新的标记 (只有数据更新了,才会触发wxs的Observer)
      },

      // 不用wxs的平台使用此处的wxsBiz对象,抹平wxs的写法 (微信小程序和APP使用的wxsBiz对象是./wxs/wxs.wxs)

      // 不用renderjs的平台使用此处的renderBiz对象,抹平renderjs的写法 (app 和 h5 使用的renderBiz对象是./wxs/renderjs.js)

      renderBiz: {
        propObserver: function propObserver() {} // 抹平renderjs的写法
      }
    };
  },
  methods: {
    // wxs视图层调用逻辑层的回调
    wxsCall: function wxsCall(msg) {
      if (msg.type === 'setWxsProp') {
        // 更新wxsProp数据 (值改变才触发更新)
        this.wxsProp = {
          optDown: this.mescroll.optDown,
          scrollTop: this.mescroll.getScrollTop(),
          bodyHeight: this.mescroll.getBodyHeight(),
          isDownScrolling: this.mescroll.isDownScrolling,
          isUpScrolling: this.mescroll.isUpScrolling,
          isUpBoth: this.mescroll.optUp.isBoth,
          isScrollBody: this.mescroll.isScrollBody,
          t: Date.now()
        };
      } else if (msg.type === 'setLoadType') {
        // 设置inOffset,outOffset的状态
        this.downLoadType = msg.downLoadType;
        // 状态挂载到mescroll对象, 以便在其他组件中使用, 比如<me-video>中
        this.$set(this.mescroll, 'downLoadType', this.downLoadType);
        // 重置是否加载成功的状态
        this.$set(this.mescroll, 'isDownEndSuccess', null);
      } else if (msg.type === 'triggerDownScroll') {
        // 主动触发下拉刷新
        this.mescroll.triggerDownScroll();
      } else if (msg.type === 'endDownScroll') {
        // 结束下拉刷新
        this.mescroll.endDownScroll();
      } else if (msg.type === 'triggerUpScroll') {
        // 主动触发上拉加载
        this.mescroll.triggerUpScroll(true);
      }
    }
  },
  mounted: function mounted() {
    var _this = this;
    // 配置主动触发wxs显示加载进度的回调
    this.mescroll.optDown.afterLoading = function () {
      _this.callProp = {
        callType: "showLoading",
        t: Date.now()
      }; // 触发wxs的方法 (值改变才触发更新)
    };
    // 配置主动触发wxs隐藏加载进度的回调
    this.mescroll.optDown.afterEndDownScroll = function () {
      _this.callProp = {
        callType: "endDownScroll",
        t: Date.now()
      }; // 触发wxs的方法 (值改变才触发更新)
      var delay = 300 + (_this.mescroll.optDown.beforeEndDelay || 0);
      setTimeout(function () {
        if (_this.downLoadType === 4 || _this.downLoadType === 0) {
          _this.callProp = {
            callType: "clearTransform",
            t: Date.now()
          }; // 触发wxs的方法 (值改变才触发更新)
        }
        // 状态挂载到mescroll对象, 以便在其他组件中使用, 比如<me-video>中
        _this.$set(_this.mescroll, 'downLoadType', _this.downLoadType);
      }, delay);
    };
    // 初始化wxs的数据
    this.wxsCall({
      type: 'setWxsProp'
    });
  }
};
var _default = WxsMixin;
exports.default = _default;

/***/ }),

/***/ 5:
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ 6);
var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ 7);
var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ 8);
var nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ 10);
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 51:
/*!******************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/pagesA/utils/qqmap-wx-jssdk.min.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(wx) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 23));
var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ 24));
var ERROR_CONF = {
  KEY_ERR: 311,
  KEY_ERR_MSG: 'key格式错误',
  PARAM_ERR: 310,
  PARAM_ERR_MSG: '请求参数信息有误',
  SYSTEM_ERR: 600,
  SYSTEM_ERR_MSG: '系统错误',
  WX_ERR_CODE: 1000,
  WX_OK_CODE: 200
};
var BASE_URL = 'https://apis.map.qq.com/ws/';
var URL_SEARCH = BASE_URL + 'place/v1/search';
var URL_SUGGESTION = BASE_URL + 'place/v1/suggestion';
var URL_GET_GEOCODER = BASE_URL + 'geocoder/v1/';
var URL_CITY_LIST = BASE_URL + 'district/v1/list';
var URL_AREA_LIST = BASE_URL + 'district/v1/getchildren';
var URL_DISTANCE = BASE_URL + 'distance/v1/';
var EARTH_RADIUS = 6378136.49;
var Utils = {
  location2query: function location2query(data) {
    if (typeof data == 'string') {
      return data;
    }
    var query = '';
    for (var i = 0; i < data.length; i++) {
      var d = data[i];
      if (!!query) {
        query += ';';
      }
      if (d.location) {
        query = query + d.location.lat + ',' + d.location.lng;
      }
      if (d.latitude && d.longitude) {
        query = query + d.latitude + ',' + d.longitude;
      }
    }
    return query;
  },
  rad: function rad(d) {
    return d * Math.PI / 180.0;
  },
  getEndLocation: function getEndLocation(location) {
    var to = location.split(';');
    var endLocation = [];
    for (var i = 0; i < to.length; i++) {
      endLocation.push({
        lat: parseFloat(to[i].split(',')[0]),
        lng: parseFloat(to[i].split(',')[1])
      });
    }
    return endLocation;
  },
  getDistance: function getDistance(latFrom, lngFrom, latTo, lngTo) {
    var radLatFrom = this.rad(latFrom);
    var radLatTo = this.rad(latTo);
    var a = radLatFrom - radLatTo;
    var b = this.rad(lngFrom) - this.rad(lngTo);
    var distance = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLatFrom) * Math.cos(radLatTo) * Math.pow(Math.sin(b / 2), 2)));
    distance = distance * EARTH_RADIUS;
    distance = Math.round(distance * 10000) / 10000;
    return parseFloat(distance.toFixed(0));
  },
  getWXLocation: function getWXLocation(success, fail, complete) {
    wx.getLocation({
      type: 'gcj02',
      success: success,
      fail: fail,
      complete: complete
    });
  },
  getLocationParam: function getLocationParam(location) {
    if (typeof location == 'string') {
      var locationArr = location.split(',');
      if (locationArr.length === 2) {
        location = {
          latitude: location.split(',')[0],
          longitude: location.split(',')[1]
        };
      } else {
        location = {};
      }
    }
    return location;
  },
  polyfillParam: function polyfillParam(param) {
    param.success = param.success || function () {};
    param.fail = param.fail || function () {};
    param.complete = param.complete || function () {};
  },
  checkParamKeyEmpty: function checkParamKeyEmpty(param, key) {
    if (!param[key]) {
      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + key + '参数格式有误');
      param.fail(errconf);
      param.complete(errconf);
      return true;
    }
    return false;
  },
  checkKeyword: function checkKeyword(param) {
    return !this.checkParamKeyEmpty(param, 'keyword');
  },
  checkLocation: function checkLocation(param) {
    var location = this.getLocationParam(param.location);
    if (!location || !location.latitude || !location.longitude) {
      var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + ' location参数格式有误');
      param.fail(errconf);
      param.complete(errconf);
      return false;
    }
    return true;
  },
  buildErrorConfig: function buildErrorConfig(errCode, errMsg) {
    return {
      status: errCode,
      message: errMsg
    };
  },
  handleData: function handleData(param, data, feature) {
    if (feature === 'search') {
      var searchResult = data.data;
      var searchSimplify = [];
      for (var i = 0; i < searchResult.length; i++) {
        searchSimplify.push({
          id: searchResult[i].id || null,
          title: searchResult[i].title || null,
          latitude: searchResult[i].location && searchResult[i].location.lat || null,
          longitude: searchResult[i].location && searchResult[i].location.lng || null,
          address: searchResult[i].address || null,
          category: searchResult[i].category || null,
          tel: searchResult[i].tel || null,
          adcode: searchResult[i].ad_info && searchResult[i].ad_info.adcode || null,
          city: searchResult[i].ad_info && searchResult[i].ad_info.city || null,
          district: searchResult[i].ad_info && searchResult[i].ad_info.district || null,
          province: searchResult[i].ad_info && searchResult[i].ad_info.province || null
        });
      }
      param.success(data, {
        searchResult: searchResult,
        searchSimplify: searchSimplify
      });
    } else if (feature === 'suggest') {
      var suggestResult = data.data;
      var suggestSimplify = [];
      for (var i = 0; i < suggestResult.length; i++) {
        suggestSimplify.push({
          adcode: suggestResult[i].adcode || null,
          address: suggestResult[i].address || null,
          category: suggestResult[i].category || null,
          city: suggestResult[i].city || null,
          district: suggestResult[i].district || null,
          id: suggestResult[i].id || null,
          latitude: suggestResult[i].location && suggestResult[i].location.lat || null,
          longitude: suggestResult[i].location && suggestResult[i].location.lng || null,
          province: suggestResult[i].province || null,
          title: suggestResult[i].title || null,
          type: suggestResult[i].type || null
        });
      }
      param.success(data, {
        suggestResult: suggestResult,
        suggestSimplify: suggestSimplify
      });
    } else if (feature === 'reverseGeocoder') {
      var reverseGeocoderResult = data.result;
      var reverseGeocoderSimplify = {
        address: reverseGeocoderResult.address || null,
        latitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lat || null,
        longitude: reverseGeocoderResult.location && reverseGeocoderResult.location.lng || null,
        adcode: reverseGeocoderResult.ad_info && reverseGeocoderResult.ad_info.adcode || null,
        city: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.city || null,
        district: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.district || null,
        nation: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.nation || null,
        province: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.province || null,
        street: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street || null,
        street_number: reverseGeocoderResult.address_component && reverseGeocoderResult.address_component.street_number || null,
        recommend: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.recommend || null,
        rough: reverseGeocoderResult.formatted_addresses && reverseGeocoderResult.formatted_addresses.rough || null
      };
      if (reverseGeocoderResult.pois) {
        var pois = reverseGeocoderResult.pois;
        var poisSimplify = [];
        for (var i = 0; i < pois.length; i++) {
          poisSimplify.push({
            id: pois[i].id || null,
            title: pois[i].title || null,
            latitude: pois[i].location && pois[i].location.lat || null,
            longitude: pois[i].location && pois[i].location.lng || null,
            address: pois[i].address || null,
            category: pois[i].category || null,
            adcode: pois[i].ad_info && pois[i].ad_info.adcode || null,
            city: pois[i].ad_info && pois[i].ad_info.city || null,
            district: pois[i].ad_info && pois[i].ad_info.district || null,
            province: pois[i].ad_info && pois[i].ad_info.province || null
          });
        }
        param.success(data, {
          reverseGeocoderResult: reverseGeocoderResult,
          reverseGeocoderSimplify: reverseGeocoderSimplify,
          pois: pois,
          poisSimplify: poisSimplify
        });
      } else {
        param.success(data, {
          reverseGeocoderResult: reverseGeocoderResult,
          reverseGeocoderSimplify: reverseGeocoderSimplify
        });
      }
    } else if (feature === 'geocoder') {
      var geocoderResult = data.result;
      var geocoderSimplify = {
        title: geocoderResult.title || null,
        latitude: geocoderResult.location && geocoderResult.location.lat || null,
        longitude: geocoderResult.location && geocoderResult.location.lng || null,
        adcode: geocoderResult.ad_info && geocoderResult.ad_info.adcode || null,
        province: geocoderResult.address_components && geocoderResult.address_components.province || null,
        city: geocoderResult.address_components && geocoderResult.address_components.city || null,
        district: geocoderResult.address_components && geocoderResult.address_components.district || null,
        street: geocoderResult.address_components && geocoderResult.address_components.street || null,
        street_number: geocoderResult.address_components && geocoderResult.address_components.street_number || null,
        level: geocoderResult.level || null
      };
      param.success(data, {
        geocoderResult: geocoderResult,
        geocoderSimplify: geocoderSimplify
      });
    } else if (feature === 'getCityList') {
      var provinceResult = data.result[0];
      var cityResult = data.result[1];
      var districtResult = data.result[2];
      param.success(data, {
        provinceResult: provinceResult,
        cityResult: cityResult,
        districtResult: districtResult
      });
    } else if (feature === 'getDistrictByCityId') {
      var districtByCity = data.result[0];
      param.success(data, districtByCity);
    } else if (feature === 'calculateDistance') {
      var calculateDistanceResult = data.result.elements;
      var distance = [];
      for (var i = 0; i < calculateDistanceResult.length; i++) {
        distance.push(calculateDistanceResult[i].distance);
      }
      param.success(data, {
        calculateDistanceResult: calculateDistanceResult,
        distance: distance
      });
    } else {
      param.success(data);
    }
  },
  buildWxRequestConfig: function buildWxRequestConfig(param, options, feature) {
    var that = this;
    options.header = {
      "content-type": "application/json"
    };
    options.method = 'GET';
    options.success = function (res) {
      var data = res.data;
      if (data.status === 0) {
        that.handleData(param, data, feature);
      } else {
        param.fail(data);
      }
    };
    options.fail = function (res) {
      res.statusCode = ERROR_CONF.WX_ERR_CODE;
      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));
    };
    options.complete = function (res) {
      var statusCode = +res.statusCode;
      switch (statusCode) {
        case ERROR_CONF.WX_ERR_CODE:
          {
            param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));
            break;
          }
        case ERROR_CONF.WX_OK_CODE:
          {
            var data = res.data;
            if (data.status === 0) {
              param.complete(data);
            } else {
              param.complete(that.buildErrorConfig(data.status, data.message));
            }
            break;
          }
        default:
          {
            param.complete(that.buildErrorConfig(ERROR_CONF.SYSTEM_ERR, ERROR_CONF.SYSTEM_ERR_MSG));
          }
      }
    };
    return options;
  },
  locationProcess: function locationProcess(param, locationsuccess, locationfail, locationcomplete) {
    var that = this;
    locationfail = locationfail || function (res) {
      res.statusCode = ERROR_CONF.WX_ERR_CODE;
      param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));
    };
    locationcomplete = locationcomplete || function (res) {
      if (res.statusCode == ERROR_CONF.WX_ERR_CODE) {
        param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));
      }
    };
    if (!param.location) {
      that.getWXLocation(locationsuccess, locationfail, locationcomplete);
    } else if (that.checkLocation(param)) {
      var location = Utils.getLocationParam(param.location);
      locationsuccess(location);
    }
  }
};
var QQMapWX = /*#__PURE__*/function () {
  function QQMapWX(options) {
    (0, _classCallCheck2.default)(this, QQMapWX);
    if (!options.key) {
      throw Error('key值不能为空');
    }
    this.key = options.key;
  }
  (0, _createClass2.default)(QQMapWX, [{
    key: "search",
    value: function search(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      if (!Utils.checkKeyword(options)) {
        return;
      }
      var requestParam = {
        keyword: options.keyword,
        orderby: options.orderby || '_distance',
        page_size: options.page_size || 10,
        page_index: options.page_index || 1,
        output: 'json',
        key: that.key
      };
      if (options.address_format) {
        requestParam.address_format = options.address_format;
      }
      if (options.filter) {
        requestParam.filter = options.filter;
      }
      var distance = options.distance || "1000";
      var auto_extend = options.auto_extend || 1;
      var region = null;
      var rectangle = null;
      if (options.region) {
        region = options.region;
      }
      if (options.rectangle) {
        rectangle = options.rectangle;
      }
      var locationsuccess = function locationsuccess(result) {
        if (region && !rectangle) {
          requestParam.boundary = "region(" + region + "," + auto_extend + "," + result.latitude + "," + result.longitude + ")";
        } else if (rectangle && !region) {
          requestParam.boundary = "rectangle(" + rectangle + ")";
        } else {
          requestParam.boundary = "nearby(" + result.latitude + "," + result.longitude + "," + distance + "," + auto_extend + ")";
        }
        wx.request(Utils.buildWxRequestConfig(options, {
          url: URL_SEARCH,
          data: requestParam
        }, 'search'));
      };
      Utils.locationProcess(options, locationsuccess);
    }
  }, {
    key: "getSuggestion",
    value: function getSuggestion(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      if (!Utils.checkKeyword(options)) {
        return;
      }
      var requestParam = {
        keyword: options.keyword,
        region: options.region || '全国',
        region_fix: options.region_fix || 0,
        policy: options.policy || 0,
        page_size: options.page_size || 10,
        page_index: options.page_index || 1,
        get_subpois: options.get_subpois || 0,
        output: 'json',
        key: that.key
      };
      if (options.address_format) {
        requestParam.address_format = options.address_format;
      }
      if (options.filter) {
        requestParam.filter = options.filter;
      }
      if (options.location) {
        var locationsuccess = function locationsuccess(result) {
          requestParam.location = result.latitude + ',' + result.longitude;
          wx.request(Utils.buildWxRequestConfig(options, {
            url: URL_SUGGESTION,
            data: requestParam
          }, "suggest"));
        };
        Utils.locationProcess(options, locationsuccess);
      } else {
        wx.request(Utils.buildWxRequestConfig(options, {
          url: URL_SUGGESTION,
          data: requestParam
        }, "suggest"));
      }
    }
  }, {
    key: "reverseGeocoder",
    value: function reverseGeocoder(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      var requestParam = {
        coord_type: options.coord_type || 5,
        get_poi: options.get_poi || 0,
        output: 'json',
        key: that.key
      };
      if (options.poi_options) {
        requestParam.poi_options = options.poi_options;
      }
      var locationsuccess = function locationsuccess(result) {
        requestParam.location = result.latitude + ',' + result.longitude;
        wx.request(Utils.buildWxRequestConfig(options, {
          url: URL_GET_GEOCODER,
          data: requestParam
        }, 'reverseGeocoder'));
      };
      Utils.locationProcess(options, locationsuccess);
    }
  }, {
    key: "geocoder",
    value: function geocoder(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      if (Utils.checkParamKeyEmpty(options, 'address')) {
        return;
      }
      var requestParam = {
        address: options.address,
        output: 'json',
        key: that.key
      };
      if (options.region) {
        requestParam.region = options.region;
      }
      wx.request(Utils.buildWxRequestConfig(options, {
        url: URL_GET_GEOCODER,
        data: requestParam
      }, 'geocoder'));
    }
  }, {
    key: "getCityList",
    value: function getCityList(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      var requestParam = {
        output: 'json',
        key: that.key
      };
      wx.request(Utils.buildWxRequestConfig(options, {
        url: URL_CITY_LIST,
        data: requestParam
      }, 'getCityList'));
    }
  }, {
    key: "getDistrictByCityId",
    value: function getDistrictByCityId(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      if (Utils.checkParamKeyEmpty(options, 'id')) {
        return;
      }
      var requestParam = {
        id: options.id || '',
        output: 'json',
        key: that.key
      };
      wx.request(Utils.buildWxRequestConfig(options, {
        url: URL_AREA_LIST,
        data: requestParam
      }, 'getDistrictByCityId'));
    }
  }, {
    key: "calculateDistance",
    value: function calculateDistance(options) {
      var that = this;
      options = options || {};
      Utils.polyfillParam(options);
      if (Utils.checkParamKeyEmpty(options, 'to')) {
        return;
      }
      var requestParam = {
        mode: options.mode || 'walking',
        to: Utils.location2query(options.to),
        output: 'json',
        key: that.key
      };
      if (options.from) {
        options.location = options.from;
      }
      if (requestParam.mode == 'straight') {
        var locationsuccess = function locationsuccess(result) {
          var locationTo = Utils.getEndLocation(requestParam.to);
          var data = {
            message: "query ok",
            result: {
              elements: []
            },
            status: 0
          };
          for (var i = 0; i < locationTo.length; i++) {
            data.result.elements.push({
              distance: Utils.getDistance(result.latitude, result.longitude, locationTo[i].lat, locationTo[i].lng),
              duration: 0,
              from: {
                lat: result.latitude,
                lng: result.longitude
              },
              to: {
                lat: locationTo[i].lat,
                lng: locationTo[i].lng
              }
            });
          }
          var calculateResult = data.result.elements;
          var distanceResult = [];
          for (var i = 0; i < calculateResult.length; i++) {
            distanceResult.push(calculateResult[i].distance);
          }
          return options.success(data, {
            calculateResult: calculateResult,
            distanceResult: distanceResult
          });
        };
        Utils.locationProcess(options, locationsuccess);
      } else {
        var locationsuccess = function locationsuccess(result) {
          requestParam.from = result.latitude + ',' + result.longitude;
          wx.request(Utils.buildWxRequestConfig(options, {
            url: URL_DISTANCE,
            data: requestParam
          }, 'calculateDistance'));
        };
        Utils.locationProcess(options, locationsuccess);
      }
    }
  }]);
  return QQMapWX;
}();
;
var _default = QQMapWX;
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/wx.js */ 1)["default"]))

/***/ }),

/***/ 536:
/*!************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global, uni, wx) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ 30));
var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ 5));
var _typeof2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/typeof */ 13));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ 18));
var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ 32));
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 11));
var _inherits2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/inherits */ 537));
var _possibleConstructorReturn2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ 538));
var _getPrototypeOf2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ 540));
var _wrapNativeSuper2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ 541));
var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 23));
var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ 24));
var _uniI18n = __webpack_require__(/*! @dcloudio/uni-i18n */ 22);
var _pages = _interopRequireDefault(__webpack_require__(/*! @/pages.json */ 543));
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e33) { throw _e33; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e34) { didErr = true; err = _e34; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
"undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self && self;
function n(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function s(e, t, n) {
  return e(n = {
    path: t,
    exports: {},
    require: function require(e, t) {
      return function () {
        throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs");
      }(null == t && n.path);
    }
  }, n.exports), n.exports;
}
var r = s(function (e, t) {
    var n;
    e.exports = (n = n || function (e, t) {
      var n = Object.create || function () {
          function e() {}
          return function (t) {
            var n;
            return e.prototype = t, n = new e(), e.prototype = null, n;
          };
        }(),
        s = {},
        r = s.lib = {},
        i = r.Base = {
          extend: function extend(e) {
            var t = n(this);
            return e && t.mixIn(e), t.hasOwnProperty("init") && this.init !== t.init || (t.init = function () {
              t.$super.init.apply(this, arguments);
            }), t.init.prototype = t, t.$super = this, t;
          },
          create: function create() {
            var e = this.extend();
            return e.init.apply(e, arguments), e;
          },
          init: function init() {},
          mixIn: function mixIn(e) {
            for (var t in e) {
              e.hasOwnProperty(t) && (this[t] = e[t]);
            }
            e.hasOwnProperty("toString") && (this.toString = e.toString);
          },
          clone: function clone() {
            return this.init.prototype.extend(this);
          }
        },
        o = r.WordArray = i.extend({
          init: function init(e, n) {
            e = this.words = e || [], this.sigBytes = n != t ? n : 4 * e.length;
          },
          toString: function toString(e) {
            return (e || c).stringify(this);
          },
          concat: function concat(e) {
            var t = this.words,
              n = e.words,
              s = this.sigBytes,
              r = e.sigBytes;
            if (this.clamp(), s % 4) for (var i = 0; i < r; i++) {
              var o = n[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              t[s + i >>> 2] |= o << 24 - (s + i) % 4 * 8;
            } else for (i = 0; i < r; i += 4) {
              t[s + i >>> 2] = n[i >>> 2];
            }
            return this.sigBytes += r, this;
          },
          clamp: function clamp() {
            var t = this.words,
              n = this.sigBytes;
            t[n >>> 2] &= 4294967295 << 32 - n % 4 * 8, t.length = e.ceil(n / 4);
          },
          clone: function clone() {
            var e = i.clone.call(this);
            return e.words = this.words.slice(0), e;
          },
          random: function random(t) {
            for (var n, s = [], r = function r(t) {
                t = t;
                var n = 987654321,
                  s = 4294967295;
                return function () {
                  var r = ((n = 36969 * (65535 & n) + (n >> 16) & s) << 16) + (t = 18e3 * (65535 & t) + (t >> 16) & s) & s;
                  return r /= 4294967296, (r += .5) * (e.random() > .5 ? 1 : -1);
                };
              }, i = 0; i < t; i += 4) {
              var a = r(4294967296 * (n || e.random()));
              n = 987654071 * a(), s.push(4294967296 * a() | 0);
            }
            return new o.init(s, t);
          }
        }),
        a = s.enc = {},
        c = a.Hex = {
          stringify: function stringify(e) {
            for (var t = e.words, n = e.sigBytes, s = [], r = 0; r < n; r++) {
              var i = t[r >>> 2] >>> 24 - r % 4 * 8 & 255;
              s.push((i >>> 4).toString(16)), s.push((15 & i).toString(16));
            }
            return s.join("");
          },
          parse: function parse(e) {
            for (var t = e.length, n = [], s = 0; s < t; s += 2) {
              n[s >>> 3] |= parseInt(e.substr(s, 2), 16) << 24 - s % 8 * 4;
            }
            return new o.init(n, t / 2);
          }
        },
        u = a.Latin1 = {
          stringify: function stringify(e) {
            for (var t = e.words, n = e.sigBytes, s = [], r = 0; r < n; r++) {
              var i = t[r >>> 2] >>> 24 - r % 4 * 8 & 255;
              s.push(String.fromCharCode(i));
            }
            return s.join("");
          },
          parse: function parse(e) {
            for (var t = e.length, n = [], s = 0; s < t; s++) {
              n[s >>> 2] |= (255 & e.charCodeAt(s)) << 24 - s % 4 * 8;
            }
            return new o.init(n, t);
          }
        },
        l = a.Utf8 = {
          stringify: function stringify(e) {
            try {
              return decodeURIComponent(escape(u.stringify(e)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function parse(e) {
            return u.parse(unescape(encodeURIComponent(e)));
          }
        },
        h = r.BufferedBlockAlgorithm = i.extend({
          reset: function reset() {
            this._data = new o.init(), this._nDataBytes = 0;
          },
          _append: function _append(e) {
            "string" == typeof e && (e = l.parse(e)), this._data.concat(e), this._nDataBytes += e.sigBytes;
          },
          _process: function _process(t) {
            var n = this._data,
              s = n.words,
              r = n.sigBytes,
              i = this.blockSize,
              a = r / (4 * i),
              c = (a = t ? e.ceil(a) : e.max((0 | a) - this._minBufferSize, 0)) * i,
              u = e.min(4 * c, r);
            if (c) {
              for (var l = 0; l < c; l += i) {
                this._doProcessBlock(s, l);
              }
              var h = s.splice(0, c);
              n.sigBytes -= u;
            }
            return new o.init(h, u);
          },
          clone: function clone() {
            var e = i.clone.call(this);
            return e._data = this._data.clone(), e;
          },
          _minBufferSize: 0
        });
      r.Hasher = h.extend({
        cfg: i.extend(),
        init: function init(e) {
          this.cfg = this.cfg.extend(e), this.reset();
        },
        reset: function reset() {
          h.reset.call(this), this._doReset();
        },
        update: function update(e) {
          return this._append(e), this._process(), this;
        },
        finalize: function finalize(e) {
          return e && this._append(e), this._doFinalize();
        },
        blockSize: 16,
        _createHelper: function _createHelper(e) {
          return function (t, n) {
            return new e.init(n).finalize(t);
          };
        },
        _createHmacHelper: function _createHmacHelper(e) {
          return function (t, n) {
            return new d.HMAC.init(e, n).finalize(t);
          };
        }
      });
      var d = s.algo = {};
      return s;
    }(Math), n);
  }),
  i = r,
  o = (s(function (e, t) {
    var n;
    e.exports = (n = i, function (e) {
      var t = n,
        s = t.lib,
        r = s.WordArray,
        i = s.Hasher,
        o = t.algo,
        a = [];
      !function () {
        for (var t = 0; t < 64; t++) {
          a[t] = 4294967296 * e.abs(e.sin(t + 1)) | 0;
        }
      }();
      var c = o.MD5 = i.extend({
        _doReset: function _doReset() {
          this._hash = new r.init([1732584193, 4023233417, 2562383102, 271733878]);
        },
        _doProcessBlock: function _doProcessBlock(e, t) {
          for (var n = 0; n < 16; n++) {
            var s = t + n,
              r = e[s];
            e[s] = 16711935 & (r << 8 | r >>> 24) | 4278255360 & (r << 24 | r >>> 8);
          }
          var i = this._hash.words,
            o = e[t + 0],
            c = e[t + 1],
            p = e[t + 2],
            f = e[t + 3],
            g = e[t + 4],
            m = e[t + 5],
            y = e[t + 6],
            _ = e[t + 7],
            w = e[t + 8],
            v = e[t + 9],
            b = e[t + 10],
            S = e[t + 11],
            k = e[t + 12],
            I = e[t + 13],
            T = e[t + 14],
            C = e[t + 15],
            A = i[0],
            P = i[1],
            E = i[2],
            O = i[3];
          A = u(A, P, E, O, o, 7, a[0]), O = u(O, A, P, E, c, 12, a[1]), E = u(E, O, A, P, p, 17, a[2]), P = u(P, E, O, A, f, 22, a[3]), A = u(A, P, E, O, g, 7, a[4]), O = u(O, A, P, E, m, 12, a[5]), E = u(E, O, A, P, y, 17, a[6]), P = u(P, E, O, A, _, 22, a[7]), A = u(A, P, E, O, w, 7, a[8]), O = u(O, A, P, E, v, 12, a[9]), E = u(E, O, A, P, b, 17, a[10]), P = u(P, E, O, A, S, 22, a[11]), A = u(A, P, E, O, k, 7, a[12]), O = u(O, A, P, E, I, 12, a[13]), E = u(E, O, A, P, T, 17, a[14]), A = l(A, P = u(P, E, O, A, C, 22, a[15]), E, O, c, 5, a[16]), O = l(O, A, P, E, y, 9, a[17]), E = l(E, O, A, P, S, 14, a[18]), P = l(P, E, O, A, o, 20, a[19]), A = l(A, P, E, O, m, 5, a[20]), O = l(O, A, P, E, b, 9, a[21]), E = l(E, O, A, P, C, 14, a[22]), P = l(P, E, O, A, g, 20, a[23]), A = l(A, P, E, O, v, 5, a[24]), O = l(O, A, P, E, T, 9, a[25]), E = l(E, O, A, P, f, 14, a[26]), P = l(P, E, O, A, w, 20, a[27]), A = l(A, P, E, O, I, 5, a[28]), O = l(O, A, P, E, p, 9, a[29]), E = l(E, O, A, P, _, 14, a[30]), A = h(A, P = l(P, E, O, A, k, 20, a[31]), E, O, m, 4, a[32]), O = h(O, A, P, E, w, 11, a[33]), E = h(E, O, A, P, S, 16, a[34]), P = h(P, E, O, A, T, 23, a[35]), A = h(A, P, E, O, c, 4, a[36]), O = h(O, A, P, E, g, 11, a[37]), E = h(E, O, A, P, _, 16, a[38]), P = h(P, E, O, A, b, 23, a[39]), A = h(A, P, E, O, I, 4, a[40]), O = h(O, A, P, E, o, 11, a[41]), E = h(E, O, A, P, f, 16, a[42]), P = h(P, E, O, A, y, 23, a[43]), A = h(A, P, E, O, v, 4, a[44]), O = h(O, A, P, E, k, 11, a[45]), E = h(E, O, A, P, C, 16, a[46]), A = d(A, P = h(P, E, O, A, p, 23, a[47]), E, O, o, 6, a[48]), O = d(O, A, P, E, _, 10, a[49]), E = d(E, O, A, P, T, 15, a[50]), P = d(P, E, O, A, m, 21, a[51]), A = d(A, P, E, O, k, 6, a[52]), O = d(O, A, P, E, f, 10, a[53]), E = d(E, O, A, P, b, 15, a[54]), P = d(P, E, O, A, c, 21, a[55]), A = d(A, P, E, O, w, 6, a[56]), O = d(O, A, P, E, C, 10, a[57]), E = d(E, O, A, P, y, 15, a[58]), P = d(P, E, O, A, I, 21, a[59]), A = d(A, P, E, O, g, 6, a[60]), O = d(O, A, P, E, S, 10, a[61]), E = d(E, O, A, P, p, 15, a[62]), P = d(P, E, O, A, v, 21, a[63]), i[0] = i[0] + A | 0, i[1] = i[1] + P | 0, i[2] = i[2] + E | 0, i[3] = i[3] + O | 0;
        },
        _doFinalize: function _doFinalize() {
          var t = this._data,
            n = t.words,
            s = 8 * this._nDataBytes,
            r = 8 * t.sigBytes;
          n[r >>> 5] |= 128 << 24 - r % 32;
          var i = e.floor(s / 4294967296),
            o = s;
          n[15 + (r + 64 >>> 9 << 4)] = 16711935 & (i << 8 | i >>> 24) | 4278255360 & (i << 24 | i >>> 8), n[14 + (r + 64 >>> 9 << 4)] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8), t.sigBytes = 4 * (n.length + 1), this._process();
          for (var a = this._hash, c = a.words, u = 0; u < 4; u++) {
            var l = c[u];
            c[u] = 16711935 & (l << 8 | l >>> 24) | 4278255360 & (l << 24 | l >>> 8);
          }
          return a;
        },
        clone: function clone() {
          var e = i.clone.call(this);
          return e._hash = this._hash.clone(), e;
        }
      });
      function u(e, t, n, s, r, i, o) {
        var a = e + (t & n | ~t & s) + r + o;
        return (a << i | a >>> 32 - i) + t;
      }
      function l(e, t, n, s, r, i, o) {
        var a = e + (t & s | n & ~s) + r + o;
        return (a << i | a >>> 32 - i) + t;
      }
      function h(e, t, n, s, r, i, o) {
        var a = e + (t ^ n ^ s) + r + o;
        return (a << i | a >>> 32 - i) + t;
      }
      function d(e, t, n, s, r, i, o) {
        var a = e + (n ^ (t | ~s)) + r + o;
        return (a << i | a >>> 32 - i) + t;
      }
      t.MD5 = i._createHelper(c), t.HmacMD5 = i._createHmacHelper(c);
    }(Math), n.MD5);
  }), s(function (e, t) {
    var n;
    e.exports = (n = i, void function () {
      var e = n,
        t = e.lib.Base,
        s = e.enc.Utf8;
      e.algo.HMAC = t.extend({
        init: function init(e, t) {
          e = this._hasher = new e.init(), "string" == typeof t && (t = s.parse(t));
          var n = e.blockSize,
            r = 4 * n;
          t.sigBytes > r && (t = e.finalize(t)), t.clamp();
          for (var i = this._oKey = t.clone(), o = this._iKey = t.clone(), a = i.words, c = o.words, u = 0; u < n; u++) {
            a[u] ^= 1549556828, c[u] ^= 909522486;
          }
          i.sigBytes = o.sigBytes = r, this.reset();
        },
        reset: function reset() {
          var e = this._hasher;
          e.reset(), e.update(this._iKey);
        },
        update: function update(e) {
          return this._hasher.update(e), this;
        },
        finalize: function finalize(e) {
          var t = this._hasher,
            n = t.finalize(e);
          return t.reset(), t.finalize(this._oKey.clone().concat(n));
        }
      });
    }());
  }), s(function (e, t) {
    e.exports = i.HmacMD5;
  })),
  a = s(function (e, t) {
    e.exports = i.enc.Utf8;
  }),
  c = s(function (e, t) {
    var n;
    e.exports = (n = i, function () {
      var e = n,
        t = e.lib.WordArray;
      function s(e, n, s) {
        for (var r = [], i = 0, o = 0; o < n; o++) {
          if (o % 4) {
            var a = s[e.charCodeAt(o - 1)] << o % 4 * 2,
              c = s[e.charCodeAt(o)] >>> 6 - o % 4 * 2;
            r[i >>> 2] |= (a | c) << 24 - i % 4 * 8, i++;
          }
        }
        return t.create(r, i);
      }
      e.enc.Base64 = {
        stringify: function stringify(e) {
          var t = e.words,
            n = e.sigBytes,
            s = this._map;
          e.clamp();
          for (var r = [], i = 0; i < n; i += 3) {
            for (var o = (t[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (t[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | t[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255, a = 0; a < 4 && i + .75 * a < n; a++) {
              r.push(s.charAt(o >>> 6 * (3 - a) & 63));
            }
          }
          var c = s.charAt(64);
          if (c) for (; r.length % 4;) {
            r.push(c);
          }
          return r.join("");
        },
        parse: function parse(e) {
          var t = e.length,
            n = this._map,
            r = this._reverseMap;
          if (!r) {
            r = this._reverseMap = [];
            for (var i = 0; i < n.length; i++) {
              r[n.charCodeAt(i)] = i;
            }
          }
          var o = n.charAt(64);
          if (o) {
            var a = e.indexOf(o);
            -1 !== a && (t = a);
          }
          return s(e, t, r);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
    }(), n.enc.Base64);
  });
var u = "FUNCTION",
  l = "OBJECT",
  h = "CLIENT_DB",
  d = "pending",
  p = "fullfilled",
  f = "rejected";
function g(e) {
  return Object.prototype.toString.call(e).slice(8, -1).toLowerCase();
}
function m(e) {
  return "object" === g(e);
}
function y(e) {
  return "function" == typeof e;
}
function _(e) {
  return function () {
    try {
      return e.apply(e, arguments);
    } catch (e) {
      console.error(e);
    }
  };
}
var w = "REJECTED",
  v = "NOT_PENDING";
var b = /*#__PURE__*/function () {
  function b() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      e = _ref.createPromise,
      _ref$retryRule = _ref.retryRule,
      t = _ref$retryRule === void 0 ? w : _ref$retryRule;
    (0, _classCallCheck2.default)(this, b);
    this.createPromise = e, this.status = null, this.promise = null, this.retryRule = t;
  }
  (0, _createClass2.default)(b, [{
    key: "needRetry",
    get: function get() {
      if (!this.status) return !0;
      switch (this.retryRule) {
        case w:
          return this.status === f;
        case v:
          return this.status !== d;
      }
    }
  }, {
    key: "exec",
    value: function exec() {
      var _this = this;
      return this.needRetry ? (this.status = d, this.promise = this.createPromise().then(function (e) {
        return _this.status = p, Promise.resolve(e);
      }, function (e) {
        return _this.status = f, Promise.reject(e);
      }), this.promise) : this.promise;
    }
  }]);
  return b;
}();
function S(e) {
  return e && "string" == typeof e ? JSON.parse(e) : e;
}
var k = "development" === "development",
  I = "mp-weixin",
  T = "true" === undefined || !0 === undefined,
  C = S([]),
  A = "h5" === I ? "web" : "app-plus" === I ? "app" : I,
  P = S(undefined),
  E = S([]) || [],
  O = true;
var x = "";
try {
  x = (__webpack_require__(/*! uni-stat-config */ 544).default || __webpack_require__(/*! uni-stat-config */ 544)).appid;
} catch (e) {}
var R = {};
function U(e) {
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var n, s;
  return n = R, s = e, Object.prototype.hasOwnProperty.call(n, s) || (R[e] = t), R[e];
}
"app" === A && (R = uni._globalUniCloudObj ? uni._globalUniCloudObj : uni._globalUniCloudObj = {});
var L = ["invoke", "success", "fail", "complete"],
  N = U("_globalUniCloudInterceptor");
function D(e, t) {
  N[e] || (N[e] = {}), m(t) && Object.keys(t).forEach(function (n) {
    L.indexOf(n) > -1 && function (e, t, n) {
      var s = N[e][t];
      s || (s = N[e][t] = []), -1 === s.indexOf(n) && y(n) && s.push(n);
    }(e, n, t[n]);
  });
}
function F(e, t) {
  N[e] || (N[e] = {}), m(t) ? Object.keys(t).forEach(function (n) {
    L.indexOf(n) > -1 && function (e, t, n) {
      var s = N[e][t];
      if (!s) return;
      var r = s.indexOf(n);
      r > -1 && s.splice(r, 1);
    }(e, n, t[n]);
  }) : delete N[e];
}
function q(e, t) {
  return e && 0 !== e.length ? e.reduce(function (e, n) {
    return e.then(function () {
      return n(t);
    });
  }, Promise.resolve()) : Promise.resolve();
}
function K(e, t) {
  return N[e] && N[e][t] || [];
}
function M(e) {
  D("callObject", e);
}
var j = U("_globalUniCloudListener"),
  B = "response",
  $ = "needLogin",
  W = "refreshToken",
  z = "clientdb",
  J = "cloudfunction",
  H = "cloudobject";
function G(e) {
  return j[e] || (j[e] = []), j[e];
}
function V(e, t) {
  var n = G(e);
  n.includes(t) || n.push(t);
}
function Y(e, t) {
  var n = G(e),
    s = n.indexOf(t);
  -1 !== s && n.splice(s, 1);
}
function Q(e, t) {
  var n = G(e);
  for (var _e2 = 0; _e2 < n.length; _e2++) {
    (0, n[_e2])(t);
  }
}
var X,
  Z = !1;
function ee() {
  return X || (X = new Promise(function (e) {
    Z && e(), function t() {
      if ("function" == typeof getCurrentPages) {
        var _t2 = getCurrentPages();
        _t2 && _t2[0] && (Z = !0, e());
      }
      Z || setTimeout(function () {
        t();
      }, 30);
    }();
  }), X);
}
function te(e) {
  var t = {};
  for (var _n2 in e) {
    var _s2 = e[_n2];
    y(_s2) && (t[_n2] = _(_s2));
  }
  return t;
}
var ne = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(ne, _Error);
  var _super = _createSuper(ne);
  function ne(e) {
    var _this2;
    (0, _classCallCheck2.default)(this, ne);
    _this2 = _super.call(this, e.message), _this2.errMsg = e.message || e.errMsg || "unknown system error", _this2.code = _this2.errCode = e.code || e.errCode || "SYSTEM_ERROR", _this2.errSubject = _this2.subject = e.subject || e.errSubject, _this2.cause = e.cause, _this2.requestId = e.requestId;
    return _this2;
  }
  (0, _createClass2.default)(ne, [{
    key: "toJson",
    value: function toJson() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (!(e >= 10)) return e++, {
        errCode: this.errCode,
        errMsg: this.errMsg,
        errSubject: this.errSubject,
        cause: this.cause && this.cause.toJson ? this.cause.toJson(e) : this.cause
      };
    }
  }]);
  return ne;
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
var se = {
  request: function request(e) {
    return uni.request(e);
  },
  uploadFile: function uploadFile(e) {
    return uni.uploadFile(e);
  },
  setStorageSync: function setStorageSync(e, t) {
    return uni.setStorageSync(e, t);
  },
  getStorageSync: function getStorageSync(e) {
    return uni.getStorageSync(e);
  },
  removeStorageSync: function removeStorageSync(e) {
    return uni.removeStorageSync(e);
  },
  clearStorageSync: function clearStorageSync() {
    return uni.clearStorageSync();
  }
};
function re() {
  return {
    token: se.getStorageSync("uni_id_token") || se.getStorageSync("uniIdToken"),
    tokenExpired: se.getStorageSync("uni_id_token_expired")
  };
}
function ie() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    e = _ref2.token,
    t = _ref2.tokenExpired;
  e && se.setStorageSync("uni_id_token", e), t && se.setStorageSync("uni_id_token_expired", t);
}
var oe, ae;
function ce() {
  return oe || (oe = uni.getSystemInfoSync()), oe;
}
function ue() {
  var e, t;
  try {
    if (uni.getLaunchOptionsSync) {
      if (uni.getLaunchOptionsSync.toString().indexOf("not yet implemented") > -1) return;
      var _uni$getLaunchOptions = uni.getLaunchOptionsSync(),
        _n3 = _uni$getLaunchOptions.scene,
        _s3 = _uni$getLaunchOptions.channel;
      e = _s3, t = _n3;
    }
  } catch (e) {}
  return {
    channel: e,
    scene: t
  };
}
function le() {
  var e = uni.getLocale && uni.getLocale() || "en";
  if (ae) return _objectSpread(_objectSpread({}, ae), {}, {
    locale: e,
    LOCALE: e
  });
  var t = ce(),
    n = t.deviceId,
    s = t.osName,
    r = t.uniPlatform,
    i = t.appId,
    o = ["pixelRatio", "brand", "model", "system", "language", "version", "platform", "host", "SDKVersion", "swanNativeVersion", "app", "AppPlatform", "fontSizeSetting"];
  for (var _e3 = 0; _e3 < o.length; _e3++) {
    delete t[o[_e3]];
  }
  return ae = _objectSpread(_objectSpread({
    PLATFORM: r,
    OS: s,
    APPID: i,
    DEVICEID: n
  }, ue()), t), _objectSpread(_objectSpread({}, ae), {}, {
    locale: e,
    LOCALE: e
  });
}
var he = {
    sign: function sign(e, t) {
      var n = "";
      return Object.keys(e).sort().forEach(function (t) {
        e[t] && (n = n + "&" + t + "=" + e[t]);
      }), n = n.slice(1), o(n, t).toString();
    },
    wrappedRequest: function wrappedRequest(e, t) {
      return new Promise(function (n, s) {
        t(Object.assign(e, {
          complete: function complete(e) {
            e || (e = {}), k && "web" === A && e.errMsg && 0 === e.errMsg.indexOf("request:fail") && console.warn("发布H5，需要在uniCloud后台操作，绑定安全域名，否则会因为跨域问题而无法访问。教程参考：https://uniapp.dcloud.io/uniCloud/quickstart?id=useinh5");
            var t = e.data && e.data.header && e.data.header["x-serverless-request-id"] || e.header && e.header["request-id"];
            if (!e.statusCode || e.statusCode >= 400) return s(new ne({
              code: "SYS_ERR",
              message: e.errMsg || "request:fail",
              requestId: t
            }));
            var r = e.data;
            if (r.error) return s(new ne({
              code: r.error.code,
              message: r.error.message,
              requestId: t
            }));
            r.result = r.data, r.requestId = t, delete r.data, n(r);
          }
        }));
      });
    },
    toBase64: function toBase64(e) {
      return c.stringify(a.parse(e));
    }
  },
  de = {
    "uniCloud.init.paramRequired": "{param} required",
    "uniCloud.uploadFile.fileError": "filePath should be instance of File"
  };
var _e4 = (0, _uniI18n.initVueI18n)({
    "zh-Hans": {
      "uniCloud.init.paramRequired": "缺少参数：{param}",
      "uniCloud.uploadFile.fileError": "filePath应为File对象"
    },
    "zh-Hant": {
      "uniCloud.init.paramRequired": "缺少参数：{param}",
      "uniCloud.uploadFile.fileError": "filePath应为File对象"
    },
    en: de,
    fr: {
      "uniCloud.init.paramRequired": "{param} required",
      "uniCloud.uploadFile.fileError": "filePath should be instance of File"
    },
    es: {
      "uniCloud.init.paramRequired": "{param} required",
      "uniCloud.uploadFile.fileError": "filePath should be instance of File"
    },
    ja: de
  }, "zh-Hans"),
  pe = _e4.t;
var fe = /*#__PURE__*/function () {
  function fe(e) {
    var _this3 = this;
    (0, _classCallCheck2.default)(this, fe);
    ["spaceId", "clientSecret"].forEach(function (t) {
      if (!Object.prototype.hasOwnProperty.call(e, t)) throw new Error(pe("uniCloud.init.paramRequired", {
        param: t
      }));
    }), this.config = Object.assign({}, {
      endpoint: 0 === e.spaceId.indexOf("mp-") ? "https://api.next.bspapp.com" : "https://api.bspapp.com"
    }, e), this.config.provider = "aliyun", this.config.requestUrl = this.config.endpoint + "/client", this.config.envType = this.config.envType || "public", this.config.accessTokenKey = "access_token_" + this.config.spaceId, this.adapter = se, this._getAccessTokenPromiseHub = new b({
      createPromise: function createPromise() {
        return _this3.requestAuth(_this3.setupRequest({
          method: "serverless.auth.user.anonymousAuthorize",
          params: "{}"
        }, "auth")).then(function (e) {
          if (!e.result || !e.result.accessToken) throw new ne({
            code: "AUTH_FAILED",
            message: "获取accessToken失败"
          });
          _this3.setAccessToken(e.result.accessToken);
        });
      },
      retryRule: v
    });
  }
  (0, _createClass2.default)(fe, [{
    key: "hasAccessToken",
    get: function get() {
      return !!this.accessToken;
    }
  }, {
    key: "setAccessToken",
    value: function setAccessToken(e) {
      this.accessToken = e;
    }
  }, {
    key: "requestWrapped",
    value: function requestWrapped(e) {
      return he.wrappedRequest(e, this.adapter.request);
    }
  }, {
    key: "requestAuth",
    value: function requestAuth(e) {
      return this.requestWrapped(e);
    }
  }, {
    key: "request",
    value: function request(e, t) {
      var _this4 = this;
      return Promise.resolve().then(function () {
        return _this4.hasAccessToken ? t ? _this4.requestWrapped(e) : _this4.requestWrapped(e).catch(function (t) {
          return new Promise(function (e, n) {
            !t || "GATEWAY_INVALID_TOKEN" !== t.code && "InvalidParameter.InvalidToken" !== t.code ? n(t) : e();
          }).then(function () {
            return _this4.getAccessToken();
          }).then(function () {
            var t = _this4.rebuildRequest(e);
            return _this4.request(t, !0);
          });
        }) : _this4.getAccessToken().then(function () {
          var t = _this4.rebuildRequest(e);
          return _this4.request(t, !0);
        });
      });
    }
  }, {
    key: "rebuildRequest",
    value: function rebuildRequest(e) {
      var t = Object.assign({}, e);
      return t.data.token = this.accessToken, t.header["x-basement-token"] = this.accessToken, t.header["x-serverless-sign"] = he.sign(t.data, this.config.clientSecret), t;
    }
  }, {
    key: "setupRequest",
    value: function setupRequest(e, t) {
      var n = Object.assign({}, e, {
          spaceId: this.config.spaceId,
          timestamp: Date.now()
        }),
        s = {
          "Content-Type": "application/json"
        };
      return "auth" !== t && (n.token = this.accessToken, s["x-basement-token"] = this.accessToken), s["x-serverless-sign"] = he.sign(n, this.config.clientSecret), {
        url: this.config.requestUrl,
        method: "POST",
        data: n,
        dataType: "json",
        header: s
      };
    }
  }, {
    key: "getAccessToken",
    value: function getAccessToken() {
      return this._getAccessTokenPromiseHub.exec();
    }
  }, {
    key: "authorize",
    value: function () {
      var _authorize = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.getAccessToken();
              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function authorize() {
        return _authorize.apply(this, arguments);
      }
      return authorize;
    }()
  }, {
    key: "callFunction",
    value: function callFunction(e) {
      var t = {
        method: "serverless.function.runtime.invoke",
        params: JSON.stringify({
          functionTarget: e.name,
          functionArgs: e.data || {}
        })
      };
      return this.request(this.setupRequest(t));
    }
  }, {
    key: "getOSSUploadOptionsFromPath",
    value: function getOSSUploadOptionsFromPath(e) {
      var t = {
        method: "serverless.file.resource.generateProximalSign",
        params: JSON.stringify(e)
      };
      return this.request(this.setupRequest(t));
    }
  }, {
    key: "uploadFileToOSS",
    value: function uploadFileToOSS(_ref3) {
      var _this5 = this;
      var e = _ref3.url,
        t = _ref3.formData,
        n = _ref3.name,
        s = _ref3.filePath,
        r = _ref3.fileType,
        i = _ref3.onUploadProgress;
      return new Promise(function (o, a) {
        var c = _this5.adapter.uploadFile({
          url: e,
          formData: t,
          name: n,
          filePath: s,
          fileType: r,
          header: {
            "X-OSS-server-side-encrpytion": "AES256"
          },
          success: function success(e) {
            e && e.statusCode < 400 ? o(e) : a(new ne({
              code: "UPLOAD_FAILED",
              message: "文件上传失败"
            }));
          },
          fail: function fail(e) {
            a(new ne({
              code: e.code || "UPLOAD_FAILED",
              message: e.message || e.errMsg || "文件上传失败"
            }));
          }
        });
        "function" == typeof i && c && "function" == typeof c.onProgressUpdate && c.onProgressUpdate(function (e) {
          i({
            loaded: e.totalBytesSent,
            total: e.totalBytesExpectedToSend
          });
        });
      });
    }
  }, {
    key: "reportOSSUpload",
    value: function reportOSSUpload(e) {
      var t = {
        method: "serverless.file.resource.report",
        params: JSON.stringify(e)
      };
      return this.request(this.setupRequest(t));
    }
  }, {
    key: "uploadFile",
    value: function () {
      var _uploadFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(_ref4) {
        var e, t, _ref4$fileType, n, s, r, i, o, a, c, u, l, h, d, p, f, m, y, _e5, _;
        return _regenerator.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                e = _ref4.filePath, t = _ref4.cloudPath, _ref4$fileType = _ref4.fileType, n = _ref4$fileType === void 0 ? "image" : _ref4$fileType, s = _ref4.onUploadProgress, r = _ref4.config;
                if (!("string" !== g(t))) {
                  _context2.next = 3;
                  break;
                }
                throw new ne({
                  code: "INVALID_PARAM",
                  message: "cloudPath必须为字符串类型"
                });
              case 3:
                if (t = t.trim()) {
                  _context2.next = 5;
                  break;
                }
                throw new ne({
                  code: "CLOUDPATH_REQUIRED",
                  message: "cloudPath不可为空"
                });
              case 5:
                if (!/:\/\//.test(t)) {
                  _context2.next = 7;
                  break;
                }
                throw new ne({
                  code: "INVALID_PARAM",
                  message: "cloudPath不合法"
                });
              case 7:
                i = r && r.envType || this.config.envType;
                _context2.next = 10;
                return this.getOSSUploadOptionsFromPath({
                  env: i,
                  filename: t
                });
              case 10:
                o = _context2.sent.result;
                a = "https://" + o.cdnDomain + "/" + o.ossPath;
                c = o.securityToken;
                u = o.accessKeyId;
                l = o.signature;
                h = o.host;
                d = o.ossPath;
                p = o.id;
                f = o.policy;
                m = o.ossCallbackUrl;
                y = {
                  "Cache-Control": "max-age=2592000",
                  "Content-Disposition": "attachment",
                  OSSAccessKeyId: u,
                  Signature: l,
                  host: h,
                  id: p,
                  key: d,
                  policy: f,
                  success_action_status: 200
                };
                if (c && (y["x-oss-security-token"] = c), m) {
                  _e5 = JSON.stringify({
                    callbackUrl: m,
                    callbackBody: JSON.stringify({
                      fileId: p,
                      spaceId: this.config.spaceId
                    }),
                    callbackBodyType: "application/json"
                  });
                  y.callback = he.toBase64(_e5);
                }
                _ = {
                  url: "https://" + o.host,
                  formData: y,
                  fileName: "file",
                  name: "file",
                  filePath: e,
                  fileType: n
                };
                _context2.next = 25;
                return this.uploadFileToOSS(Object.assign({}, _, {
                  onUploadProgress: s
                }));
              case 25:
                if (!m) {
                  _context2.next = 27;
                  break;
                }
                return _context2.abrupt("return", {
                  success: !0,
                  filePath: e,
                  fileID: a
                });
              case 27:
                _context2.next = 29;
                return this.reportOSSUpload({
                  id: p
                });
              case 29:
                if (!_context2.sent.success) {
                  _context2.next = 31;
                  break;
                }
                return _context2.abrupt("return", {
                  success: !0,
                  filePath: e,
                  fileID: a
                });
              case 31:
                throw new ne({
                  code: "UPLOAD_FAILED",
                  message: "文件上传失败"
                });
              case 32:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function uploadFile(_x) {
        return _uploadFile.apply(this, arguments);
      }
      return uploadFile;
    }()
  }, {
    key: "getTempFileURL",
    value: function getTempFileURL() {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        e = _ref5.fileList;
      return new Promise(function (t, n) {
        Array.isArray(e) && 0 !== e.length || n(new ne({
          code: "INVALID_PARAM",
          message: "fileList的元素必须是非空的字符串"
        })), t({
          fileList: e.map(function (e) {
            return {
              fileID: e,
              tempFileURL: e
            };
          })
        });
      });
    }
  }, {
    key: "getFileInfo",
    value: function () {
      var _getFileInfo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {
        var _ref6,
          e,
          t,
          _args3 = arguments;
        return _regenerator.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _ref6 = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {}, e = _ref6.fileList;
                if (!(!Array.isArray(e) || 0 === e.length)) {
                  _context3.next = 3;
                  break;
                }
                throw new ne({
                  code: "INVALID_PARAM",
                  message: "fileList的元素必须是非空的字符串"
                });
              case 3:
                t = {
                  method: "serverless.file.resource.info",
                  params: JSON.stringify({
                    id: e.map(function (e) {
                      return e.split("?")[0];
                    }).join(",")
                  })
                };
                _context3.next = 6;
                return this.request(this.setupRequest(t));
              case 6:
                _context3.t0 = _context3.sent.result;
                return _context3.abrupt("return", {
                  fileList: _context3.t0
                });
              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      function getFileInfo() {
        return _getFileInfo.apply(this, arguments);
      }
      return getFileInfo;
    }()
  }]);
  return fe;
}();
var ge = {
  init: function init(e) {
    var t = new fe(e),
      n = {
        signInAnonymously: function signInAnonymously() {
          return t.authorize();
        },
        getLoginState: function getLoginState() {
          return Promise.resolve(!1);
        }
      };
    return t.auth = function () {
      return n;
    }, t.customAuth = t.auth, t;
  }
};
var me = "undefined" != typeof location && "http:" === location.protocol ? "http:" : "https:";
var ye;
!function (e) {
  e.local = "local", e.none = "none", e.session = "session";
}(ye || (ye = {}));
var _e = function _e() {};
var we = function we() {
  var e;
  if (!Promise) {
    e = function e() {}, e.promise = {};
    var _t3 = function _t3() {
      throw new ne({
        message: 'Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.'
      });
    };
    return Object.defineProperty(e.promise, "then", {
      get: _t3
    }), Object.defineProperty(e.promise, "catch", {
      get: _t3
    }), e;
  }
  var t = new Promise(function (t, n) {
    e = function e(_e6, s) {
      return _e6 ? n(_e6) : t(s);
    };
  });
  return e.promise = t, e;
};
function ve(e) {
  return void 0 === e;
}
function be(e) {
  return "[object Null]" === Object.prototype.toString.call(e);
}
var Se;
function ke(e) {
  var t = (n = e, "[object Array]" === Object.prototype.toString.call(n) ? e : [e]);
  var n;
  var _iterator = _createForOfIteratorHelper(t),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _e7 = _step.value;
      var _t4 = _e7.isMatch,
        _n4 = _e7.genAdapter,
        _s4 = _e7.runtime;
      if (_t4()) return {
        adapter: _n4(),
        runtime: _s4
      };
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
!function (e) {
  e.WEB = "web", e.WX_MP = "wx_mp";
}(Se || (Se = {}));
var Ie = {
    adapter: null,
    runtime: void 0
  },
  Te = ["anonymousUuidKey"];
var Ce = /*#__PURE__*/function (_e8) {
  (0, _inherits2.default)(Ce, _e8);
  var _super2 = _createSuper(Ce);
  function Ce() {
    var _this6;
    (0, _classCallCheck2.default)(this, Ce);
    _this6 = _super2.call(this), Ie.adapter.root.tcbObject || (Ie.adapter.root.tcbObject = {});
    return _this6;
  }
  (0, _createClass2.default)(Ce, [{
    key: "setItem",
    value: function setItem(e, t) {
      Ie.adapter.root.tcbObject[e] = t;
    }
  }, {
    key: "getItem",
    value: function getItem(e) {
      return Ie.adapter.root.tcbObject[e];
    }
  }, {
    key: "removeItem",
    value: function removeItem(e) {
      delete Ie.adapter.root.tcbObject[e];
    }
  }, {
    key: "clear",
    value: function clear() {
      delete Ie.adapter.root.tcbObject;
    }
  }]);
  return Ce;
}(_e);
function Ae(e, t) {
  switch (e) {
    case "local":
      return t.localStorage || new Ce();
    case "none":
      return new Ce();
    default:
      return t.sessionStorage || new Ce();
  }
}
var Pe = /*#__PURE__*/function () {
  function Pe(e) {
    (0, _classCallCheck2.default)(this, Pe);
    if (!this._storage) {
      this._persistence = Ie.adapter.primaryStorage || e.persistence, this._storage = Ae(this._persistence, Ie.adapter);
      var _t5 = "access_token_".concat(e.env),
        _n5 = "access_token_expire_".concat(e.env),
        _s5 = "refresh_token_".concat(e.env),
        _r = "anonymous_uuid_".concat(e.env),
        _i = "login_type_".concat(e.env),
        _o = "user_info_".concat(e.env);
      this.keys = {
        accessTokenKey: _t5,
        accessTokenExpireKey: _n5,
        refreshTokenKey: _s5,
        anonymousUuidKey: _r,
        loginTypeKey: _i,
        userInfoKey: _o
      };
    }
  }
  (0, _createClass2.default)(Pe, [{
    key: "updatePersistence",
    value: function updatePersistence(e) {
      if (e === this._persistence) return;
      var t = "local" === this._persistence;
      this._persistence = e;
      var n = Ae(e, Ie.adapter);
      for (var _e9 in this.keys) {
        var _s6 = this.keys[_e9];
        if (t && Te.includes(_e9)) continue;
        var _r2 = this._storage.getItem(_s6);
        ve(_r2) || be(_r2) || (n.setItem(_s6, _r2), this._storage.removeItem(_s6));
      }
      this._storage = n;
    }
  }, {
    key: "setStore",
    value: function setStore(e, t, n) {
      if (!this._storage) return;
      var s = {
          version: n || "localCachev1",
          content: t
        },
        r = JSON.stringify(s);
      try {
        this._storage.setItem(e, r);
      } catch (e) {
        throw e;
      }
    }
  }, {
    key: "getStore",
    value: function getStore(e, t) {
      try {
        if (!this._storage) return;
      } catch (e) {
        return "";
      }
      t = t || "localCachev1";
      var n = this._storage.getItem(e);
      if (!n) return "";
      if (n.indexOf(t) >= 0) {
        return JSON.parse(n).content;
      }
      return "";
    }
  }, {
    key: "removeStore",
    value: function removeStore(e) {
      this._storage.removeItem(e);
    }
  }]);
  return Pe;
}();
var Ee = {},
  Oe = {};
function xe(e) {
  return Ee[e];
}
var Re = /*#__PURE__*/(0, _createClass2.default)(function Re(e, t) {
  (0, _classCallCheck2.default)(this, Re);
  this.data = t || null, this.name = e;
});
var Ue = /*#__PURE__*/function (_Re) {
  (0, _inherits2.default)(Ue, _Re);
  var _super3 = _createSuper(Ue);
  function Ue(e, t) {
    var _this7;
    (0, _classCallCheck2.default)(this, Ue);
    _this7 = _super3.call(this, "error", {
      error: e,
      data: t
    }), _this7.error = e;
    return _this7;
  }
  return (0, _createClass2.default)(Ue);
}(Re);
var Le = new ( /*#__PURE__*/function () {
  function _class() {
    (0, _classCallCheck2.default)(this, _class);
    this._listeners = {};
  }
  (0, _createClass2.default)(_class, [{
    key: "on",
    value: function on(e, t) {
      return function (e, t, n) {
        n[e] = n[e] || [], n[e].push(t);
      }(e, t, this._listeners), this;
    }
  }, {
    key: "off",
    value: function off(e, t) {
      return function (e, t, n) {
        if (n && n[e]) {
          var _s7 = n[e].indexOf(t);
          -1 !== _s7 && n[e].splice(_s7, 1);
        }
      }(e, t, this._listeners), this;
    }
  }, {
    key: "fire",
    value: function fire(e, t) {
      if (e instanceof Ue) return console.error(e.error), this;
      var n = "string" == typeof e ? new Re(e, t || {}) : e;
      var s = n.name;
      if (this._listens(s)) {
        n.target = this;
        var _e10 = this._listeners[s] ? (0, _toConsumableArray2.default)(this._listeners[s]) : [];
        var _iterator2 = _createForOfIteratorHelper(_e10),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _t6 = _step2.value;
            _t6.call(this, n);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return this;
    }
  }, {
    key: "_listens",
    value: function _listens(e) {
      return this._listeners[e] && this._listeners[e].length > 0;
    }
  }]);
  return _class;
}())();
function Ne(e, t) {
  Le.on(e, t);
}
function De(e) {
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  Le.fire(e, t);
}
function Fe(e, t) {
  Le.off(e, t);
}
var qe = "loginStateChanged",
  Ke = "loginStateExpire",
  Me = "loginTypeChanged",
  je = "anonymousConverted",
  Be = "refreshAccessToken";
var $e;
!function (e) {
  e.ANONYMOUS = "ANONYMOUS", e.WECHAT = "WECHAT", e.WECHAT_PUBLIC = "WECHAT-PUBLIC", e.WECHAT_OPEN = "WECHAT-OPEN", e.CUSTOM = "CUSTOM", e.EMAIL = "EMAIL", e.USERNAME = "USERNAME", e.NULL = "NULL";
}($e || ($e = {}));
var We = ["auth.getJwt", "auth.logout", "auth.signInWithTicket", "auth.signInAnonymously", "auth.signIn", "auth.fetchAccessTokenWithRefreshToken", "auth.signUpWithEmailAndPassword", "auth.activateEndUserMail", "auth.sendPasswordResetEmail", "auth.resetPasswordWithToken", "auth.isUsernameRegistered"],
  ze = {
    "X-SDK-Version": "1.3.5"
  };
function Je(e, t, n) {
  var s = e[t];
  e[t] = function (t) {
    var r = {},
      i = {};
    n.forEach(function (n) {
      var _n$call = n.call(e, t),
        s = _n$call.data,
        o = _n$call.headers;
      Object.assign(r, s), Object.assign(i, o);
    });
    var o = t.data;
    return o && function () {
      var e;
      if (e = o, "[object FormData]" !== Object.prototype.toString.call(e)) t.data = _objectSpread(_objectSpread({}, o), r);else for (var _e11 in r) {
        o.append(_e11, r[_e11]);
      }
    }(), t.headers = _objectSpread(_objectSpread({}, t.headers || {}), i), s.call(e, t);
  };
}
function He() {
  var e = Math.random().toString(16).slice(2);
  return {
    data: {
      seqId: e
    },
    headers: _objectSpread(_objectSpread({}, ze), {}, {
      "x-seqid": e
    })
  };
}
var Ge = /*#__PURE__*/function () {
  function Ge() {
    var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck2.default)(this, Ge);
    var t;
    this.config = e, this._reqClass = new Ie.adapter.reqClass({
      timeout: this.config.timeout,
      timeoutMsg: "\u8BF7\u6C42\u5728".concat(this.config.timeout / 1e3, "s\u5185\u672A\u5B8C\u6210\uFF0C\u5DF2\u4E2D\u65AD"),
      restrictedMethods: ["post"]
    }), this._cache = xe(this.config.env), this._localCache = (t = this.config.env, Oe[t]), Je(this._reqClass, "post", [He]), Je(this._reqClass, "upload", [He]), Je(this._reqClass, "download", [He]);
  }
  (0, _createClass2.default)(Ge, [{
    key: "post",
    value: function () {
      var _post = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(e) {
        return _regenerator.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this._reqClass.post(e);
              case 2:
                return _context4.abrupt("return", _context4.sent);
              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      function post(_x2) {
        return _post.apply(this, arguments);
      }
      return post;
    }()
  }, {
    key: "upload",
    value: function () {
      var _upload = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(e) {
        return _regenerator.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this._reqClass.upload(e);
              case 2:
                return _context5.abrupt("return", _context5.sent);
              case 3:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      function upload(_x3) {
        return _upload.apply(this, arguments);
      }
      return upload;
    }()
  }, {
    key: "download",
    value: function () {
      var _download = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(e) {
        return _regenerator.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this._reqClass.download(e);
              case 2:
                return _context6.abrupt("return", _context6.sent);
              case 3:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
      function download(_x4) {
        return _download.apply(this, arguments);
      }
      return download;
    }()
  }, {
    key: "refreshAccessToken",
    value: function () {
      var _refreshAccessToken2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {
        var e, t;
        return _regenerator.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this._refreshAccessTokenPromise || (this._refreshAccessTokenPromise = this._refreshAccessToken());
                _context7.prev = 1;
                _context7.next = 4;
                return this._refreshAccessTokenPromise;
              case 4:
                e = _context7.sent;
                _context7.next = 10;
                break;
              case 7:
                _context7.prev = 7;
                _context7.t0 = _context7["catch"](1);
                t = _context7.t0;
              case 10:
                if (!(this._refreshAccessTokenPromise = null, this._shouldRefreshAccessTokenHook = null, t)) {
                  _context7.next = 12;
                  break;
                }
                throw t;
              case 12:
                return _context7.abrupt("return", e);
              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[1, 7]]);
      }));
      function refreshAccessToken() {
        return _refreshAccessToken2.apply(this, arguments);
      }
      return refreshAccessToken;
    }()
  }, {
    key: "_refreshAccessToken",
    value: function () {
      var _refreshAccessToken3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {
        var _this$_cache$keys, e, t, n, s, r, i, o, a, _e12, _e13, _t7, _s8;
        return _regenerator.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _this$_cache$keys = this._cache.keys, e = _this$_cache$keys.accessTokenKey, t = _this$_cache$keys.accessTokenExpireKey, n = _this$_cache$keys.refreshTokenKey, s = _this$_cache$keys.loginTypeKey, r = _this$_cache$keys.anonymousUuidKey;
                this._cache.removeStore(e), this._cache.removeStore(t);
                i = this._cache.getStore(n);
                if (i) {
                  _context8.next = 5;
                  break;
                }
                throw new ne({
                  message: "未登录CloudBase"
                });
              case 5:
                o = {
                  refresh_token: i
                };
                _context8.next = 8;
                return this.request("auth.fetchAccessTokenWithRefreshToken", o);
              case 8:
                a = _context8.sent;
                if (!a.data.code) {
                  _context8.next = 21;
                  break;
                }
                _e12 = a.data.code;
                if (!("SIGN_PARAM_INVALID" === _e12 || "REFRESH_TOKEN_EXPIRED" === _e12 || "INVALID_REFRESH_TOKEN" === _e12)) {
                  _context8.next = 20;
                  break;
                }
                if (!(this._cache.getStore(s) === $e.ANONYMOUS && "INVALID_REFRESH_TOKEN" === _e12)) {
                  _context8.next = 19;
                  break;
                }
                _e13 = this._cache.getStore(r);
                _t7 = this._cache.getStore(n);
                _context8.next = 17;
                return this.send("auth.signInAnonymously", {
                  anonymous_uuid: _e13,
                  refresh_token: _t7
                });
              case 17:
                _s8 = _context8.sent;
                return _context8.abrupt("return", (this.setRefreshToken(_s8.refresh_token), this._refreshAccessToken()));
              case 19:
                De(Ke), this._cache.removeStore(n);
              case 20:
                throw new ne({
                  code: a.data.code,
                  message: "\u5237\u65B0access token\u5931\u8D25\uFF1A".concat(a.data.code)
                });
              case 21:
                if (!a.data.access_token) {
                  _context8.next = 23;
                  break;
                }
                return _context8.abrupt("return", (De(Be), this._cache.setStore(e, a.data.access_token), this._cache.setStore(t, a.data.access_token_expire + Date.now()), {
                  accessToken: a.data.access_token,
                  accessTokenExpire: a.data.access_token_expire
                }));
              case 23:
                a.data.refresh_token && (this._cache.removeStore(n), this._cache.setStore(n, a.data.refresh_token), this._refreshAccessToken());
              case 24:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
      function _refreshAccessToken() {
        return _refreshAccessToken3.apply(this, arguments);
      }
      return _refreshAccessToken;
    }()
  }, {
    key: "getAccessToken",
    value: function () {
      var _getAccessToken = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {
        var _this$_cache$keys2, e, t, n, s, r, i;
        return _regenerator.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _this$_cache$keys2 = this._cache.keys, e = _this$_cache$keys2.accessTokenKey, t = _this$_cache$keys2.accessTokenExpireKey, n = _this$_cache$keys2.refreshTokenKey;
                if (this._cache.getStore(n)) {
                  _context9.next = 3;
                  break;
                }
                throw new ne({
                  message: "refresh token不存在，登录状态异常"
                });
              case 3:
                s = this._cache.getStore(e), r = this._cache.getStore(t), i = !0;
                _context9.t0 = this._shouldRefreshAccessTokenHook;
                if (!_context9.t0) {
                  _context9.next = 9;
                  break;
                }
                _context9.next = 8;
                return this._shouldRefreshAccessTokenHook(s, r);
              case 8:
                _context9.t0 = !_context9.sent;
              case 9:
                _context9.t1 = _context9.t0;
                if (!_context9.t1) {
                  _context9.next = 12;
                  break;
                }
                i = !1;
              case 12:
                return _context9.abrupt("return", (!s || !r || r < Date.now()) && i ? this.refreshAccessToken() : {
                  accessToken: s,
                  accessTokenExpire: r
                });
              case 13:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
      function getAccessToken() {
        return _getAccessToken.apply(this, arguments);
      }
      return getAccessToken;
    }()
  }, {
    key: "request",
    value: function () {
      var _request = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10(e, t, n) {
        var s, r, i, _e14, o, _e15, _e16, a, c, u, l, h, d, p, f, g;
        return _regenerator.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                s = "x-tcb-trace_".concat(this.config.env);
                r = "application/x-www-form-urlencoded";
                i = _objectSpread({
                  action: e,
                  env: this.config.env,
                  dataVersion: "2019-08-16"
                }, t);
                if (!(-1 === We.indexOf(e))) {
                  _context10.next = 10;
                  break;
                }
                _e14 = this._cache.keys.refreshTokenKey;
                _context10.t0 = this._cache.getStore(_e14);
                if (!_context10.t0) {
                  _context10.next = 10;
                  break;
                }
                _context10.next = 9;
                return this.getAccessToken();
              case 9:
                i.access_token = _context10.sent.accessToken;
              case 10:
                if ("storage.uploadFile" === e) {
                  o = new FormData();
                  for (_e15 in o) {
                    o.hasOwnProperty(_e15) && void 0 !== o[_e15] && o.append(_e15, i[_e15]);
                  }
                  r = "multipart/form-data";
                } else {
                  r = "application/json", o = {};
                  for (_e16 in i) {
                    void 0 !== i[_e16] && (o[_e16] = i[_e16]);
                  }
                }
                a = {
                  headers: {
                    "content-type": r
                  }
                };
                n && n.onUploadProgress && (a.onUploadProgress = n.onUploadProgress);
                c = this._localCache.getStore(s);
                c && (a.headers["X-TCB-Trace"] = c);
                u = t.parse, l = t.inQuery, h = t.search;
                d = {
                  env: this.config.env
                };
                u && (d.parse = !0), l && (d = _objectSpread(_objectSpread({}, l), d));
                p = function (e, t) {
                  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                  var s = /\?/.test(t);
                  var r = "";
                  for (var _e17 in n) {
                    "" === r ? !s && (t += "?") : r += "&", r += "".concat(_e17, "=").concat(encodeURIComponent(n[_e17]));
                  }
                  return /^http(s)?\:\/\//.test(t += r) ? t : "".concat(e).concat(t);
                }(me, "//tcb-api.tencentcloudapi.com/web", d);
                h && (p += h);
                _context10.next = 22;
                return this.post(_objectSpread({
                  url: p,
                  data: o
                }, a));
              case 22:
                f = _context10.sent;
                g = f.header && f.header["x-tcb-trace"];
                if (!(g && this._localCache.setStore(s, g), 200 !== Number(f.status) && 200 !== Number(f.statusCode) || !f.data)) {
                  _context10.next = 26;
                  break;
                }
                throw new ne({
                  code: "NETWORK_ERROR",
                  message: "network request error"
                });
              case 26:
                return _context10.abrupt("return", f);
              case 27:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));
      function request(_x5, _x6, _x7) {
        return _request.apply(this, arguments);
      }
      return request;
    }()
  }, {
    key: "send",
    value: function () {
      var _send = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11(e) {
        var t,
          n,
          _n6,
          _args11 = arguments;
        return _regenerator.default.wrap(function _callee11$(_context11) {
          while (1) {
            switch (_context11.prev = _context11.next) {
              case 0:
                t = _args11.length > 1 && _args11[1] !== undefined ? _args11[1] : {};
                _context11.next = 3;
                return this.request(e, t, {
                  onUploadProgress: t.onUploadProgress
                });
              case 3:
                n = _context11.sent;
                if (!("ACCESS_TOKEN_EXPIRED" === n.data.code && -1 === We.indexOf(e))) {
                  _context11.next = 13;
                  break;
                }
                _context11.next = 7;
                return this.refreshAccessToken();
              case 7:
                _context11.next = 9;
                return this.request(e, t, {
                  onUploadProgress: t.onUploadProgress
                });
              case 9:
                _n6 = _context11.sent;
                if (!_n6.data.code) {
                  _context11.next = 12;
                  break;
                }
                throw new ne({
                  code: _n6.data.code,
                  message: _n6.data.message
                });
              case 12:
                return _context11.abrupt("return", _n6.data);
              case 13:
                if (!n.data.code) {
                  _context11.next = 15;
                  break;
                }
                throw new ne({
                  code: n.data.code,
                  message: n.data.message
                });
              case 15:
                return _context11.abrupt("return", n.data);
              case 16:
              case "end":
                return _context11.stop();
            }
          }
        }, _callee11, this);
      }));
      function send(_x8) {
        return _send.apply(this, arguments);
      }
      return send;
    }()
  }, {
    key: "setRefreshToken",
    value: function setRefreshToken(e) {
      var _this$_cache$keys3 = this._cache.keys,
        t = _this$_cache$keys3.accessTokenKey,
        n = _this$_cache$keys3.accessTokenExpireKey,
        s = _this$_cache$keys3.refreshTokenKey;
      this._cache.removeStore(t), this._cache.removeStore(n), this._cache.setStore(s, e);
    }
  }]);
  return Ge;
}();
var Ve = {};
function Ye(e) {
  return Ve[e];
}
var Qe = /*#__PURE__*/function () {
  function Qe(e) {
    (0, _classCallCheck2.default)(this, Qe);
    this.config = e, this._cache = xe(e.env), this._request = Ye(e.env);
  }
  (0, _createClass2.default)(Qe, [{
    key: "setRefreshToken",
    value: function setRefreshToken(e) {
      var _this$_cache$keys4 = this._cache.keys,
        t = _this$_cache$keys4.accessTokenKey,
        n = _this$_cache$keys4.accessTokenExpireKey,
        s = _this$_cache$keys4.refreshTokenKey;
      this._cache.removeStore(t), this._cache.removeStore(n), this._cache.setStore(s, e);
    }
  }, {
    key: "setAccessToken",
    value: function setAccessToken(e, t) {
      var _this$_cache$keys5 = this._cache.keys,
        n = _this$_cache$keys5.accessTokenKey,
        s = _this$_cache$keys5.accessTokenExpireKey;
      this._cache.setStore(n, e), this._cache.setStore(s, t);
    }
  }, {
    key: "refreshUserInfo",
    value: function () {
      var _refreshUserInfo = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {
        var _yield$this$_request$, e;
        return _regenerator.default.wrap(function _callee12$(_context12) {
          while (1) {
            switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return this._request.send("auth.getUserInfo", {});
              case 2:
                _yield$this$_request$ = _context12.sent;
                e = _yield$this$_request$.data;
                return _context12.abrupt("return", (this.setLocalUserInfo(e), e));
              case 5:
              case "end":
                return _context12.stop();
            }
          }
        }, _callee12, this);
      }));
      function refreshUserInfo() {
        return _refreshUserInfo.apply(this, arguments);
      }
      return refreshUserInfo;
    }()
  }, {
    key: "setLocalUserInfo",
    value: function setLocalUserInfo(e) {
      var t = this._cache.keys.userInfoKey;
      this._cache.setStore(t, e);
    }
  }]);
  return Qe;
}();
var Xe = /*#__PURE__*/function () {
  function Xe(e) {
    (0, _classCallCheck2.default)(this, Xe);
    if (!e) throw new ne({
      code: "PARAM_ERROR",
      message: "envId is not defined"
    });
    this._envId = e, this._cache = xe(this._envId), this._request = Ye(this._envId), this.setUserInfo();
  }
  (0, _createClass2.default)(Xe, [{
    key: "linkWithTicket",
    value: function linkWithTicket(e) {
      if ("string" != typeof e) throw new ne({
        code: "PARAM_ERROR",
        message: "ticket must be string"
      });
      return this._request.send("auth.linkWithTicket", {
        ticket: e
      });
    }
  }, {
    key: "linkWithRedirect",
    value: function linkWithRedirect(e) {
      e.signInWithRedirect();
    }
  }, {
    key: "updatePassword",
    value: function updatePassword(e, t) {
      return this._request.send("auth.updatePassword", {
        oldPassword: t,
        newPassword: e
      });
    }
  }, {
    key: "updateEmail",
    value: function updateEmail(e) {
      return this._request.send("auth.updateEmail", {
        newEmail: e
      });
    }
  }, {
    key: "updateUsername",
    value: function updateUsername(e) {
      if ("string" != typeof e) throw new ne({
        code: "PARAM_ERROR",
        message: "username must be a string"
      });
      return this._request.send("auth.updateUsername", {
        username: e
      });
    }
  }, {
    key: "getLinkedUidList",
    value: function () {
      var _getLinkedUidList = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee13() {
        var _yield$this$_request$2, e, t, n;
        return _regenerator.default.wrap(function _callee13$(_context13) {
          while (1) {
            switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return this._request.send("auth.getLinkedUidList", {});
              case 2:
                _yield$this$_request$2 = _context13.sent;
                e = _yield$this$_request$2.data;
                t = !1;
                n = e.users;
                return _context13.abrupt("return", (n.forEach(function (e) {
                  e.wxOpenId && e.wxPublicId && (t = !0);
                }), {
                  users: n,
                  hasPrimaryUid: t
                }));
              case 7:
              case "end":
                return _context13.stop();
            }
          }
        }, _callee13, this);
      }));
      function getLinkedUidList() {
        return _getLinkedUidList.apply(this, arguments);
      }
      return getLinkedUidList;
    }()
  }, {
    key: "setPrimaryUid",
    value: function setPrimaryUid(e) {
      return this._request.send("auth.setPrimaryUid", {
        uid: e
      });
    }
  }, {
    key: "unlink",
    value: function unlink(e) {
      return this._request.send("auth.unlink", {
        platform: e
      });
    }
  }, {
    key: "update",
    value: function () {
      var _update = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee14(e) {
        var t, n, s, r, i, o, _yield$this$_request$3, a;
        return _regenerator.default.wrap(function _callee14$(_context14) {
          while (1) {
            switch (_context14.prev = _context14.next) {
              case 0:
                t = e.nickName;
                n = e.gender;
                s = e.avatarUrl;
                r = e.province;
                i = e.country;
                o = e.city;
                _context14.next = 8;
                return this._request.send("auth.updateUserInfo", {
                  nickName: t,
                  gender: n,
                  avatarUrl: s,
                  province: r,
                  country: i,
                  city: o
                });
              case 8:
                _yield$this$_request$3 = _context14.sent;
                a = _yield$this$_request$3.data;
                this.setLocalUserInfo(a);
              case 11:
              case "end":
                return _context14.stop();
            }
          }
        }, _callee14, this);
      }));
      function update(_x9) {
        return _update.apply(this, arguments);
      }
      return update;
    }()
  }, {
    key: "refresh",
    value: function () {
      var _refresh = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee15() {
        var _yield$this$_request$4, e;
        return _regenerator.default.wrap(function _callee15$(_context15) {
          while (1) {
            switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return this._request.send("auth.getUserInfo", {});
              case 2:
                _yield$this$_request$4 = _context15.sent;
                e = _yield$this$_request$4.data;
                return _context15.abrupt("return", (this.setLocalUserInfo(e), e));
              case 5:
              case "end":
                return _context15.stop();
            }
          }
        }, _callee15, this);
      }));
      function refresh() {
        return _refresh.apply(this, arguments);
      }
      return refresh;
    }()
  }, {
    key: "setUserInfo",
    value: function setUserInfo() {
      var _this8 = this;
      var e = this._cache.keys.userInfoKey,
        t = this._cache.getStore(e);
      ["uid", "loginType", "openid", "wxOpenId", "wxPublicId", "unionId", "qqMiniOpenId", "email", "hasPassword", "customUserId", "nickName", "gender", "avatarUrl"].forEach(function (e) {
        _this8[e] = t[e];
      }), this.location = {
        country: t.country,
        province: t.province,
        city: t.city
      };
    }
  }, {
    key: "setLocalUserInfo",
    value: function setLocalUserInfo(e) {
      var t = this._cache.keys.userInfoKey;
      this._cache.setStore(t, e), this.setUserInfo();
    }
  }]);
  return Xe;
}();
var Ze = /*#__PURE__*/function () {
  function Ze(e) {
    (0, _classCallCheck2.default)(this, Ze);
    if (!e) throw new ne({
      code: "PARAM_ERROR",
      message: "envId is not defined"
    });
    this._cache = xe(e);
    var _this$_cache$keys6 = this._cache.keys,
      t = _this$_cache$keys6.refreshTokenKey,
      n = _this$_cache$keys6.accessTokenKey,
      s = _this$_cache$keys6.accessTokenExpireKey,
      r = this._cache.getStore(t),
      i = this._cache.getStore(n),
      o = this._cache.getStore(s);
    this.credential = {
      refreshToken: r,
      accessToken: i,
      accessTokenExpire: o
    }, this.user = new Xe(e);
  }
  (0, _createClass2.default)(Ze, [{
    key: "isAnonymousAuth",
    get: function get() {
      return this.loginType === $e.ANONYMOUS;
    }
  }, {
    key: "isCustomAuth",
    get: function get() {
      return this.loginType === $e.CUSTOM;
    }
  }, {
    key: "isWeixinAuth",
    get: function get() {
      return this.loginType === $e.WECHAT || this.loginType === $e.WECHAT_OPEN || this.loginType === $e.WECHAT_PUBLIC;
    }
  }, {
    key: "loginType",
    get: function get() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
  }]);
  return Ze;
}();
var et = /*#__PURE__*/function (_Qe) {
  (0, _inherits2.default)(et, _Qe);
  var _super4 = _createSuper(et);
  function et() {
    (0, _classCallCheck2.default)(this, et);
    return _super4.apply(this, arguments);
  }
  (0, _createClass2.default)(et, [{
    key: "signIn",
    value: function () {
      var _signIn = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee16() {
        var _this$_cache$keys7, e, t, n, s, r, _e18;
        return _regenerator.default.wrap(function _callee16$(_context16) {
          while (1) {
            switch (_context16.prev = _context16.next) {
              case 0:
                this._cache.updatePersistence("local");
                _this$_cache$keys7 = this._cache.keys;
                e = _this$_cache$keys7.anonymousUuidKey;
                t = _this$_cache$keys7.refreshTokenKey;
                n = this._cache.getStore(e) || void 0;
                s = this._cache.getStore(t) || void 0;
                _context16.next = 8;
                return this._request.send("auth.signInAnonymously", {
                  anonymous_uuid: n,
                  refresh_token: s
                });
              case 8:
                r = _context16.sent;
                if (!(r.uuid && r.refresh_token)) {
                  _context16.next = 20;
                  break;
                }
                this._setAnonymousUUID(r.uuid);
                this.setRefreshToken(r.refresh_token);
                _context16.next = 14;
                return this._request.refreshAccessToken();
              case 14:
                De(qe);
                De(Me, {
                  env: this.config.env,
                  loginType: $e.ANONYMOUS,
                  persistence: "local"
                });
                _e18 = new Ze(this.config.env);
                _context16.next = 19;
                return _e18.user.refresh();
              case 19:
                return _context16.abrupt("return", _e18);
              case 20:
                throw new ne({
                  message: "匿名登录失败"
                });
              case 21:
              case "end":
                return _context16.stop();
            }
          }
        }, _callee16, this);
      }));
      function signIn() {
        return _signIn.apply(this, arguments);
      }
      return signIn;
    }()
  }, {
    key: "linkAndRetrieveDataWithTicket",
    value: function () {
      var _linkAndRetrieveDataWithTicket = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee17(e) {
        var _this$_cache$keys8, t, n, s, r, i;
        return _regenerator.default.wrap(function _callee17$(_context17) {
          while (1) {
            switch (_context17.prev = _context17.next) {
              case 0:
                _this$_cache$keys8 = this._cache.keys;
                t = _this$_cache$keys8.anonymousUuidKey;
                n = _this$_cache$keys8.refreshTokenKey;
                s = this._cache.getStore(t);
                r = this._cache.getStore(n);
                _context17.next = 7;
                return this._request.send("auth.linkAndRetrieveDataWithTicket", {
                  anonymous_uuid: s,
                  refresh_token: r,
                  ticket: e
                });
              case 7:
                i = _context17.sent;
                if (!i.refresh_token) {
                  _context17.next = 16;
                  break;
                }
                this._clearAnonymousUUID();
                this.setRefreshToken(i.refresh_token);
                _context17.next = 13;
                return this._request.refreshAccessToken();
              case 13:
                De(je, {
                  env: this.config.env
                });
                De(Me, {
                  loginType: $e.CUSTOM,
                  persistence: "local"
                });
                return _context17.abrupt("return", {
                  credential: {
                    refreshToken: i.refresh_token
                  }
                });
              case 16:
                throw new ne({
                  message: "匿名转化失败"
                });
              case 17:
              case "end":
                return _context17.stop();
            }
          }
        }, _callee17, this);
      }));
      function linkAndRetrieveDataWithTicket(_x10) {
        return _linkAndRetrieveDataWithTicket.apply(this, arguments);
      }
      return linkAndRetrieveDataWithTicket;
    }()
  }, {
    key: "_setAnonymousUUID",
    value: function _setAnonymousUUID(e) {
      var _this$_cache$keys9 = this._cache.keys,
        t = _this$_cache$keys9.anonymousUuidKey,
        n = _this$_cache$keys9.loginTypeKey;
      this._cache.removeStore(t), this._cache.setStore(t, e), this._cache.setStore(n, $e.ANONYMOUS);
    }
  }, {
    key: "_clearAnonymousUUID",
    value: function _clearAnonymousUUID() {
      this._cache.removeStore(this._cache.keys.anonymousUuidKey);
    }
  }]);
  return et;
}(Qe);
var tt = /*#__PURE__*/function (_Qe2) {
  (0, _inherits2.default)(tt, _Qe2);
  var _super5 = _createSuper(tt);
  function tt() {
    (0, _classCallCheck2.default)(this, tt);
    return _super5.apply(this, arguments);
  }
  (0, _createClass2.default)(tt, [{
    key: "signIn",
    value: function () {
      var _signIn2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee18(e) {
        var t, n;
        return _regenerator.default.wrap(function _callee18$(_context18) {
          while (1) {
            switch (_context18.prev = _context18.next) {
              case 0:
                if (!("string" != typeof e)) {
                  _context18.next = 2;
                  break;
                }
                throw new ne({
                  code: "PARAM_ERROR",
                  message: "ticket must be a string"
                });
              case 2:
                t = this._cache.keys.refreshTokenKey;
                _context18.next = 5;
                return this._request.send("auth.signInWithTicket", {
                  ticket: e,
                  refresh_token: this._cache.getStore(t) || ""
                });
              case 5:
                n = _context18.sent;
                if (!n.refresh_token) {
                  _context18.next = 15;
                  break;
                }
                this.setRefreshToken(n.refresh_token);
                _context18.next = 10;
                return this._request.refreshAccessToken();
              case 10:
                De(qe);
                De(Me, {
                  env: this.config.env,
                  loginType: $e.CUSTOM,
                  persistence: this.config.persistence
                });
                _context18.next = 14;
                return this.refreshUserInfo();
              case 14:
                return _context18.abrupt("return", new Ze(this.config.env));
              case 15:
                throw new ne({
                  message: "自定义登录失败"
                });
              case 16:
              case "end":
                return _context18.stop();
            }
          }
        }, _callee18, this);
      }));
      function signIn(_x11) {
        return _signIn2.apply(this, arguments);
      }
      return signIn;
    }()
  }]);
  return tt;
}(Qe);
var nt = /*#__PURE__*/function (_Qe3) {
  (0, _inherits2.default)(nt, _Qe3);
  var _super6 = _createSuper(nt);
  function nt() {
    (0, _classCallCheck2.default)(this, nt);
    return _super6.apply(this, arguments);
  }
  (0, _createClass2.default)(nt, [{
    key: "signIn",
    value: function () {
      var _signIn3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee19(e, t) {
        var n, s, r, i, o;
        return _regenerator.default.wrap(function _callee19$(_context19) {
          while (1) {
            switch (_context19.prev = _context19.next) {
              case 0:
                if (!("string" != typeof e)) {
                  _context19.next = 2;
                  break;
                }
                throw new ne({
                  code: "PARAM_ERROR",
                  message: "email must be a string"
                });
              case 2:
                n = this._cache.keys.refreshTokenKey;
                _context19.next = 5;
                return this._request.send("auth.signIn", {
                  loginType: "EMAIL",
                  email: e,
                  password: t,
                  refresh_token: this._cache.getStore(n) || ""
                });
              case 5:
                s = _context19.sent;
                r = s.refresh_token;
                i = s.access_token;
                o = s.access_token_expire;
                if (!r) {
                  _context19.next = 22;
                  break;
                }
                this.setRefreshToken(r);
                if (!(i && o)) {
                  _context19.next = 15;
                  break;
                }
                this.setAccessToken(i, o);
                _context19.next = 17;
                break;
              case 15:
                _context19.next = 17;
                return this._request.refreshAccessToken();
              case 17:
                _context19.next = 19;
                return this.refreshUserInfo();
              case 19:
                De(qe);
                De(Me, {
                  env: this.config.env,
                  loginType: $e.EMAIL,
                  persistence: this.config.persistence
                });
                return _context19.abrupt("return", new Ze(this.config.env));
              case 22:
                throw s.code ? new ne({
                  code: s.code,
                  message: "\u90AE\u7BB1\u767B\u5F55\u5931\u8D25: ".concat(s.message)
                }) : new ne({
                  message: "邮箱登录失败"
                });
              case 23:
              case "end":
                return _context19.stop();
            }
          }
        }, _callee19, this);
      }));
      function signIn(_x12, _x13) {
        return _signIn3.apply(this, arguments);
      }
      return signIn;
    }()
  }, {
    key: "activate",
    value: function () {
      var _activate = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee20(e) {
        return _regenerator.default.wrap(function _callee20$(_context20) {
          while (1) {
            switch (_context20.prev = _context20.next) {
              case 0:
                return _context20.abrupt("return", this._request.send("auth.activateEndUserMail", {
                  token: e
                }));
              case 1:
              case "end":
                return _context20.stop();
            }
          }
        }, _callee20, this);
      }));
      function activate(_x14) {
        return _activate.apply(this, arguments);
      }
      return activate;
    }()
  }, {
    key: "resetPasswordWithToken",
    value: function () {
      var _resetPasswordWithToken = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee21(e, t) {
        return _regenerator.default.wrap(function _callee21$(_context21) {
          while (1) {
            switch (_context21.prev = _context21.next) {
              case 0:
                return _context21.abrupt("return", this._request.send("auth.resetPasswordWithToken", {
                  token: e,
                  newPassword: t
                }));
              case 1:
              case "end":
                return _context21.stop();
            }
          }
        }, _callee21, this);
      }));
      function resetPasswordWithToken(_x15, _x16) {
        return _resetPasswordWithToken.apply(this, arguments);
      }
      return resetPasswordWithToken;
    }()
  }]);
  return nt;
}(Qe);
var st = /*#__PURE__*/function (_Qe4) {
  (0, _inherits2.default)(st, _Qe4);
  var _super7 = _createSuper(st);
  function st() {
    (0, _classCallCheck2.default)(this, st);
    return _super7.apply(this, arguments);
  }
  (0, _createClass2.default)(st, [{
    key: "signIn",
    value: function () {
      var _signIn4 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee22(e, t) {
        var n, s, r, i, o;
        return _regenerator.default.wrap(function _callee22$(_context22) {
          while (1) {
            switch (_context22.prev = _context22.next) {
              case 0:
                if (!("string" != typeof e)) {
                  _context22.next = 2;
                  break;
                }
                throw new ne({
                  code: "PARAM_ERROR",
                  message: "username must be a string"
                });
              case 2:
                "string" != typeof t && (t = "", console.warn("password is empty"));
                n = this._cache.keys.refreshTokenKey;
                _context22.next = 6;
                return this._request.send("auth.signIn", {
                  loginType: $e.USERNAME,
                  username: e,
                  password: t,
                  refresh_token: this._cache.getStore(n) || ""
                });
              case 6:
                s = _context22.sent;
                r = s.refresh_token;
                i = s.access_token_expire;
                o = s.access_token;
                if (!r) {
                  _context22.next = 23;
                  break;
                }
                this.setRefreshToken(r);
                if (!(o && i)) {
                  _context22.next = 16;
                  break;
                }
                this.setAccessToken(o, i);
                _context22.next = 18;
                break;
              case 16:
                _context22.next = 18;
                return this._request.refreshAccessToken();
              case 18:
                _context22.next = 20;
                return this.refreshUserInfo();
              case 20:
                De(qe);
                De(Me, {
                  env: this.config.env,
                  loginType: $e.USERNAME,
                  persistence: this.config.persistence
                });
                return _context22.abrupt("return", new Ze(this.config.env));
              case 23:
                throw s.code ? new ne({
                  code: s.code,
                  message: "\u7528\u6237\u540D\u5BC6\u7801\u767B\u5F55\u5931\u8D25: ".concat(s.message)
                }) : new ne({
                  message: "用户名密码登录失败"
                });
              case 24:
              case "end":
                return _context22.stop();
            }
          }
        }, _callee22, this);
      }));
      function signIn(_x17, _x18) {
        return _signIn4.apply(this, arguments);
      }
      return signIn;
    }()
  }]);
  return st;
}(Qe);
var rt = /*#__PURE__*/function () {
  function rt(e) {
    (0, _classCallCheck2.default)(this, rt);
    this.config = e, this._cache = xe(e.env), this._request = Ye(e.env), this._onAnonymousConverted = this._onAnonymousConverted.bind(this), this._onLoginTypeChanged = this._onLoginTypeChanged.bind(this), Ne(Me, this._onLoginTypeChanged);
  }
  (0, _createClass2.default)(rt, [{
    key: "currentUser",
    get: function get() {
      var e = this.hasLoginState();
      return e && e.user || null;
    }
  }, {
    key: "loginType",
    get: function get() {
      return this._cache.getStore(this._cache.keys.loginTypeKey);
    }
  }, {
    key: "anonymousAuthProvider",
    value: function anonymousAuthProvider() {
      return new et(this.config);
    }
  }, {
    key: "customAuthProvider",
    value: function customAuthProvider() {
      return new tt(this.config);
    }
  }, {
    key: "emailAuthProvider",
    value: function emailAuthProvider() {
      return new nt(this.config);
    }
  }, {
    key: "usernameAuthProvider",
    value: function usernameAuthProvider() {
      return new st(this.config);
    }
  }, {
    key: "signInAnonymously",
    value: function () {
      var _signInAnonymously = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee23() {
        return _regenerator.default.wrap(function _callee23$(_context23) {
          while (1) {
            switch (_context23.prev = _context23.next) {
              case 0:
                return _context23.abrupt("return", new et(this.config).signIn());
              case 1:
              case "end":
                return _context23.stop();
            }
          }
        }, _callee23, this);
      }));
      function signInAnonymously() {
        return _signInAnonymously.apply(this, arguments);
      }
      return signInAnonymously;
    }()
  }, {
    key: "signInWithEmailAndPassword",
    value: function () {
      var _signInWithEmailAndPassword = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee24(e, t) {
        return _regenerator.default.wrap(function _callee24$(_context24) {
          while (1) {
            switch (_context24.prev = _context24.next) {
              case 0:
                return _context24.abrupt("return", new nt(this.config).signIn(e, t));
              case 1:
              case "end":
                return _context24.stop();
            }
          }
        }, _callee24, this);
      }));
      function signInWithEmailAndPassword(_x19, _x20) {
        return _signInWithEmailAndPassword.apply(this, arguments);
      }
      return signInWithEmailAndPassword;
    }()
  }, {
    key: "signInWithUsernameAndPassword",
    value: function signInWithUsernameAndPassword(e, t) {
      return new st(this.config).signIn(e, t);
    }
  }, {
    key: "linkAndRetrieveDataWithTicket",
    value: function () {
      var _linkAndRetrieveDataWithTicket2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee25(e) {
        return _regenerator.default.wrap(function _callee25$(_context25) {
          while (1) {
            switch (_context25.prev = _context25.next) {
              case 0:
                this._anonymousAuthProvider || (this._anonymousAuthProvider = new et(this.config)), Ne(je, this._onAnonymousConverted);
                _context25.next = 3;
                return this._anonymousAuthProvider.linkAndRetrieveDataWithTicket(e);
              case 3:
                return _context25.abrupt("return", _context25.sent);
              case 4:
              case "end":
                return _context25.stop();
            }
          }
        }, _callee25, this);
      }));
      function linkAndRetrieveDataWithTicket(_x21) {
        return _linkAndRetrieveDataWithTicket2.apply(this, arguments);
      }
      return linkAndRetrieveDataWithTicket;
    }()
  }, {
    key: "signOut",
    value: function () {
      var _signOut = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee26() {
        var _this$_cache$keys10, e, t, n, s, r;
        return _regenerator.default.wrap(function _callee26$(_context26) {
          while (1) {
            switch (_context26.prev = _context26.next) {
              case 0:
                if (!(this.loginType === $e.ANONYMOUS)) {
                  _context26.next = 2;
                  break;
                }
                throw new ne({
                  message: "匿名用户不支持登出操作"
                });
              case 2:
                _this$_cache$keys10 = this._cache.keys, e = _this$_cache$keys10.refreshTokenKey, t = _this$_cache$keys10.accessTokenKey, n = _this$_cache$keys10.accessTokenExpireKey, s = this._cache.getStore(e);
                if (s) {
                  _context26.next = 5;
                  break;
                }
                return _context26.abrupt("return");
              case 5:
                _context26.next = 7;
                return this._request.send("auth.logout", {
                  refresh_token: s
                });
              case 7:
                r = _context26.sent;
                return _context26.abrupt("return", (this._cache.removeStore(e), this._cache.removeStore(t), this._cache.removeStore(n), De(qe), De(Me, {
                  env: this.config.env,
                  loginType: $e.NULL,
                  persistence: this.config.persistence
                }), r));
              case 9:
              case "end":
                return _context26.stop();
            }
          }
        }, _callee26, this);
      }));
      function signOut() {
        return _signOut.apply(this, arguments);
      }
      return signOut;
    }()
  }, {
    key: "signUpWithEmailAndPassword",
    value: function () {
      var _signUpWithEmailAndPassword = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee27(e, t) {
        return _regenerator.default.wrap(function _callee27$(_context27) {
          while (1) {
            switch (_context27.prev = _context27.next) {
              case 0:
                return _context27.abrupt("return", this._request.send("auth.signUpWithEmailAndPassword", {
                  email: e,
                  password: t
                }));
              case 1:
              case "end":
                return _context27.stop();
            }
          }
        }, _callee27, this);
      }));
      function signUpWithEmailAndPassword(_x22, _x23) {
        return _signUpWithEmailAndPassword.apply(this, arguments);
      }
      return signUpWithEmailAndPassword;
    }()
  }, {
    key: "sendPasswordResetEmail",
    value: function () {
      var _sendPasswordResetEmail = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee28(e) {
        return _regenerator.default.wrap(function _callee28$(_context28) {
          while (1) {
            switch (_context28.prev = _context28.next) {
              case 0:
                return _context28.abrupt("return", this._request.send("auth.sendPasswordResetEmail", {
                  email: e
                }));
              case 1:
              case "end":
                return _context28.stop();
            }
          }
        }, _callee28, this);
      }));
      function sendPasswordResetEmail(_x24) {
        return _sendPasswordResetEmail.apply(this, arguments);
      }
      return sendPasswordResetEmail;
    }()
  }, {
    key: "onLoginStateChanged",
    value: function onLoginStateChanged(e) {
      var _this9 = this;
      Ne(qe, function () {
        var t = _this9.hasLoginState();
        e.call(_this9, t);
      });
      var t = this.hasLoginState();
      e.call(this, t);
    }
  }, {
    key: "onLoginStateExpired",
    value: function onLoginStateExpired(e) {
      Ne(Ke, e.bind(this));
    }
  }, {
    key: "onAccessTokenRefreshed",
    value: function onAccessTokenRefreshed(e) {
      Ne(Be, e.bind(this));
    }
  }, {
    key: "onAnonymousConverted",
    value: function onAnonymousConverted(e) {
      Ne(je, e.bind(this));
    }
  }, {
    key: "onLoginTypeChanged",
    value: function onLoginTypeChanged(e) {
      var _this10 = this;
      Ne(Me, function () {
        var t = _this10.hasLoginState();
        e.call(_this10, t);
      });
    }
  }, {
    key: "getAccessToken",
    value: function () {
      var _getAccessToken2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee29() {
        return _regenerator.default.wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return this._request.getAccessToken();
              case 2:
                _context29.t0 = _context29.sent.accessToken;
                _context29.t1 = this.config.env;
                return _context29.abrupt("return", {
                  accessToken: _context29.t0,
                  env: _context29.t1
                });
              case 5:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29, this);
      }));
      function getAccessToken() {
        return _getAccessToken2.apply(this, arguments);
      }
      return getAccessToken;
    }()
  }, {
    key: "hasLoginState",
    value: function hasLoginState() {
      var e = this._cache.keys.refreshTokenKey;
      return this._cache.getStore(e) ? new Ze(this.config.env) : null;
    }
  }, {
    key: "isUsernameRegistered",
    value: function () {
      var _isUsernameRegistered = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee30(e) {
        var _yield$this$_request$5, t;
        return _regenerator.default.wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                if (!("string" != typeof e)) {
                  _context30.next = 2;
                  break;
                }
                throw new ne({
                  code: "PARAM_ERROR",
                  message: "username must be a string"
                });
              case 2:
                _context30.next = 4;
                return this._request.send("auth.isUsernameRegistered", {
                  username: e
                });
              case 4:
                _yield$this$_request$5 = _context30.sent;
                t = _yield$this$_request$5.data;
                return _context30.abrupt("return", t && t.isRegistered);
              case 7:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30, this);
      }));
      function isUsernameRegistered(_x25) {
        return _isUsernameRegistered.apply(this, arguments);
      }
      return isUsernameRegistered;
    }()
  }, {
    key: "getLoginState",
    value: function getLoginState() {
      return Promise.resolve(this.hasLoginState());
    }
  }, {
    key: "signInWithTicket",
    value: function () {
      var _signInWithTicket = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee31(e) {
        return _regenerator.default.wrap(function _callee31$(_context31) {
          while (1) {
            switch (_context31.prev = _context31.next) {
              case 0:
                return _context31.abrupt("return", new tt(this.config).signIn(e));
              case 1:
              case "end":
                return _context31.stop();
            }
          }
        }, _callee31, this);
      }));
      function signInWithTicket(_x26) {
        return _signInWithTicket.apply(this, arguments);
      }
      return signInWithTicket;
    }()
  }, {
    key: "shouldRefreshAccessToken",
    value: function shouldRefreshAccessToken(e) {
      this._request._shouldRefreshAccessTokenHook = e.bind(this);
    }
  }, {
    key: "getUserInfo",
    value: function getUserInfo() {
      return this._request.send("auth.getUserInfo", {}).then(function (e) {
        return e.code ? e : _objectSpread(_objectSpread({}, e.data), {}, {
          requestId: e.seqId
        });
      });
    }
  }, {
    key: "getAuthHeader",
    value: function getAuthHeader() {
      var _this$_cache$keys11 = this._cache.keys,
        e = _this$_cache$keys11.refreshTokenKey,
        t = _this$_cache$keys11.accessTokenKey,
        n = this._cache.getStore(e);
      return {
        "x-cloudbase-credentials": this._cache.getStore(t) + "/@@/" + n
      };
    }
  }, {
    key: "_onAnonymousConverted",
    value: function _onAnonymousConverted(e) {
      var t = e.data.env;
      t === this.config.env && this._cache.updatePersistence(this.config.persistence);
    }
  }, {
    key: "_onLoginTypeChanged",
    value: function _onLoginTypeChanged(e) {
      var _e$data = e.data,
        t = _e$data.loginType,
        n = _e$data.persistence,
        s = _e$data.env;
      s === this.config.env && (this._cache.updatePersistence(n), this._cache.setStore(this._cache.keys.loginTypeKey, t));
    }
  }]);
  return rt;
}();
var it = function it(e, t) {
    t = t || we();
    var n = Ye(this.config.env),
      s = e.cloudPath,
      r = e.filePath,
      i = e.onUploadProgress,
      _e$fileType = e.fileType,
      o = _e$fileType === void 0 ? "image" : _e$fileType;
    return n.send("storage.getUploadMetadata", {
      path: s
    }).then(function (e) {
      var _e$data2 = e.data,
        a = _e$data2.url,
        c = _e$data2.authorization,
        u = _e$data2.token,
        l = _e$data2.fileId,
        h = _e$data2.cosFileId,
        d = e.requestId,
        p = {
          key: s,
          signature: c,
          "x-cos-meta-fileid": h,
          success_action_status: "201",
          "x-cos-security-token": u
        };
      n.upload({
        url: a,
        data: p,
        file: r,
        name: s,
        fileType: o,
        onUploadProgress: i
      }).then(function (e) {
        201 === e.statusCode ? t(null, {
          fileID: l,
          requestId: d
        }) : t(new ne({
          code: "STORAGE_REQUEST_FAIL",
          message: "STORAGE_REQUEST_FAIL: ".concat(e.data)
        }));
      }).catch(function (e) {
        t(e);
      });
    }).catch(function (e) {
      t(e);
    }), t.promise;
  },
  ot = function ot(e, t) {
    t = t || we();
    var n = Ye(this.config.env),
      s = e.cloudPath;
    return n.send("storage.getUploadMetadata", {
      path: s
    }).then(function (e) {
      t(null, e);
    }).catch(function (e) {
      t(e);
    }), t.promise;
  },
  at = function at(_ref7, t) {
    var e = _ref7.fileList;
    if (t = t || we(), !e || !Array.isArray(e)) return {
      code: "INVALID_PARAM",
      message: "fileList必须是非空的数组"
    };
    var _iterator3 = _createForOfIteratorHelper(e),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _t8 = _step3.value;
        if (!_t8 || "string" != typeof _t8) return {
          code: "INVALID_PARAM",
          message: "fileList的元素必须是非空的字符串"
        };
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    var n = {
      fileid_list: e
    };
    return Ye(this.config.env).send("storage.batchDeleteFile", n).then(function (e) {
      e.code ? t(null, e) : t(null, {
        fileList: e.data.delete_list,
        requestId: e.requestId
      });
    }).catch(function (e) {
      t(e);
    }), t.promise;
  },
  ct = function ct(_ref8, t) {
    var e = _ref8.fileList;
    t = t || we(), e && Array.isArray(e) || t(null, {
      code: "INVALID_PARAM",
      message: "fileList必须是非空的数组"
    });
    var n = [];
    var _iterator4 = _createForOfIteratorHelper(e),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _s9 = _step4.value;
        "object" == (0, _typeof2.default)(_s9) ? (_s9.hasOwnProperty("fileID") && _s9.hasOwnProperty("maxAge") || t(null, {
          code: "INVALID_PARAM",
          message: "fileList的元素必须是包含fileID和maxAge的对象"
        }), n.push({
          fileid: _s9.fileID,
          max_age: _s9.maxAge
        })) : "string" == typeof _s9 ? n.push({
          fileid: _s9
        }) : t(null, {
          code: "INVALID_PARAM",
          message: "fileList的元素必须是字符串"
        });
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    var s = {
      file_list: n
    };
    return Ye(this.config.env).send("storage.batchGetDownloadUrl", s).then(function (e) {
      e.code ? t(null, e) : t(null, {
        fileList: e.data.download_list,
        requestId: e.requestId
      });
    }).catch(function (e) {
      t(e);
    }), t.promise;
  },
  ut = /*#__PURE__*/function () {
    var _ref10 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee32(_ref9, t) {
      var e, n, s, r;
      return _regenerator.default.wrap(function _callee32$(_context32) {
        while (1) {
          switch (_context32.prev = _context32.next) {
            case 0:
              e = _ref9.fileID;
              _context32.next = 3;
              return ct.call(this, {
                fileList: [{
                  fileID: e,
                  maxAge: 600
                }]
              });
            case 3:
              n = _context32.sent.fileList[0];
              if (!("SUCCESS" !== n.code)) {
                _context32.next = 6;
                break;
              }
              return _context32.abrupt("return", t ? t(n) : new Promise(function (e) {
                e(n);
              }));
            case 6:
              s = Ye(this.config.env);
              r = n.download_url;
              if (!(r = encodeURI(r), !t)) {
                _context32.next = 10;
                break;
              }
              return _context32.abrupt("return", s.download({
                url: r
              }));
            case 10:
              _context32.t0 = t;
              _context32.next = 13;
              return s.download({
                url: r
              });
            case 13:
              _context32.t1 = _context32.sent;
              (0, _context32.t0)(_context32.t1);
            case 15:
            case "end":
              return _context32.stop();
          }
        }
      }, _callee32, this);
    }));
    return function ut(_x27, _x28) {
      return _ref10.apply(this, arguments);
    };
  }(),
  lt = function lt(_ref11, i) {
    var e = _ref11.name,
      t = _ref11.data,
      n = _ref11.query,
      s = _ref11.parse,
      r = _ref11.search;
    var o = i || we();
    var a;
    try {
      a = t ? JSON.stringify(t) : "";
    } catch (e) {
      return Promise.reject(e);
    }
    if (!e) return Promise.reject(new ne({
      code: "PARAM_ERROR",
      message: "函数名不能为空"
    }));
    var c = {
      inQuery: n,
      parse: s,
      search: r,
      function_name: e,
      request_data: a
    };
    return Ye(this.config.env).send("functions.invokeFunction", c).then(function (e) {
      if (e.code) o(null, e);else {
        var _t9 = e.data.response_data;
        if (s) o(null, {
          result: _t9,
          requestId: e.requestId
        });else try {
          _t9 = JSON.parse(e.data.response_data), o(null, {
            result: _t9,
            requestId: e.requestId
          });
        } catch (e) {
          o(new ne({
            message: "response data must be json"
          }));
        }
      }
      return o.promise;
    }).catch(function (e) {
      o(e);
    }), o.promise;
  },
  ht = {
    timeout: 15e3,
    persistence: "session"
  },
  dt = {};
var pt = /*#__PURE__*/function () {
  function pt(e) {
    (0, _classCallCheck2.default)(this, pt);
    this.config = e || this.config, this.authObj = void 0;
  }
  (0, _createClass2.default)(pt, [{
    key: "init",
    value: function init(e) {
      switch (Ie.adapter || (this.requestClient = new Ie.adapter.reqClass({
        timeout: e.timeout || 5e3,
        timeoutMsg: "\u8BF7\u6C42\u5728".concat((e.timeout || 5e3) / 1e3, "s\u5185\u672A\u5B8C\u6210\uFF0C\u5DF2\u4E2D\u65AD")
      })), this.config = _objectSpread(_objectSpread({}, ht), e), !0) {
        case this.config.timeout > 6e5:
          console.warn("timeout大于可配置上限[10分钟]，已重置为上限数值"), this.config.timeout = 6e5;
          break;
        case this.config.timeout < 100:
          console.warn("timeout小于可配置下限[100ms]，已重置为下限数值"), this.config.timeout = 100;
      }
      return new pt(this.config);
    }
  }, {
    key: "auth",
    value: function auth() {
      var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        e = _ref12.persistence;
      if (this.authObj) return this.authObj;
      var t = e || Ie.adapter.primaryStorage || ht.persistence;
      var n;
      return t !== this.config.persistence && (this.config.persistence = t), function (e) {
        var t = e.env;
        Ee[t] = new Pe(e), Oe[t] = new Pe(_objectSpread(_objectSpread({}, e), {}, {
          persistence: "local"
        }));
      }(this.config), n = this.config, Ve[n.env] = new Ge(n), this.authObj = new rt(this.config), this.authObj;
    }
  }, {
    key: "on",
    value: function on(e, t) {
      return Ne.apply(this, [e, t]);
    }
  }, {
    key: "off",
    value: function off(e, t) {
      return Fe.apply(this, [e, t]);
    }
  }, {
    key: "callFunction",
    value: function callFunction(e, t) {
      return lt.apply(this, [e, t]);
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(e, t) {
      return at.apply(this, [e, t]);
    }
  }, {
    key: "getTempFileURL",
    value: function getTempFileURL(e, t) {
      return ct.apply(this, [e, t]);
    }
  }, {
    key: "downloadFile",
    value: function downloadFile(e, t) {
      return ut.apply(this, [e, t]);
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(e, t) {
      return it.apply(this, [e, t]);
    }
  }, {
    key: "getUploadMetadata",
    value: function getUploadMetadata(e, t) {
      return ot.apply(this, [e, t]);
    }
  }, {
    key: "registerExtension",
    value: function registerExtension(e) {
      dt[e.name] = e;
    }
  }, {
    key: "invokeExtension",
    value: function () {
      var _invokeExtension = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee33(e, t) {
        var n;
        return _regenerator.default.wrap(function _callee33$(_context33) {
          while (1) {
            switch (_context33.prev = _context33.next) {
              case 0:
                n = dt[e];
                if (n) {
                  _context33.next = 3;
                  break;
                }
                throw new ne({
                  message: "\u6269\u5C55".concat(e, " \u5FC5\u987B\u5148\u6CE8\u518C")
                });
              case 3:
                _context33.next = 5;
                return n.invoke(t, this);
              case 5:
                return _context33.abrupt("return", _context33.sent);
              case 6:
              case "end":
                return _context33.stop();
            }
          }
        }, _callee33, this);
      }));
      function invokeExtension(_x29, _x30) {
        return _invokeExtension.apply(this, arguments);
      }
      return invokeExtension;
    }()
  }, {
    key: "useAdapters",
    value: function useAdapters(e) {
      var _ref13 = ke(e) || {},
        t = _ref13.adapter,
        n = _ref13.runtime;
      t && (Ie.adapter = t), n && (Ie.runtime = n);
    }
  }]);
  return pt;
}();
var ft = new pt();
function gt(e, t, n) {
  void 0 === n && (n = {});
  var s = /\?/.test(t),
    r = "";
  for (var i in n) {
    "" === r ? !s && (t += "?") : r += "&", r += i + "=" + encodeURIComponent(n[i]);
  }
  return /^http(s)?:\/\//.test(t += r) ? t : "" + e + t;
}
var mt = /*#__PURE__*/function () {
  function mt() {
    (0, _classCallCheck2.default)(this, mt);
  }
  (0, _createClass2.default)(mt, [{
    key: "post",
    value: function post(e) {
      var t = e.url,
        n = e.data,
        s = e.headers;
      return new Promise(function (e, r) {
        se.request({
          url: gt("https:", t),
          data: n,
          method: "POST",
          header: s,
          success: function success(t) {
            e(t);
          },
          fail: function fail(e) {
            r(e);
          }
        });
      });
    }
  }, {
    key: "upload",
    value: function upload(e) {
      return new Promise(function (t, n) {
        var s = e.url,
          r = e.file,
          i = e.data,
          o = e.headers,
          a = e.fileType,
          c = se.uploadFile({
            url: gt("https:", s),
            name: "file",
            formData: Object.assign({}, i),
            filePath: r,
            fileType: a,
            header: o,
            success: function success(e) {
              var n = {
                statusCode: e.statusCode,
                data: e.data || {}
              };
              200 === e.statusCode && i.success_action_status && (n.statusCode = parseInt(i.success_action_status, 10)), t(n);
            },
            fail: function fail(e) {
              n(new Error(e.errMsg || "uploadFile:fail"));
            }
          });
        "function" == typeof e.onUploadProgress && c && "function" == typeof c.onProgressUpdate && c.onProgressUpdate(function (t) {
          e.onUploadProgress({
            loaded: t.totalBytesSent,
            total: t.totalBytesExpectedToSend
          });
        });
      });
    }
  }]);
  return mt;
}();
var yt = {
  setItem: function setItem(e, t) {
    se.setStorageSync(e, t);
  },
  getItem: function getItem(e) {
    return se.getStorageSync(e);
  },
  removeItem: function removeItem(e) {
    se.removeStorageSync(e);
  },
  clear: function clear() {
    se.clearStorageSync();
  }
};
var _t = {
  genAdapter: function genAdapter() {
    return {
      root: {},
      reqClass: mt,
      localStorage: yt,
      primaryStorage: "local"
    };
  },
  isMatch: function isMatch() {
    return !0;
  },
  runtime: "uni_app"
};
ft.useAdapters(_t);
var wt = ft,
  vt = wt.init;
wt.init = function (e) {
  e.env = e.spaceId;
  var t = vt.call(this, e);
  t.config.provider = "tencent", t.config.spaceId = e.spaceId;
  var n = t.auth;
  return t.auth = function (e) {
    var t = n.call(this, e);
    return ["linkAndRetrieveDataWithTicket", "signInAnonymously", "signOut", "getAccessToken", "getLoginState", "signInWithTicket", "getUserInfo"].forEach(function (e) {
      var n;
      t[e] = (n = t[e], function (e) {
        e = e || {};
        var _te = te(e),
          t = _te.success,
          s = _te.fail,
          r = _te.complete;
        if (!(t || s || r)) return n.call(this, e);
        n.call(this, e).then(function (e) {
          t && t(e), r && r(e);
        }, function (e) {
          s && s(e), r && r(e);
        });
      }).bind(t);
    }), t;
  }, t.customAuth = t.auth, t;
};
var bt = wt;
var St = /*#__PURE__*/function (_fe) {
  (0, _inherits2.default)(St, _fe);
  var _super8 = _createSuper(St);
  function St() {
    (0, _classCallCheck2.default)(this, St);
    return _super8.apply(this, arguments);
  }
  (0, _createClass2.default)(St, [{
    key: "getAccessToken",
    value: function getAccessToken() {
      var _this11 = this;
      return new Promise(function (e, t) {
        var n = "Anonymous_Access_token";
        _this11.setAccessToken(n), e(n);
      });
    }
  }, {
    key: "setupRequest",
    value: function setupRequest(e, t) {
      var n = Object.assign({}, e, {
          spaceId: this.config.spaceId,
          timestamp: Date.now()
        }),
        s = {
          "Content-Type": "application/json"
        };
      "auth" !== t && (n.token = this.accessToken, s["x-basement-token"] = this.accessToken), s["x-serverless-sign"] = he.sign(n, this.config.clientSecret);
      var r = le();
      s["x-client-info"] = encodeURIComponent(JSON.stringify(r));
      var _re = re(),
        i = _re.token;
      return s["x-client-token"] = i, {
        url: this.config.requestUrl,
        method: "POST",
        data: n,
        dataType: "json",
        header: JSON.parse(JSON.stringify(s))
      };
    }
  }, {
    key: "uploadFileToOSS",
    value: function uploadFileToOSS(_ref14) {
      var _this12 = this;
      var e = _ref14.url,
        t = _ref14.formData,
        n = _ref14.name,
        s = _ref14.filePath,
        r = _ref14.fileType,
        i = _ref14.onUploadProgress;
      return new Promise(function (o, a) {
        var c = _this12.adapter.uploadFile({
          url: e,
          formData: t,
          name: n,
          filePath: s,
          fileType: r,
          success: function success(e) {
            e && e.statusCode < 400 ? o(e) : a(new ne({
              code: "UPLOAD_FAILED",
              message: "文件上传失败"
            }));
          },
          fail: function fail(e) {
            a(new ne({
              code: e.code || "UPLOAD_FAILED",
              message: e.message || e.errMsg || "文件上传失败"
            }));
          }
        });
        "function" == typeof i && c && "function" == typeof c.onProgressUpdate && c.onProgressUpdate(function (e) {
          i({
            loaded: e.totalBytesSent,
            total: e.totalBytesExpectedToSend
          });
        });
      });
    }
  }, {
    key: "uploadFile",
    value: function uploadFile(_ref15) {
      var _this13 = this;
      var e = _ref15.filePath,
        t = _ref15.cloudPath,
        _ref15$fileType = _ref15.fileType,
        n = _ref15$fileType === void 0 ? "image" : _ref15$fileType,
        s = _ref15.onUploadProgress;
      if (!t) throw new ne({
        code: "CLOUDPATH_REQUIRED",
        message: "cloudPath不可为空"
      });
      var r;
      return this.getOSSUploadOptionsFromPath({
        cloudPath: t
      }).then(function (t) {
        var _t$result = t.result,
          i = _t$result.url,
          o = _t$result.formData,
          a = _t$result.name;
        r = t.result.fileUrl;
        var c = {
          url: i,
          formData: o,
          name: a,
          filePath: e,
          fileType: n
        };
        return _this13.uploadFileToOSS(Object.assign({}, c, {
          onUploadProgress: s
        }));
      }).then(function () {
        return _this13.reportOSSUpload({
          cloudPath: t
        });
      }).then(function (t) {
        return new Promise(function (n, s) {
          t.success ? n({
            success: !0,
            filePath: e,
            fileID: r
          }) : s(new ne({
            code: "UPLOAD_FAILED",
            message: "文件上传失败"
          }));
        });
      });
    }
  }, {
    key: "deleteFile",
    value: function deleteFile(_ref16) {
      var e = _ref16.fileList;
      var t = {
        method: "serverless.file.resource.delete",
        params: JSON.stringify({
          fileList: e
        })
      };
      return this.request(this.setupRequest(t)).then(function (e) {
        if (e.success) return e.result;
        throw new ne({
          code: "DELETE_FILE_FAILED",
          message: "删除文件失败"
        });
      });
    }
  }, {
    key: "getTempFileURL",
    value: function getTempFileURL() {
      var _ref17 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        e = _ref17.fileList;
      if (!Array.isArray(e) || 0 === e.length) throw new ne({
        code: "INVALID_PARAM",
        message: "fileList的元素必须是非空的字符串"
      });
      var t = {
        method: "serverless.file.resource.getTempFileURL",
        params: JSON.stringify({
          fileList: e
        })
      };
      return this.request(this.setupRequest(t)).then(function (e) {
        if (e.success) return {
          fileList: e.result.fileList.map(function (e) {
            return {
              fileID: e.fileID,
              tempFileURL: e.tempFileURL
            };
          })
        };
        throw new ne({
          code: "GET_TEMP_FILE_URL_FAILED",
          message: "获取临时文件链接失败"
        });
      });
    }
  }]);
  return St;
}(fe);
var kt = {
  init: function init(e) {
    var t = new St(e),
      n = {
        signInAnonymously: function signInAnonymously() {
          return t.authorize();
        },
        getLoginState: function getLoginState() {
          return Promise.resolve(!1);
        }
      };
    return t.auth = function () {
      return n;
    }, t.customAuth = t.auth, t;
  }
};
function It(_ref18) {
  var e = _ref18.data;
  var t;
  t = le();
  var n = JSON.parse(JSON.stringify(e || {}));
  if (Object.assign(n, {
    clientInfo: t
  }), !n.uniIdToken) {
    var _re2 = re(),
      _e19 = _re2.token;
    _e19 && (n.uniIdToken = _e19);
  }
  return n;
}
function Tt() {
  return _Tt.apply(this, arguments);
}
function _Tt() {
  _Tt = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee53() {
    var _this23 = this;
    var _ref55,
      e,
      t,
      _this$__dev__,
      n,
      s,
      r,
      i,
      o,
      a,
      _args5 = arguments;
    return _regenerator.default.wrap(function _callee53$(_context53) {
      while (1) {
        switch (_context53.prev = _context53.next) {
          case 0:
            _ref55 = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {}, e = _ref55.name, t = _ref55.data;
            _context53.next = 3;
            return this.__dev__.initLocalNetwork();
          case 3:
            _this$__dev__ = this.__dev__, n = _this$__dev__.localAddress, s = _this$__dev__.localPort, r = {
              aliyun: "aliyun",
              tencent: "tcb"
            }[this.config.provider], i = this.config.spaceId, o = "http://".concat(n, ":").concat(s, "/system/check-function"), a = "http://".concat(n, ":").concat(s, "/cloudfunctions/").concat(e);
            return _context53.abrupt("return", new Promise(function (t, n) {
              se.request({
                method: "POST",
                url: o,
                data: {
                  name: e,
                  platform: A,
                  provider: r,
                  spaceId: i
                },
                timeout: 3e3,
                success: function success(e) {
                  t(e);
                },
                fail: function fail() {
                  t({
                    data: {
                      code: "NETWORK_ERROR",
                      message: "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下，自动切换为已部署的云函数。"
                    }
                  });
                }
              });
            }).then(function () {
              var _ref56 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                e = _ref56.data;
              var _ref57 = e || {},
                t = _ref57.code,
                n = _ref57.message;
              return {
                code: 0 === t ? 0 : t || "SYS_ERR",
                message: n || "SYS_ERR"
              };
            }).then(function (_ref58) {
              var n = _ref58.code,
                s = _ref58.message;
              if (0 !== n) {
                switch (n) {
                  case "MODULE_ENCRYPTED":
                    console.error("\u6B64\u4E91\u51FD\u6570\uFF08".concat(e, "\uFF09\u4F9D\u8D56\u52A0\u5BC6\u516C\u5171\u6A21\u5757\u4E0D\u53EF\u672C\u5730\u8C03\u8BD5\uFF0C\u81EA\u52A8\u5207\u6362\u4E3A\u4E91\u7AEF\u5DF2\u90E8\u7F72\u7684\u4E91\u51FD\u6570"));
                    break;
                  case "FUNCTION_ENCRYPTED":
                    console.error("\u6B64\u4E91\u51FD\u6570\uFF08".concat(e, "\uFF09\u5DF2\u52A0\u5BC6\u4E0D\u53EF\u672C\u5730\u8C03\u8BD5\uFF0C\u81EA\u52A8\u5207\u6362\u4E3A\u4E91\u7AEF\u5DF2\u90E8\u7F72\u7684\u4E91\u51FD\u6570"));
                    break;
                  case "ACTION_ENCRYPTED":
                    console.error(s || "需要访问加密的uni-clientDB-action，自动切换为云端环境");
                    break;
                  case "NETWORK_ERROR":
                    {
                      var _e29 = "连接本地调试服务失败，请检查客户端是否和主机在同一局域网下";
                      throw console.error(_e29), new Error(_e29);
                    }
                  case "SWITCH_TO_CLOUD":
                    break;
                  default:
                    {
                      var _e30 = "\u68C0\u6D4B\u672C\u5730\u8C03\u8BD5\u670D\u52A1\u51FA\u73B0\u9519\u8BEF\uFF1A".concat(s, "\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u73AF\u5883\u6216\u91CD\u542F\u5BA2\u6237\u7AEF\u518D\u8BD5");
                      throw console.error(_e30), new Error(_e30);
                    }
                }
                return _this23._callCloudFunction({
                  name: e,
                  data: t
                });
              }
              return new Promise(function (e, n) {
                var s = It.call(_this23, {
                  data: t
                });
                se.request({
                  method: "POST",
                  url: a,
                  data: {
                    provider: r,
                    platform: A,
                    param: s
                  },
                  success: function success() {
                    var _ref59 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                      t = _ref59.statusCode,
                      s = _ref59.data;
                    return !t || t >= 400 ? n(new ne({
                      code: s.code || "SYS_ERR",
                      message: s.message || "request:fail"
                    })) : e({
                      result: s
                    });
                  },
                  fail: function fail(e) {
                    n(new ne({
                      code: e.code || e.errCode || "SYS_ERR",
                      message: e.message || e.errMsg || "request:fail"
                    }));
                  }
                });
              });
            }));
          case 5:
          case "end":
            return _context53.stop();
        }
      }
    }, _callee53, this);
  }));
  return _Tt.apply(this, arguments);
}
var Ct = [{
  rule: /fc_function_not_found|FUNCTION_NOT_FOUND/,
  content: "，云函数[{functionName}]在云端不存在，请检查此云函数名称是否正确以及该云函数是否已上传到服务空间",
  mode: "append"
}];
var At = /[\\^$.*+?()[\]{}|]/g,
  Pt = RegExp(At.source);
function Et(e, t, n) {
  return e.replace(new RegExp((s = t) && Pt.test(s) ? s.replace(At, "\\$&") : s, "g"), n);
  var s;
}
var Ot = "none",
  xt = "request",
  Rt = "response",
  Ut = "both";
var Lt = /*#__PURE__*/function () {
  function Lt() {
    var _ref19 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      e = _ref19.secretType,
      t = _ref19.uniCloudIns;
    (0, _classCallCheck2.default)(this, Lt);
    this.clientType = "", this.secretType = e || Ot, this.uniCloudIns = t;
    var _this$uniCloudIns$con = this.uniCloudIns.config,
      n = _this$uniCloudIns$con.provider,
      s = _this$uniCloudIns$con.spaceId;
    var r;
    this.provider = n, this.spaceId = s, this.scopedGlobalCache = (r = this.uniCloudIns, U("_globalUniCloudSecureNetworkCache__{spaceId}".replace("{spaceId}", r.config.spaceId)));
  }
  (0, _createClass2.default)(Lt, [{
    key: "getSystemInfo",
    value: function getSystemInfo() {
      return this._systemInfo || (this._systemInfo = ce()), this._systemInfo;
    }
  }, {
    key: "appId",
    get: function get() {
      return this.getSystemInfo().appId;
    }
  }, {
    key: "deviceId",
    get: function get() {
      return this.getSystemInfo().deviceId;
    }
  }, {
    key: "encryptData",
    value: function () {
      var _encryptData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee34(e) {
        return _regenerator.default.wrap(function _callee34$(_context34) {
          while (1) {
            switch (_context34.prev = _context34.next) {
              case 0:
                return _context34.abrupt("return", this.secretType === Ot ? e : this.platformEncryptData(e));
              case 1:
              case "end":
                return _context34.stop();
            }
          }
        }, _callee34, this);
      }));
      function encryptData(_x31) {
        return _encryptData.apply(this, arguments);
      }
      return encryptData;
    }()
  }, {
    key: "decryptResult",
    value: function () {
      var _decryptResult = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee35(e) {
        var _ref20, t, n;
        return _regenerator.default.wrap(function _callee35$(_context35) {
          while (1) {
            switch (_context35.prev = _context35.next) {
              case 0:
                if (!(this.secretType === Ot)) {
                  _context35.next = 2;
                  break;
                }
                return _context35.abrupt("return", e);
              case 2:
                _ref20 = e || {}, t = _ref20.errCode, n = _ref20.content;
                return _context35.abrupt("return", t || !n ? e : this.secretType === xt ? n : this.platformDecryptResult(e));
              case 4:
              case "end":
                return _context35.stop();
            }
          }
        }, _callee35, this);
      }));
      function decryptResult(_x32) {
        return _decryptResult.apply(this, arguments);
      }
      return decryptResult;
    }()
  }, {
    key: "wrapVerifyClientCallFunction",
    value: function wrapVerifyClientCallFunction(e) {
      var t = this;
      return /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee36() {
        var _ref22,
          n,
          _ref22$data,
          s,
          r,
          _args36 = arguments;
        return _regenerator.default.wrap(function _callee36$(_context36) {
          while (1) {
            switch (_context36.prev = _context36.next) {
              case 0:
                _ref22 = _args36.length > 0 && _args36[0] !== undefined ? _args36[0] : {}, n = _ref22.name, _ref22$data = _ref22.data, s = _ref22$data === void 0 ? {} : _ref22$data;
                _context36.next = 3;
                return t.prepare();
              case 3:
                _context36.next = 5;
                return t.platformGetSignOption();
              case 5:
                (s = JSON.parse(JSON.stringify(s)))._uniCloudOptions = _context36.sent;
                _context36.next = 8;
                return e({
                  name: n,
                  data: s
                });
              case 8:
                r = _context36.sent;
                _context36.t0 = t.isClientKeyNotFound(r);
                if (!_context36.t0) {
                  _context36.next = 19;
                  break;
                }
                _context36.next = 13;
                return t.prepare({
                  forceUpdate: !0
                });
              case 13:
                _context36.next = 15;
                return t.platformGetSignOption();
              case 15:
                s._uniCloudOptions = _context36.sent;
                _context36.next = 18;
                return e({
                  name: n,
                  data: s
                });
              case 18:
                r = _context36.sent;
              case 19:
                return _context36.abrupt("return", r);
              case 20:
              case "end":
                return _context36.stop();
            }
          }
        }, _callee36);
      }));
    }
  }, {
    key: "wrapEncryptDataCallFunction",
    value: function wrapEncryptDataCallFunction(e) {
      var t = this;
      return /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee37() {
        var _ref24,
          n,
          _ref24$data,
          s,
          r,
          i,
          _r3,
          _args37 = arguments;
        return _regenerator.default.wrap(function _callee37$(_context37) {
          while (1) {
            switch (_context37.prev = _context37.next) {
              case 0:
                _ref24 = _args37.length > 0 && _args37[0] !== undefined ? _args37[0] : {}, n = _ref24.name, _ref24$data = _ref24.data, s = _ref24$data === void 0 ? {} : _ref24$data;
                _context37.next = 3;
                return t.prepare();
              case 3:
                _context37.next = 5;
                return t.encryptData(s);
              case 5:
                r = _context37.sent;
                _context37.next = 8;
                return e({
                  name: n,
                  data: r
                });
              case 8:
                i = _context37.sent;
                if (!t.isClientKeyNotFound(i)) {
                  _context37.next = 21;
                  break;
                }
                _context37.next = 12;
                return t.prepare({
                  forceUpdate: !0
                });
              case 12:
                _context37.next = 14;
                return t.encryptData(s);
              case 14:
                _r3 = _context37.sent;
                _context37.next = 17;
                return t.platformGetSignOption();
              case 17:
                s._uniCloudOptions = _context37.sent;
                _context37.next = 20;
                return e({
                  name: n,
                  data: _r3
                });
              case 20:
                i = _context37.sent;
              case 21:
                _context37.next = 23;
                return t.decryptResult(i.result);
              case 23:
                i.result = _context37.sent;
                return _context37.abrupt("return", i);
              case 25:
              case "end":
                return _context37.stop();
            }
          }
        }, _callee37);
      }));
    }
  }]);
  return Lt;
}();
/*! MIT License. Copyright 2015-2018 Richard Moore <me@ricmoo.com>. See LICENSE.txt. */
function Nt(e) {
  return parseInt(e) === e;
}
function Dt(e) {
  if (!Nt(e.length)) return !1;
  for (var t = 0; t < e.length; t++) {
    if (!Nt(e[t]) || e[t] < 0 || e[t] > 255) return !1;
  }
  return !0;
}
function Ft(e, t) {
  if (e.buffer && "Uint8Array" === e.name) return t && (e = e.slice ? e.slice() : Array.prototype.slice.call(e)), e;
  if (Array.isArray(e)) {
    if (!Dt(e)) throw new Error("Array contains invalid value: " + e);
    return new Uint8Array(e);
  }
  if (Nt(e.length) && Dt(e)) return new Uint8Array(e);
  throw new Error("unsupported array-like object");
}
function qt(e) {
  return new Uint8Array(e);
}
function Kt(e, t, n, s, r) {
  null == s && null == r || (e = e.slice ? e.slice(s, r) : Array.prototype.slice.call(e, s, r)), t.set(e, n);
}
var Mt,
  jt = {
    toBytes: function toBytes(e) {
      var t = [],
        n = 0;
      for (e = encodeURI(e); n < e.length;) {
        var s = e.charCodeAt(n++);
        37 === s ? (t.push(parseInt(e.substr(n, 2), 16)), n += 2) : t.push(s);
      }
      return Ft(t);
    },
    fromBytes: function fromBytes(e) {
      for (var t = [], n = 0; n < e.length;) {
        var s = e[n];
        s < 128 ? (t.push(String.fromCharCode(s)), n++) : s > 191 && s < 224 ? (t.push(String.fromCharCode((31 & s) << 6 | 63 & e[n + 1])), n += 2) : (t.push(String.fromCharCode((15 & s) << 12 | (63 & e[n + 1]) << 6 | 63 & e[n + 2])), n += 3);
      }
      return t.join("");
    }
  },
  Bt = (Mt = "0123456789abcdef", {
    toBytes: function toBytes(e) {
      for (var t = [], n = 0; n < e.length; n += 2) {
        t.push(parseInt(e.substr(n, 2), 16));
      }
      return t;
    },
    fromBytes: function fromBytes(e) {
      for (var t = [], n = 0; n < e.length; n++) {
        var s = e[n];
        t.push(Mt[(240 & s) >> 4] + Mt[15 & s]);
      }
      return t.join("");
    }
  }),
  $t = {
    16: 10,
    24: 12,
    32: 14
  },
  Wt = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145],
  zt = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22],
  Jt = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125],
  Ht = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986],
  Gt = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766],
  Vt = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126],
  Yt = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436],
  Qt = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890],
  Xt = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935],
  Zt = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600],
  en = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480],
  tn = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795],
  nn = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855],
  sn = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150],
  rn = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
function on(e) {
  for (var t = [], n = 0; n < e.length; n += 4) {
    t.push(e[n] << 24 | e[n + 1] << 16 | e[n + 2] << 8 | e[n + 3]);
  }
  return t;
}
var an = /*#__PURE__*/function () {
  function an(e) {
    (0, _classCallCheck2.default)(this, an);
    if (!(this instanceof an)) throw Error("AES must be instanitated with `new`");
    Object.defineProperty(this, "key", {
      value: Ft(e, !0)
    }), this._prepare();
  }
  (0, _createClass2.default)(an, [{
    key: "_prepare",
    value: function _prepare() {
      var e = $t[this.key.length];
      if (null == e) throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
      this._Ke = [], this._Kd = [];
      for (var t = 0; t <= e; t++) {
        this._Ke.push([0, 0, 0, 0]), this._Kd.push([0, 0, 0, 0]);
      }
      var n,
        s = 4 * (e + 1),
        r = this.key.length / 4,
        i = on(this.key);
      for (t = 0; t < r; t++) {
        n = t >> 2, this._Ke[n][t % 4] = i[t], this._Kd[e - n][t % 4] = i[t];
      }
      for (var o, a = 0, c = r; c < s;) {
        if (o = i[r - 1], i[0] ^= zt[o >> 16 & 255] << 24 ^ zt[o >> 8 & 255] << 16 ^ zt[255 & o] << 8 ^ zt[o >> 24 & 255] ^ Wt[a] << 24, a += 1, 8 != r) for (t = 1; t < r; t++) {
          i[t] ^= i[t - 1];
        } else {
          for (t = 1; t < r / 2; t++) {
            i[t] ^= i[t - 1];
          }
          o = i[r / 2 - 1], i[r / 2] ^= zt[255 & o] ^ zt[o >> 8 & 255] << 8 ^ zt[o >> 16 & 255] << 16 ^ zt[o >> 24 & 255] << 24;
          for (t = r / 2 + 1; t < r; t++) {
            i[t] ^= i[t - 1];
          }
        }
        for (t = 0; t < r && c < s;) {
          u = c >> 2, l = c % 4, this._Ke[u][l] = i[t], this._Kd[e - u][l] = i[t++], c++;
        }
      }
      for (var u = 1; u < e; u++) {
        for (var l = 0; l < 4; l++) {
          o = this._Kd[u][l], this._Kd[u][l] = tn[o >> 24 & 255] ^ nn[o >> 16 & 255] ^ sn[o >> 8 & 255] ^ rn[255 & o];
        }
      }
    }
  }, {
    key: "encrypt",
    value: function encrypt(e) {
      if (16 != e.length) throw new Error("invalid plaintext size (must be 16 bytes)");
      for (var t = this._Ke.length - 1, n = [0, 0, 0, 0], s = on(e), r = 0; r < 4; r++) {
        s[r] ^= this._Ke[0][r];
      }
      for (var i = 1; i < t; i++) {
        for (r = 0; r < 4; r++) {
          n[r] = Ht[s[r] >> 24 & 255] ^ Gt[s[(r + 1) % 4] >> 16 & 255] ^ Vt[s[(r + 2) % 4] >> 8 & 255] ^ Yt[255 & s[(r + 3) % 4]] ^ this._Ke[i][r];
        }
        s = n.slice();
      }
      var o,
        a = qt(16);
      for (r = 0; r < 4; r++) {
        o = this._Ke[t][r], a[4 * r] = 255 & (zt[s[r] >> 24 & 255] ^ o >> 24), a[4 * r + 1] = 255 & (zt[s[(r + 1) % 4] >> 16 & 255] ^ o >> 16), a[4 * r + 2] = 255 & (zt[s[(r + 2) % 4] >> 8 & 255] ^ o >> 8), a[4 * r + 3] = 255 & (zt[255 & s[(r + 3) % 4]] ^ o);
      }
      return a;
    }
  }, {
    key: "decrypt",
    value: function decrypt(e) {
      if (16 != e.length) throw new Error("invalid ciphertext size (must be 16 bytes)");
      for (var t = this._Kd.length - 1, n = [0, 0, 0, 0], s = on(e), r = 0; r < 4; r++) {
        s[r] ^= this._Kd[0][r];
      }
      for (var i = 1; i < t; i++) {
        for (r = 0; r < 4; r++) {
          n[r] = Qt[s[r] >> 24 & 255] ^ Xt[s[(r + 3) % 4] >> 16 & 255] ^ Zt[s[(r + 2) % 4] >> 8 & 255] ^ en[255 & s[(r + 1) % 4]] ^ this._Kd[i][r];
        }
        s = n.slice();
      }
      var o,
        a = qt(16);
      for (r = 0; r < 4; r++) {
        o = this._Kd[t][r], a[4 * r] = 255 & (Jt[s[r] >> 24 & 255] ^ o >> 24), a[4 * r + 1] = 255 & (Jt[s[(r + 3) % 4] >> 16 & 255] ^ o >> 16), a[4 * r + 2] = 255 & (Jt[s[(r + 2) % 4] >> 8 & 255] ^ o >> 8), a[4 * r + 3] = 255 & (Jt[255 & s[(r + 1) % 4]] ^ o);
      }
      return a;
    }
  }]);
  return an;
}();
var cn = /*#__PURE__*/function () {
  function cn(e) {
    (0, _classCallCheck2.default)(this, cn);
    if (!(this instanceof cn)) throw Error("AES must be instanitated with `new`");
    this.description = "Electronic Code Block", this.name = "ecb", this._aes = new an(e);
  }
  (0, _createClass2.default)(cn, [{
    key: "encrypt",
    value: function encrypt(e) {
      if ((e = Ft(e)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
      for (var t = qt(e.length), n = qt(16), s = 0; s < e.length; s += 16) {
        Kt(e, n, 0, s, s + 16), Kt(n = this._aes.encrypt(n), t, s);
      }
      return t;
    }
  }, {
    key: "decrypt",
    value: function decrypt(e) {
      if ((e = Ft(e)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
      for (var t = qt(e.length), n = qt(16), s = 0; s < e.length; s += 16) {
        Kt(e, n, 0, s, s + 16), Kt(n = this._aes.decrypt(n), t, s);
      }
      return t;
    }
  }]);
  return cn;
}();
var un = /*#__PURE__*/function () {
  function un(e, t) {
    (0, _classCallCheck2.default)(this, un);
    if (!(this instanceof un)) throw Error("AES must be instanitated with `new`");
    if (this.description = "Cipher Block Chaining", this.name = "cbc", t) {
      if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
    } else t = qt(16);
    this._lastCipherblock = Ft(t, !0), this._aes = new an(e);
  }
  (0, _createClass2.default)(un, [{
    key: "encrypt",
    value: function encrypt(e) {
      if ((e = Ft(e)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
      for (var t = qt(e.length), n = qt(16), s = 0; s < e.length; s += 16) {
        Kt(e, n, 0, s, s + 16);
        for (var r = 0; r < 16; r++) {
          n[r] ^= this._lastCipherblock[r];
        }
        this._lastCipherblock = this._aes.encrypt(n), Kt(this._lastCipherblock, t, s);
      }
      return t;
    }
  }, {
    key: "decrypt",
    value: function decrypt(e) {
      if ((e = Ft(e)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
      for (var t = qt(e.length), n = qt(16), s = 0; s < e.length; s += 16) {
        Kt(e, n, 0, s, s + 16), n = this._aes.decrypt(n);
        for (var r = 0; r < 16; r++) {
          t[s + r] = n[r] ^ this._lastCipherblock[r];
        }
        Kt(e, this._lastCipherblock, 0, s, s + 16);
      }
      return t;
    }
  }]);
  return un;
}();
var ln = /*#__PURE__*/function () {
  function ln(e, t, n) {
    (0, _classCallCheck2.default)(this, ln);
    if (!(this instanceof ln)) throw Error("AES must be instanitated with `new`");
    if (this.description = "Cipher Feedback", this.name = "cfb", t) {
      if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 size)");
    } else t = qt(16);
    n || (n = 1), this.segmentSize = n, this._shiftRegister = Ft(t, !0), this._aes = new an(e);
  }
  (0, _createClass2.default)(ln, [{
    key: "encrypt",
    value: function encrypt(e) {
      if (e.length % this.segmentSize != 0) throw new Error("invalid plaintext size (must be segmentSize bytes)");
      for (var t, n = Ft(e, !0), s = 0; s < n.length; s += this.segmentSize) {
        t = this._aes.encrypt(this._shiftRegister);
        for (var r = 0; r < this.segmentSize; r++) {
          n[s + r] ^= t[r];
        }
        Kt(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), Kt(n, this._shiftRegister, 16 - this.segmentSize, s, s + this.segmentSize);
      }
      return n;
    }
  }, {
    key: "decrypt",
    value: function decrypt(e) {
      if (e.length % this.segmentSize != 0) throw new Error("invalid ciphertext size (must be segmentSize bytes)");
      for (var t, n = Ft(e, !0), s = 0; s < n.length; s += this.segmentSize) {
        t = this._aes.encrypt(this._shiftRegister);
        for (var r = 0; r < this.segmentSize; r++) {
          n[s + r] ^= t[r];
        }
        Kt(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), Kt(e, this._shiftRegister, 16 - this.segmentSize, s, s + this.segmentSize);
      }
      return n;
    }
  }]);
  return ln;
}();
var hn = /*#__PURE__*/function () {
  function hn(e, t) {
    (0, _classCallCheck2.default)(this, hn);
    if (!(this instanceof hn)) throw Error("AES must be instanitated with `new`");
    if (this.description = "Output Feedback", this.name = "ofb", t) {
      if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
    } else t = qt(16);
    this._lastPrecipher = Ft(t, !0), this._lastPrecipherIndex = 16, this._aes = new an(e);
  }
  (0, _createClass2.default)(hn, [{
    key: "encrypt",
    value: function encrypt(e) {
      for (var t = Ft(e, !0), n = 0; n < t.length; n++) {
        16 === this._lastPrecipherIndex && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), this._lastPrecipherIndex = 0), t[n] ^= this._lastPrecipher[this._lastPrecipherIndex++];
      }
      return t;
    }
  }, {
    key: "decrypt",
    value: function decrypt(e) {
      return this.encrypt(e);
    }
  }]);
  return hn;
}();
var dn = /*#__PURE__*/function () {
  function dn(e) {
    (0, _classCallCheck2.default)(this, dn);
    if (!(this instanceof dn)) throw Error("Counter must be instanitated with `new`");
    0 === e || e || (e = 1), "number" == typeof e ? (this._counter = qt(16), this.setValue(e)) : this.setBytes(e);
  }
  (0, _createClass2.default)(dn, [{
    key: "setValue",
    value: function setValue(e) {
      if ("number" != typeof e || parseInt(e) != e) throw new Error("invalid counter value (must be an integer)");
      if (e > Number.MAX_SAFE_INTEGER) throw new Error("integer value out of safe range");
      for (var t = 15; t >= 0; --t) {
        this._counter[t] = e % 256, e = parseInt(e / 256);
      }
    }
  }, {
    key: "setBytes",
    value: function setBytes(e) {
      if (16 != (e = Ft(e, !0)).length) throw new Error("invalid counter bytes size (must be 16 bytes)");
      this._counter = e;
    }
  }, {
    key: "increment",
    value: function increment() {
      for (var e = 15; e >= 0; e--) {
        if (255 !== this._counter[e]) {
          this._counter[e]++;
          break;
        }
        this._counter[e] = 0;
      }
    }
  }]);
  return dn;
}();
var pn = /*#__PURE__*/function () {
  function pn(e, t) {
    (0, _classCallCheck2.default)(this, pn);
    if (!(this instanceof pn)) throw Error("AES must be instanitated with `new`");
    this.description = "Counter", this.name = "ctr", t instanceof dn || (t = new dn(t)), this._counter = t, this._remainingCounter = null, this._remainingCounterIndex = 16, this._aes = new an(e);
  }
  (0, _createClass2.default)(pn, [{
    key: "encrypt",
    value: function encrypt(e) {
      for (var t = Ft(e, !0), n = 0; n < t.length; n++) {
        16 === this._remainingCounterIndex && (this._remainingCounter = this._aes.encrypt(this._counter._counter), this._remainingCounterIndex = 0, this._counter.increment()), t[n] ^= this._remainingCounter[this._remainingCounterIndex++];
      }
      return t;
    }
  }, {
    key: "decrypt",
    value: function decrypt(e) {
      return this.encrypt(e);
    }
  }]);
  return pn;
}();
var fn = {
  AES: an,
  Counter: dn,
  ModeOfOperation: {
    ecb: cn,
    cbc: un,
    cfb: ln,
    ofb: hn,
    ctr: pn
  },
  utils: {
    hex: Bt,
    utf8: jt
  },
  padding: {
    pkcs7: {
      pad: function pad(e) {
        var t = 16 - (e = Ft(e, !0)).length % 16,
          n = qt(e.length + t);
        Kt(e, n);
        for (var s = e.length; s < n.length; s++) {
          n[s] = t;
        }
        return n;
      },
      strip: function strip(e) {
        if ((e = Ft(e, !0)).length < 16) throw new Error("PKCS#7 invalid length");
        var t = e[e.length - 1];
        if (t > 16) throw new Error("PKCS#7 padding byte out of range");
        for (var n = e.length - t, s = 0; s < t; s++) {
          if (e[n + s] !== t) throw new Error("PKCS#7 invalid padding byte");
        }
        var r = qt(n);
        return Kt(e, r, 0, 0, n), r;
      }
    }
  },
  _arrayTest: {
    coerceArray: Ft,
    createArray: qt,
    copyArray: Kt
  }
};
function gn(e, t, n) {
  var s = new Uint8Array(uni.base64ToArrayBuffer(t)),
    r = fn.utils.utf8.toBytes(n),
    i = fn.utils.utf8.toBytes(e),
    o = new fn.ModeOfOperation.cbc(s, r),
    a = fn.padding.pkcs7.pad(i),
    c = o.encrypt(a);
  return uni.arrayBufferToBase64(c);
}
var mn = {
    code: 2e4,
    message: "System error"
  },
  yn = {
    code: 20101,
    message: "Invalid client"
  },
  _n = {
    code: 20102,
    message: "Get encrypt key failed"
  },
  wn = {
    10001: "Secure network is not supported on current playground or unimpsdk",
    10003: "Config missing in current app. If the problem pesist, please contact DCloud.",
    10009: "Encrypt payload failed",
    10010: "Decrypt response failed"
  };
function vn(e) {
  var _ref25 = e || {},
    t = _ref25.errSubject,
    n = _ref25.subject,
    s = _ref25.errCode,
    r = _ref25.errMsg,
    i = _ref25.code,
    o = _ref25.message,
    a = _ref25.cause;
  return new ne({
    subject: t || n || "uni-secure-network",
    code: s || i || mn.code,
    message: r || o,
    cause: a
  });
}
var bn,
  Sn,
  kn = null;
var In = /*#__PURE__*/function (_Lt) {
  (0, _inherits2.default)(In, _Lt);
  var _super9 = _createSuper(In);
  function In(e) {
    var _this14;
    (0, _classCallCheck2.default)(this, In);
    _this14 = _super9.call(this, e), _this14.clientType = "mp-weixin", _this14.userEncryptKey = null;
    return _this14;
  }
  (0, _createClass2.default)(In, [{
    key: "isLogin",
    value: function isLogin() {
      return !!this.scopedGlobalCache.mpWeixinCode || !!this.scopedGlobalCache.mpWeixinOpenid;
    }
  }, {
    key: "prepare",
    value: function () {
      var _prepare2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee38() {
        return _regenerator.default.wrap(function _callee38$(_context38) {
          while (1) {
            switch (_context38.prev = _context38.next) {
              case 0:
                if (this.isLogin()) {
                  _context38.next = 7;
                  break;
                }
                if (this.scopedGlobalCache.initPromise) {
                  _context38.next = 3;
                  break;
                }
                throw new Error("`uniCloud.initSecureNetworkByWeixin` has not yet been called");
              case 3:
                _context38.next = 5;
                return this.scopedGlobalCache.initPromise;
              case 5:
                if (this.isLogin()) {
                  _context38.next = 7;
                  break;
                }
                throw new Error("uniCloud.initSecureNetworkByWeixin` has not yet been called or successfully excuted");
              case 7:
              case "end":
                return _context38.stop();
            }
          }
        }, _callee38, this);
      }));
      function prepare() {
        return _prepare2.apply(this, arguments);
      }
      return prepare;
    }()
  }, {
    key: "getUserEncryptKey",
    value: function () {
      var _getUserEncryptKey = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee39() {
        var _this15 = this;
        var e;
        return _regenerator.default.wrap(function _callee39$(_context39) {
          while (1) {
            switch (_context39.prev = _context39.next) {
              case 0:
                if (!this.userEncryptKey) {
                  _context39.next = 2;
                  break;
                }
                return _context39.abrupt("return", this.userEncryptKey);
              case 2:
                if (!(kn && kn.expireTime)) {
                  _context39.next = 6;
                  break;
                }
                e = Date.now();
                if (!(kn.expireTime - e > 0)) {
                  _context39.next = 6;
                  break;
                }
                return _context39.abrupt("return", (this.userEncryptKey = kn, this.userEncryptKey));
              case 6:
                return _context39.abrupt("return", new Promise(function (e, t) {
                  uni.getUserCryptoManager().getLatestUserKey({
                    success: function success(t) {
                      kn = t, _this15.userEncryptKey = t, e(_this15.userEncryptKey);
                    },
                    fail: function fail(e) {
                      t(vn(_objectSpread(_objectSpread({}, _n), {}, {
                        cause: e
                      })));
                    }
                  });
                }));
              case 7:
              case "end":
                return _context39.stop();
            }
          }
        }, _callee39, this);
      }));
      function getUserEncryptKey() {
        return _getUserEncryptKey.apply(this, arguments);
      }
      return getUserEncryptKey;
    }()
  }, {
    key: "getWxAppId",
    value: function getWxAppId() {
      return wx.getAccountInfoSync().miniProgram.appId;
    }
  }, {
    key: "platformGetSignOption",
    value: function () {
      var _platformGetSignOption = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee40() {
        var _yield$this$getUserEn, e, t, n;
        return _regenerator.default.wrap(function _callee40$(_context40) {
          while (1) {
            switch (_context40.prev = _context40.next) {
              case 0:
                _context40.next = 2;
                return this.getUserEncryptKey();
              case 2:
                _yield$this$getUserEn = _context40.sent;
                e = _yield$this$getUserEn.encryptKey;
                t = _yield$this$getUserEn.iv;
                n = _yield$this$getUserEn.version;
                return _context40.abrupt("return", {
                  verifyClientSign: gn(JSON.stringify({
                    data: JSON.stringify({}),
                    appId: this.appId,
                    deviceId: this.deviceId,
                    wxAppId: this.getWxAppId(),
                    simulator: "devtools" === ce().platform,
                    timestamp: Date.now()
                  }), e, t),
                  encryptKeyId: n,
                  mpWeixinCode: this.scopedGlobalCache.mpWeixinCode,
                  mpWeixinOpenid: this.scopedGlobalCache.mpWeixinOpenid
                });
              case 7:
              case "end":
                return _context40.stop();
            }
          }
        }, _callee40, this);
      }));
      function platformGetSignOption() {
        return _platformGetSignOption.apply(this, arguments);
      }
      return platformGetSignOption;
    }()
  }, {
    key: "platformEncryptData",
    value: function () {
      var _platformEncryptData = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee41(e) {
        var _yield$this$getUserEn2, t, n, s, r;
        return _regenerator.default.wrap(function _callee41$(_context41) {
          while (1) {
            switch (_context41.prev = _context41.next) {
              case 0:
                _context41.next = 2;
                return this.getUserEncryptKey();
              case 2:
                _yield$this$getUserEn2 = _context41.sent;
                t = _yield$this$getUserEn2.encryptKey;
                n = _yield$this$getUserEn2.iv;
                s = _yield$this$getUserEn2.version;
                r = {
                  secretType: this.secretType,
                  encryptKeyId: s,
                  mpWeixinCode: this.scopedGlobalCache.mpWeixinCode,
                  mpWeixinOpenid: this.scopedGlobalCache.mpWeixinOpenid
                };
                return _context41.abrupt("return", this.secretType === Rt ? {
                  content: e,
                  _uniCloudOptions: r
                } : {
                  content: gn(JSON.stringify({
                    data: JSON.stringify(e),
                    appId: this.appId,
                    deviceId: this.deviceId,
                    wxAppId: this.getWxAppId(),
                    simulator: "devtools" === ce().platform,
                    timestamp: Date.now()
                  }), t, n),
                  _uniCloudOptions: r
                });
              case 8:
              case "end":
                return _context41.stop();
            }
          }
        }, _callee41, this);
      }));
      function platformEncryptData(_x33) {
        return _platformEncryptData.apply(this, arguments);
      }
      return platformEncryptData;
    }()
  }, {
    key: "platformDecryptResult",
    value: function () {
      var _platformDecryptResult = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee42(e) {
        var t, _yield$this$getUserEn3, n, s;
        return _regenerator.default.wrap(function _callee42$(_context42) {
          while (1) {
            switch (_context42.prev = _context42.next) {
              case 0:
                t = e.content;
                _context42.next = 3;
                return this.getUserEncryptKey();
              case 3:
                _yield$this$getUserEn3 = _context42.sent;
                n = _yield$this$getUserEn3.encryptKey;
                s = _yield$this$getUserEn3.iv;
                return _context42.abrupt("return", JSON.parse(function (e, t, n) {
                  var s = new Uint8Array(uni.base64ToArrayBuffer(e)),
                    r = new Uint8Array(uni.base64ToArrayBuffer(t)),
                    i = fn.utils.utf8.toBytes(n),
                    o = new fn.ModeOfOperation.cbc(r, i),
                    a = fn.padding.pkcs7.strip(o.decrypt(s));
                  return fn.utils.utf8.fromBytes(a);
                }(t, n, s)));
              case 7:
              case "end":
                return _context42.stop();
            }
          }
        }, _callee42, this);
      }));
      function platformDecryptResult(_x34) {
        return _platformDecryptResult.apply(this, arguments);
      }
      return platformDecryptResult;
    }()
  }, {
    key: "isClientKeyNotFound",
    value: function isClientKeyNotFound() {
      return !1;
    }
  }]);
  return In;
}(Lt);
function Tn(e) {
  var t = ["hasClientKey", "encryptGetClientKeyPayload", "setClientKey", "encrypt", "decrypt"],
    n = {};
  var _loop = function _loop(_s10) {
    var r = t[_s10];
    n[r] = function () {
      for (var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++) {
        t[_key] = arguments[_key];
      }
      return new Promise(function (n, s) {
        "function" == typeof e[r] ? e[r].apply(e, t.concat([function () {
          var _ref26 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            e = _ref26.type,
            t = _ref26.data,
            r = _ref26.errCode,
            i = _ref26.errMsg,
            o = _ref26.errSubject,
            a = _ref26.message;
          "success" === e ? n(t) : s(vn({
            errCode: r,
            errMsg: wn[r] || i || a,
            errSubject: o
          }));
        }])) : s(vn({
          message: "请检查manifest.json内是否开启安全网络模块，另外注意标准基座不支持安全网络模块"
        }));
      });
    };
  };
  for (var _s10 = 0; _s10 < t.length; _s10++) {
    _loop(_s10);
  }
  return n;
}
var Cn = /*#__PURE__*/function (_Lt2) {
  (0, _inherits2.default)(Cn, _Lt2);
  var _super10 = _createSuper(Cn);
  function Cn(e) {
    var _this16;
    (0, _classCallCheck2.default)(this, Cn);
    _this16 = _super10.call(this, e), _this16.clientType = "app", _this16.appUtils = _objectSpread({}, Tn(uni.requireNativePlugin("plus"))), _this16.systemInfo = bn || (bn = ce());
    return _this16;
  }
  (0, _createClass2.default)(Cn, [{
    key: "hasClientKey",
    value: function () {
      var _hasClientKey = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee43() {
        return _regenerator.default.wrap(function _callee43$(_context43) {
          while (1) {
            switch (_context43.prev = _context43.next) {
              case 0:
                _context43.next = 2;
                return this.appUtils.hasClientKey({
                  provider: this.provider,
                  spaceId: this.spaceId
                });
              case 2:
                this._hasClientKey = _context43.sent;
                return _context43.abrupt("return", this._hasClientKey);
              case 4:
              case "end":
                return _context43.stop();
            }
          }
        }, _callee43, this);
      }));
      function hasClientKey() {
        return _hasClientKey.apply(this, arguments);
      }
      return hasClientKey;
    }()
  }, {
    key: "getAppClientKey",
    value: function () {
      var _getAppClientKey = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee44() {
        var _yield$this$appUtils$, e, t, n, s, r;
        return _regenerator.default.wrap(function _callee44$(_context44) {
          while (1) {
            switch (_context44.prev = _context44.next) {
              case 0:
                _context44.next = 2;
                return this.appUtils.encryptGetClientKeyPayload({
                  data: JSON.stringify({})
                });
              case 2:
                _yield$this$appUtils$ = _context44.sent;
                e = _yield$this$appUtils$.data;
                t = _yield$this$appUtils$.key;
                _context44.next = 7;
                return this.uniCloudIns.callFunction({
                  name: "DCloud-clientDB",
                  data: {
                    redirectTo: "encryption",
                    action: "getAppClientKey",
                    data: e,
                    key: t
                  }
                });
              case 7:
                _context44.t0 = _context44.sent.result;
                if (_context44.t0) {
                  _context44.next = 10;
                  break;
                }
                _context44.t0 = {};
              case 10:
                n = _context44.t0;
                if (!(0 !== n.errCode)) {
                  _context44.next = 13;
                  break;
                }
                throw function (e) {
                  return new ne({
                    subject: e.errSubject || "uni-secure-network",
                    code: e.errCode || e.code || mn.code,
                    message: e.errMsg || e.message
                  });
                }(n);
              case 13:
                s = n.clientKey, r = n.key;
                _context44.next = 16;
                return this.appUtils.setClientKey({
                  provider: this.provider,
                  spaceId: this.spaceId,
                  clientKey: s,
                  key: r
                });
              case 16:
              case "end":
                return _context44.stop();
            }
          }
        }, _callee44, this);
      }));
      function getAppClientKey() {
        return _getAppClientKey.apply(this, arguments);
      }
      return getAppClientKey;
    }()
  }, {
    key: "ensureClientKey",
    value: function () {
      var _ensureClientKey = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee45() {
        var _this17 = this;
        var _ref27,
          _ref27$forceUpdate,
          e,
          _args45 = arguments;
        return _regenerator.default.wrap(function _callee45$(_context45) {
          while (1) {
            switch (_context45.prev = _context45.next) {
              case 0:
                _ref27 = _args45.length > 0 && _args45[0] !== undefined ? _args45[0] : {}, _ref27$forceUpdate = _ref27.forceUpdate, e = _ref27$forceUpdate === void 0 ? !1 : _ref27$forceUpdate;
                _context45.t1 = !0;
                _context45.next = 4;
                return this.hasClientKey();
              case 4:
                _context45.t2 = _context45.sent;
                _context45.t0 = _context45.t1 !== _context45.t2;
                if (_context45.t0) {
                  _context45.next = 8;
                  break;
                }
                _context45.t0 = e;
              case 8:
                if (!_context45.t0) {
                  _context45.next = 10;
                  break;
                }
                return _context45.abrupt("return", (e && this.scopedGlobalCache.initPromise && this.scopedGlobalCache.initStatus === d || !e && this.scopedGlobalCache.initPromise && this.scopedGlobalCache.initStatus !== f || (this.scopedGlobalCache.initPromise = this.getAppClientKey(), this.scopedGlobalCache.initPromise.then(function (e) {
                  _this17.scopedGlobalCache.initStatus = p;
                }).catch(function (e) {
                  throw _this17.scopedGlobalCache.initStatus = f, e;
                }), this.scopedGlobalCache.initStatus = d), this.scopedGlobalCache.initPromise));
              case 10:
              case "end":
                return _context45.stop();
            }
          }
        }, _callee45, this);
      }));
      function ensureClientKey() {
        return _ensureClientKey.apply(this, arguments);
      }
      return ensureClientKey;
    }()
  }, {
    key: "prepare",
    value: function () {
      var _prepare3 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee46() {
        var _ref28,
          _ref28$forceUpdate,
          e,
          _args46 = arguments;
        return _regenerator.default.wrap(function _callee46$(_context46) {
          while (1) {
            switch (_context46.prev = _context46.next) {
              case 0:
                _ref28 = _args46.length > 0 && _args46[0] !== undefined ? _args46[0] : {}, _ref28$forceUpdate = _ref28.forceUpdate, e = _ref28$forceUpdate === void 0 ? !1 : _ref28$forceUpdate;
                _context46.next = 3;
                return this.ensureClientKey({
                  forceUpdate: e
                });
              case 3:
              case "end":
                return _context46.stop();
            }
          }
        }, _callee46, this);
      }));
      function prepare() {
        return _prepare3.apply(this, arguments);
      }
      return prepare;
    }()
  }, {
    key: "platformGetSignOption",
    value: function () {
      var _platformGetSignOption2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee47() {
        var _yield$this$appUtils$2, e, t;
        return _regenerator.default.wrap(function _callee47$(_context47) {
          while (1) {
            switch (_context47.prev = _context47.next) {
              case 0:
                _context47.next = 2;
                return this.appUtils.encrypt({
                  provider: this.provider,
                  spaceId: this.spaceId,
                  data: JSON.stringify({})
                });
              case 2:
                _yield$this$appUtils$2 = _context47.sent;
                e = _yield$this$appUtils$2.data;
                t = _yield$this$appUtils$2.key;
                return _context47.abrupt("return", {
                  verifyClientSign: e,
                  encryptKeyId: t
                });
              case 6:
              case "end":
                return _context47.stop();
            }
          }
        }, _callee47, this);
      }));
      function platformGetSignOption() {
        return _platformGetSignOption2.apply(this, arguments);
      }
      return platformGetSignOption;
    }()
  }, {
    key: "platformEncryptData",
    value: function () {
      var _platformEncryptData2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee48(e) {
        var _yield$this$appUtils$3, t, n, s;
        return _regenerator.default.wrap(function _callee48$(_context48) {
          while (1) {
            switch (_context48.prev = _context48.next) {
              case 0:
                _context48.next = 2;
                return this.appUtils.encrypt({
                  provider: this.provider,
                  spaceId: this.spaceId,
                  data: JSON.stringify(e)
                });
              case 2:
                _yield$this$appUtils$3 = _context48.sent;
                t = _yield$this$appUtils$3.data;
                n = _yield$this$appUtils$3.key;
                s = {
                  secretType: this.secretType,
                  encryptKeyId: n
                };
                return _context48.abrupt("return", this.secretType === Rt ? {
                  content: e,
                  _uniCloudOptions: s
                } : {
                  content: t,
                  _uniCloudOptions: s
                });
              case 7:
              case "end":
                return _context48.stop();
            }
          }
        }, _callee48, this);
      }));
      function platformEncryptData(_x35) {
        return _platformEncryptData2.apply(this, arguments);
      }
      return platformEncryptData;
    }()
  }, {
    key: "platformDecryptResult",
    value: function () {
      var _platformDecryptResult2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee49(e) {
        var t, _e$_uniCloudOptions, n, s, r;
        return _regenerator.default.wrap(function _callee49$(_context49) {
          while (1) {
            switch (_context49.prev = _context49.next) {
              case 0:
                t = e.content;
                _e$_uniCloudOptions = e._uniCloudOptions;
                n = _e$_uniCloudOptions === void 0 ? {} : _e$_uniCloudOptions;
                s = n.encryptKeyId;
                _context49.next = 6;
                return this.appUtils.decrypt({
                  provider: this.provider,
                  spaceId: this.spaceId,
                  data: t,
                  key: s
                });
              case 6:
                r = _context49.sent;
                return _context49.abrupt("return", JSON.parse(r.data));
              case 8:
              case "end":
                return _context49.stop();
            }
          }
        }, _callee49, this);
      }));
      function platformDecryptResult(_x36) {
        return _platformDecryptResult2.apply(this, arguments);
      }
      return platformDecryptResult;
    }()
  }, {
    key: "isClientKeyNotFound",
    value: function isClientKeyNotFound() {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = e.result || {};
      return 70009 === t.errCode && "uni-secure-network" === t.errSubject;
    }
  }]);
  return Cn;
}(Lt);
function An() {
  var _ref29 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    e = _ref29.secretType;
  return e === xt || e === Rt || e === Ut;
}
function Pn() {
  var _ref30 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    e = _ref30.name,
    _ref30$data = _ref30.data,
    t = _ref30$data === void 0 ? {} : _ref30$data;
  return "app" === A && "DCloud-clientDB" === e && "encryption" === t.redirectTo && "getAppClientKey" === t.action;
}
function En() {
  var _ref31 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    e = _ref31.provider,
    t = _ref31.spaceId,
    n = _ref31.functionName;
  var _ce = ce(),
    s = _ce.appId,
    r = _ce.uniPlatform,
    i = _ce.osName;
  var o = r;
  "app" === r && (o = i);
  var a = function () {
    var _ref32 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      e = _ref32.provider,
      t = _ref32.spaceId;
    var n = C;
    if (!n) return {};
    e = function (e) {
      return "tencent" === e ? "tcb" : e;
    }(e);
    var s = n.find(function (n) {
      return n.provider === e && n.spaceId === t;
    });
    return s && s.config;
  }({
    provider: e,
    spaceId: t
  });
  if (!a || !a.accessControl || !a.accessControl.enable) return !1;
  var c = a.accessControl.function || {},
    u = Object.keys(c);
  if (0 === u.length) return !0;
  var l = function (e, t) {
    var n, s, r;
    for (var _i2 = 0; _i2 < e.length; _i2++) {
      var _o2 = e[_i2];
      _o2 !== t ? "*" !== _o2 ? _o2.split(",").map(function (e) {
        return e.trim();
      }).indexOf(t) > -1 && (s = _o2) : r = _o2 : n = _o2;
    }
    return n || s || r;
  }(u, n);
  if (!l) return !1;
  if ((c[l] || []).find(function () {
    var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return e.appId === s && (e.platform || "").toLowerCase() === o.toLowerCase();
  })) return !0;
  throw console.error("\u6B64\u5E94\u7528[appId: ".concat(s, ", platform: ").concat(o, "]\u4E0D\u5728\u4E91\u7AEF\u914D\u7F6E\u7684\u5141\u8BB8\u8BBF\u95EE\u7684\u5E94\u7528\u5217\u8868\u5185\uFF0C\u53C2\u8003\uFF1Ahttps://uniapp.dcloud.net.cn/uniCloud/secure-network.html#verify-client")), vn(yn);
}
function On(_ref33) {
  var e = _ref33.functionName,
    t = _ref33.result,
    n = _ref33.logPvd;
  if (k && this.__dev__.debugLog && t && t.requestId) {
    var _s11 = JSON.stringify({
      spaceId: this.config.spaceId,
      functionName: e,
      requestId: t.requestId
    });
    console.log("[".concat(n, "-request]").concat(_s11, "[/").concat(n, "-request]"));
  }
}
function xn(e) {
  var t = e.callFunction,
    n = function n(_n7) {
      var _this18 = this;
      var s = _n7.name;
      _n7.data = It.call(e, {
        data: _n7.data
      });
      var r = {
          aliyun: "aliyun",
          tencent: "tcb",
          tcb: "tcb"
        }[this.config.provider],
        i = An(_n7),
        o = Pn(_n7),
        a = i || o;
      return t.call(this, _n7).then(function (e) {
        return e.errCode = 0, !a && On.call(_this18, {
          functionName: s,
          result: e,
          logPvd: r
        }), Promise.resolve(e);
      }, function (e) {
        return !a && On.call(_this18, {
          functionName: s,
          result: e,
          logPvd: r
        }), e && e.message && (e.message = function () {
          var _ref34 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref34$message = _ref34.message,
            e = _ref34$message === void 0 ? "" : _ref34$message,
            _ref34$extraInfo = _ref34.extraInfo,
            t = _ref34$extraInfo === void 0 ? {} : _ref34$extraInfo,
            _ref34$formatter = _ref34.formatter,
            n = _ref34$formatter === void 0 ? [] : _ref34$formatter;
          for (var _s12 = 0; _s12 < n.length; _s12++) {
            var _n$_s = n[_s12],
              _r4 = _n$_s.rule,
              _i3 = _n$_s.content,
              _o3 = _n$_s.mode,
              _a = e.match(_r4);
            if (!_a) continue;
            var _c = _i3;
            for (var _e20 = 1; _e20 < _a.length; _e20++) {
              _c = Et(_c, "{$".concat(_e20, "}"), _a[_e20]);
            }
            for (var _e21 in t) {
              _c = Et(_c, "{".concat(_e21, "}"), t[_e21]);
            }
            return "replace" === _o3 ? _c : e + _c;
          }
          return e;
        }({
          message: "[".concat(_n7.name, "]: ").concat(e.message),
          formatter: Ct,
          extraInfo: {
            functionName: s
          }
        })), Promise.reject(e);
      });
    };
  e.callFunction = function (t) {
    var _e$config = e.config,
      s = _e$config.provider,
      r = _e$config.spaceId,
      i = t.name;
    var o, a;
    if (t.data = t.data || {}, k && e.__dev__.debugInfo && !e.__dev__.debugInfo.forceRemote && E ? (e._callCloudFunction || (e._callCloudFunction = n, e._callLocalFunction = Tt), o = Tt) : o = n, o = o.bind(e), Pn(t)) a = n.call(e, t);else if (function (_ref35) {
      var e = _ref35.name,
        _ref35$data = _ref35.data,
        t = _ref35$data === void 0 ? {} : _ref35$data;
      return "mp-weixin" === A && "uni-id-co" === e && "secureNetworkHandshakeByWeixin" === t.method;
    }(t)) a = o.call(e, t);else if (An(t)) {
      a = new Sn({
        secretType: t.secretType,
        uniCloudIns: e
      }).wrapEncryptDataCallFunction(n.bind(e))(t);
    } else if (En({
      provider: s,
      spaceId: r,
      functionName: i
    })) {
      a = new Sn({
        secretType: t.secretType,
        uniCloudIns: e
      }).wrapVerifyClientCallFunction(n.bind(e))(t);
    } else a = o(t);
    return Object.defineProperty(a, "result", {
      get: function get() {
        return console.warn("当前返回结果为Promise类型，不可直接访问其result属性，详情请参考：https://uniapp.dcloud.net.cn/uniCloud/faq?id=promise"), {};
      }
    }), a;
  };
}
Sn = "mp-weixin" !== A && "app" !== A ? /*#__PURE__*/function () {
  function _class2() {
    (0, _classCallCheck2.default)(this, _class2);
    throw vn({
      message: "Platform ".concat(A, " is not supported by secure network")
    });
  }
  return (0, _createClass2.default)(_class2);
}() : T ? "mp-weixin" === A ? In : Cn : /*#__PURE__*/function () {
  function _class3() {
    (0, _classCallCheck2.default)(this, _class3);
    throw vn({
      message: "Platform ".concat(A, " is not enabled, please check whether secure network module is enabled in your manifest.json")
    });
  }
  return (0, _createClass2.default)(_class3);
}();
var Rn = Symbol("CLIENT_DB_INTERNAL");
function Un(e, t) {
  return e.then = "DoNotReturnProxyWithAFunctionNamedThen", e._internalType = Rn, e.inspect = null, e.__ob__ = void 0, new Proxy(e, {
    get: function get(e, n, s) {
      if ("_uniClient" === n) return null;
      if ("symbol" == (0, _typeof2.default)(n)) return e[n];
      if (n in e || "string" != typeof n) {
        var _t10 = e[n];
        return "function" == typeof _t10 ? _t10.bind(e) : _t10;
      }
      return t.get(e, n, s);
    }
  });
}
function Ln(e) {
  return {
    on: function on(t, n) {
      e[t] = e[t] || [], e[t].indexOf(n) > -1 || e[t].push(n);
    },
    off: function off(t, n) {
      e[t] = e[t] || [];
      var s = e[t].indexOf(n);
      -1 !== s && e[t].splice(s, 1);
    }
  };
}
var Nn = ["db.Geo", "db.command", "command.aggregate"];
function Dn(e, t) {
  return Nn.indexOf("".concat(e, ".").concat(t)) > -1;
}
function Fn(e) {
  switch (g(e)) {
    case "array":
      return e.map(function (e) {
        return Fn(e);
      });
    case "object":
      return e._internalType === Rn || Object.keys(e).forEach(function (t) {
        e[t] = Fn(e[t]);
      }), e;
    case "regexp":
      return {
        $regexp: {
          source: e.source,
          flags: e.flags
        }
      };
    case "date":
      return {
        $date: e.toISOString()
      };
    default:
      return e;
  }
}
function qn(e) {
  return e && e.content && e.content.$method;
}
var Kn = /*#__PURE__*/function () {
  function Kn(e, t, n) {
    (0, _classCallCheck2.default)(this, Kn);
    this.content = e, this.prevStage = t || null, this.udb = null, this._database = n;
  }
  (0, _createClass2.default)(Kn, [{
    key: "toJSON",
    value: function toJSON() {
      var e = this;
      var t = [e.content];
      for (; e.prevStage;) {
        e = e.prevStage, t.push(e.content);
      }
      return {
        $db: t.reverse().map(function (e) {
          return {
            $method: e.$method,
            $param: Fn(e.$param)
          };
        })
      };
    }
  }, {
    key: "getAction",
    value: function getAction() {
      var e = this.toJSON().$db.find(function (e) {
        return "action" === e.$method;
      });
      return e && e.$param && e.$param[0];
    }
  }, {
    key: "getCommand",
    value: function getCommand() {
      return {
        $db: this.toJSON().$db.filter(function (e) {
          return "action" !== e.$method;
        })
      };
    }
  }, {
    key: "isAggregate",
    get: function get() {
      var e = this;
      for (; e;) {
        var t = qn(e),
          _n8 = qn(e.prevStage);
        if ("aggregate" === t && "collection" === _n8 || "pipeline" === t) return !0;
        e = e.prevStage;
      }
      return !1;
    }
  }, {
    key: "isCommand",
    get: function get() {
      var e = this;
      for (; e;) {
        if ("command" === qn(e)) return !0;
        e = e.prevStage;
      }
      return !1;
    }
  }, {
    key: "isAggregateCommand",
    get: function get() {
      var e = this;
      for (; e;) {
        var t = qn(e),
          _n9 = qn(e.prevStage);
        if ("aggregate" === t && "command" === _n9) return !0;
        e = e.prevStage;
      }
      return !1;
    }
  }, {
    key: "getNextStageFn",
    value: function getNextStageFn(e) {
      var t = this;
      return function () {
        return Mn({
          $method: e,
          $param: Fn(Array.from(arguments))
        }, t, t._database);
      };
    }
  }, {
    key: "count",
    get: function get() {
      return this.isAggregate ? this.getNextStageFn("count") : function () {
        return this._send("count", Array.from(arguments));
      };
    }
  }, {
    key: "remove",
    get: function get() {
      return this.isCommand ? this.getNextStageFn("remove") : function () {
        return this._send("remove", Array.from(arguments));
      };
    }
  }, {
    key: "get",
    value: function get() {
      return this._send("get", Array.from(arguments));
    }
  }, {
    key: "add",
    get: function get() {
      return this.isCommand ? this.getNextStageFn("add") : function () {
        return this._send("add", Array.from(arguments));
      };
    }
  }, {
    key: "update",
    value: function update() {
      return this._send("update", Array.from(arguments));
    }
  }, {
    key: "end",
    value: function end() {
      return this._send("end", Array.from(arguments));
    }
  }, {
    key: "set",
    get: function get() {
      return this.isCommand ? this.getNextStageFn("set") : function () {
        throw new Error("JQL禁止使用set方法");
      };
    }
  }, {
    key: "_send",
    value: function _send(e, t) {
      var n = this.getAction(),
        s = this.getCommand();
      if (s.$db.push({
        $method: e,
        $param: Fn(t)
      }), k) {
        var _e22 = s.$db.find(function (e) {
            return "collection" === e.$method;
          }),
          _t11 = _e22 && _e22.$param;
        _t11 && 1 === _t11.length && "string" == typeof _e22.$param[0] && _e22.$param[0].indexOf(",") > -1 && console.warn("检测到使用JQL语法联表查询时，未使用getTemp先过滤主表数据，在主表数据量大的情况下可能会查询缓慢。\n- 如何优化请参考此文档：https://uniapp.dcloud.net.cn/uniCloud/jql?id=lookup-with-temp \n- 如果主表数据量很小请忽略此信息，项目发行时不会出现此提示。");
      }
      return this._database._callCloudFunction({
        action: n,
        command: s
      });
    }
  }]);
  return Kn;
}();
function Mn(e, t, n) {
  return Un(new Kn(e, t, n), {
    get: function get(e, t) {
      var s = "db";
      return e && e.content && (s = e.content.$method), Dn(s, t) ? Mn({
        $method: t
      }, e, n) : function () {
        return Mn({
          $method: t,
          $param: Fn(Array.from(arguments))
        }, e, n);
      };
    }
  });
}
function jn(_ref36) {
  var e = _ref36.path,
    t = _ref36.method;
  return /*#__PURE__*/function () {
    function _class4() {
      (0, _classCallCheck2.default)(this, _class4);
      this.param = Array.from(arguments);
    }
    (0, _createClass2.default)(_class4, [{
      key: "toJSON",
      value: function toJSON() {
        return {
          $newDb: [].concat((0, _toConsumableArray2.default)(e.map(function (e) {
            return {
              $method: e
            };
          })), [{
            $method: t,
            $param: this.param
          }])
        };
      }
    }]);
    return _class4;
  }();
}
function Bn(e) {
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return Un(new e(t), {
    get: function get(e, t) {
      return Dn("db", t) ? Mn({
        $method: t
      }, null, e) : function () {
        return Mn({
          $method: t,
          $param: Fn(Array.from(arguments))
        }, null, e);
      };
    }
  });
}
var $n = /*#__PURE__*/function (_ref37) {
  (0, _inherits2.default)($n, _ref37);
  var _super11 = _createSuper($n);
  function $n() {
    (0, _classCallCheck2.default)(this, $n);
    return _super11.apply(this, arguments);
  }
  (0, _createClass2.default)($n, [{
    key: "_parseResult",
    value: function _parseResult(e) {
      return this._isJQL ? e.result : e;
    }
  }, {
    key: "_callCloudFunction",
    value: function _callCloudFunction(_ref38) {
      var _this19 = this;
      var e = _ref38.action,
        t = _ref38.command,
        n = _ref38.multiCommand,
        s = _ref38.queryList;
      function r(e, t) {
        if (n && s) for (var _n10 = 0; _n10 < s.length; _n10++) {
          var _r5 = s[_n10];
          _r5.udb && "function" == typeof _r5.udb.setResult && (t ? _r5.udb.setResult(t) : _r5.udb.setResult(e.result.dataList[_n10]));
        }
      }
      var i = this,
        o = this._isJQL ? "databaseForJQL" : "database";
      function a(e) {
        return i._callback("error", [e]), q(K(o, "fail"), e).then(function () {
          return q(K(o, "complete"), e);
        }).then(function () {
          return r(null, e), Q(B, {
            type: z,
            content: e
          }), Promise.reject(e);
        });
      }
      var c = q(K(o, "invoke")),
        u = this._uniClient;
      return c.then(function () {
        return u.callFunction({
          name: "DCloud-clientDB",
          type: h,
          data: {
            action: e,
            command: t,
            multiCommand: n
          }
        });
      }).then(function (e) {
        var _e$result = e.result,
          t = _e$result.code,
          n = _e$result.message,
          s = _e$result.token,
          c = _e$result.tokenExpired,
          _e$result$systemInfo = _e$result.systemInfo,
          u = _e$result$systemInfo === void 0 ? [] : _e$result$systemInfo;
        if (u) for (var _e23 = 0; _e23 < u.length; _e23++) {
          var _u$_e = u[_e23],
            _t12 = _u$_e.level,
            _n11 = _u$_e.message,
            _s13 = _u$_e.detail,
            _r6 = console["app" === A && "warn" === _t12 ? "error" : _t12] || console.log;
          var _i4 = "[System Info]" + _n11;
          _s13 && (_i4 = "".concat(_i4, "\n\u8BE6\u7EC6\u4FE1\u606F\uFF1A").concat(_s13)), _r6(_i4);
        }
        if (t) {
          return a(new ne({
            code: t,
            message: n,
            requestId: e.requestId
          }));
        }
        e.result.errCode = e.result.errCode || e.result.code, e.result.errMsg = e.result.errMsg || e.result.message, s && c && (ie({
          token: s,
          tokenExpired: c
        }), _this19._callbackAuth("refreshToken", [{
          token: s,
          tokenExpired: c
        }]), _this19._callback("refreshToken", [{
          token: s,
          tokenExpired: c
        }]), Q(W, {
          token: s,
          tokenExpired: c
        }));
        var l = [{
          prop: "affectedDocs",
          tips: "affectedDocs不再推荐使用，请使用inserted/deleted/updated/data.length替代"
        }, {
          prop: "code",
          tips: "code不再推荐使用，请使用errCode替代"
        }, {
          prop: "message",
          tips: "message不再推荐使用，请使用errMsg替代"
        }];
        var _loop2 = function _loop2(_t13) {
          var _l$_t = l[_t13],
            n = _l$_t.prop,
            s = _l$_t.tips;
          if (n in e.result) {
            var _t14 = e.result[n];
            Object.defineProperty(e.result, n, {
              get: function get() {
                return console.warn(s), _t14;
              }
            });
          }
        };
        for (var _t13 = 0; _t13 < l.length; _t13++) {
          _loop2(_t13);
        }
        return function (e) {
          return q(K(o, "success"), e).then(function () {
            return q(K(o, "complete"), e);
          }).then(function () {
            r(e, null);
            var t = i._parseResult(e);
            return Q(B, {
              type: z,
              content: t
            }), Promise.resolve(t);
          });
        }(e);
      }, function (e) {
        /fc_function_not_found|FUNCTION_NOT_FOUND/g.test(e.message) && console.warn("clientDB未初始化，请在web控制台保存一次schema以开启clientDB");
        return a(new ne({
          code: e.code || "SYSTEM_ERROR",
          message: e.message,
          requestId: e.requestId
        }));
      });
    }
  }]);
  return $n;
}( /*#__PURE__*/function () {
  function _class5() {
    var _ref39 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref39$uniClient = _ref39.uniClient,
      e = _ref39$uniClient === void 0 ? {} : _ref39$uniClient,
      _ref39$isJQL = _ref39.isJQL,
      t = _ref39$isJQL === void 0 ? !1 : _ref39$isJQL;
    (0, _classCallCheck2.default)(this, _class5);
    this._uniClient = e, this._authCallBacks = {}, this._dbCallBacks = {}, e._isDefault && (this._dbCallBacks = U("_globalUniCloudDatabaseCallback")), t || (this.auth = Ln(this._authCallBacks)), this._isJQL = t, Object.assign(this, Ln(this._dbCallBacks)), this.env = Un({}, {
      get: function get(e, t) {
        return {
          $env: t
        };
      }
    }), this.Geo = Un({}, {
      get: function get(e, t) {
        return jn({
          path: ["Geo"],
          method: t
        });
      }
    }), this.serverDate = jn({
      path: [],
      method: "serverDate"
    }), this.RegExp = jn({
      path: [],
      method: "RegExp"
    });
  }
  (0, _createClass2.default)(_class5, [{
    key: "getCloudEnv",
    value: function getCloudEnv(e) {
      if ("string" != typeof e || !e.trim()) throw new Error("getCloudEnv参数错误");
      return {
        $env: e.replace("$cloudEnv_", "")
      };
    }
  }, {
    key: "_callback",
    value: function _callback(e, t) {
      var n = this._dbCallBacks;
      n[e] && n[e].forEach(function (e) {
        e.apply(void 0, (0, _toConsumableArray2.default)(t));
      });
    }
  }, {
    key: "_callbackAuth",
    value: function _callbackAuth(e, t) {
      var n = this._authCallBacks;
      n[e] && n[e].forEach(function (e) {
        e.apply(void 0, (0, _toConsumableArray2.default)(t));
      });
    }
  }, {
    key: "multiSend",
    value: function multiSend() {
      var e = Array.from(arguments),
        t = e.map(function (e) {
          var t = e.getAction(),
            n = e.getCommand();
          if ("getTemp" !== n.$db[n.$db.length - 1].$method) throw new Error("multiSend只支持子命令内使用getTemp");
          return {
            action: t,
            command: n
          };
        });
      return this._callCloudFunction({
        multiCommand: t,
        queryList: e
      });
    }
  }]);
  return _class5;
}());
var Wn = "token无效，跳转登录页面",
  zn = "token过期，跳转登录页面",
  Jn = {
    TOKEN_INVALID_TOKEN_EXPIRED: zn,
    TOKEN_INVALID_INVALID_CLIENTID: Wn,
    TOKEN_INVALID: Wn,
    TOKEN_INVALID_WRONG_TOKEN: Wn,
    TOKEN_INVALID_ANONYMOUS_USER: Wn
  },
  Hn = {
    "uni-id-token-expired": zn,
    "uni-id-check-token-failed": Wn,
    "uni-id-token-not-exist": Wn,
    "uni-id-check-device-feature-failed": Wn
  };
function Gn(e, t) {
  var n = "";
  return n = e ? "".concat(e, "/").concat(t) : t, n.replace(/^\//, "");
}
function Vn() {
  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var n = [],
    s = [];
  return e.forEach(function (e) {
    !0 === e.needLogin ? n.push(Gn(t, e.path)) : !1 === e.needLogin && s.push(Gn(t, e.path));
  }), {
    needLoginPage: n,
    notNeedLoginPage: s
  };
}
function Yn(e) {
  return e.split("?")[0].replace(/^\//, "");
}
function Qn() {
  return function (e) {
    var t = e && e.$page && e.$page.fullPath || "";
    return t ? ("/" !== t.charAt(0) && (t = "/" + t), t) : t;
  }(function () {
    var e = getCurrentPages();
    return e[e.length - 1];
  }());
}
function Xn() {
  return Yn(Qn());
}
function Zn() {
  var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (!e) return !1;
  if (!(t && t.list && t.list.length)) return !1;
  var n = t.list,
    s = Yn(e);
  return n.some(function (e) {
    return e.pagePath === s;
  });
}
var es = !!_pages.default.uniIdRouter;
var _ref40 = function () {
    var _ref21 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pages.default,
      _ref21$pages = _ref21.pages,
      e = _ref21$pages === void 0 ? [] : _ref21$pages,
      _ref21$subPackages = _ref21.subPackages,
      n = _ref21$subPackages === void 0 ? [] : _ref21$subPackages,
      _ref21$uniIdRouter = _ref21.uniIdRouter,
      s = _ref21$uniIdRouter === void 0 ? {} : _ref21$uniIdRouter,
      _ref21$tabBar = _ref21.tabBar,
      r = _ref21$tabBar === void 0 ? {} : _ref21$tabBar;
    var i = s.loginPage,
      _s$needLogin = s.needLogin,
      o = _s$needLogin === void 0 ? [] : _s$needLogin,
      _s$resToLogin = s.resToLogin,
      a = _s$resToLogin === void 0 ? !0 : _s$resToLogin,
      _Vn = Vn(e),
      c = _Vn.needLoginPage,
      u = _Vn.notNeedLoginPage,
      _ref23 = function () {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var t = [],
          n = [];
        return e.forEach(function (e) {
          var s = e.root,
            _e$pages = e.pages,
            r = _e$pages === void 0 ? [] : _e$pages,
            _Vn2 = Vn(r, s),
            i = _Vn2.needLoginPage,
            o = _Vn2.notNeedLoginPage;
          t.push.apply(t, (0, _toConsumableArray2.default)(i)), n.push.apply(n, (0, _toConsumableArray2.default)(o));
        }), {
          needLoginPage: t,
          notNeedLoginPage: n
        };
      }(n),
      l = _ref23.needLoginPage,
      h = _ref23.notNeedLoginPage;
    return {
      loginPage: i,
      routerNeedLogin: o,
      resToLogin: a,
      needLoginPage: [].concat((0, _toConsumableArray2.default)(c), (0, _toConsumableArray2.default)(l)),
      notNeedLoginPage: [].concat((0, _toConsumableArray2.default)(u), (0, _toConsumableArray2.default)(h)),
      loginPageInTabBar: Zn(i, r)
    };
  }(),
  ts = _ref40.loginPage,
  ns = _ref40.routerNeedLogin,
  ss = _ref40.resToLogin,
  rs = _ref40.needLoginPage,
  is = _ref40.notNeedLoginPage,
  os = _ref40.loginPageInTabBar;
if (rs.indexOf(ts) > -1) throw new Error("Login page [".concat(ts, "] should not be \"needLogin\", please check your pages.json"));
function as(e) {
  var t = Xn();
  if ("/" === e.charAt(0)) return e;
  var _e$split = e.split("?"),
    _e$split2 = (0, _slicedToArray2.default)(_e$split, 2),
    n = _e$split2[0],
    s = _e$split2[1],
    r = n.replace(/^\//, "").split("/"),
    i = t.split("/");
  i.pop();
  for (var _e24 = 0; _e24 < r.length; _e24++) {
    var _t15 = r[_e24];
    ".." === _t15 ? i.pop() : "." !== _t15 && i.push(_t15);
  }
  return "" === i[0] && i.shift(), "/" + i.join("/") + (s ? "?" + s : "");
}
function cs(e) {
  var t = Yn(as(e));
  return !(is.indexOf(t) > -1) && (rs.indexOf(t) > -1 || ns.some(function (t) {
    return function (e, t) {
      return new RegExp(t).test(e);
    }(e, t);
  }));
}
function us(_ref41) {
  var e = _ref41.redirect;
  var t = Yn(e),
    n = Yn(ts);
  return Xn() !== n && t !== n;
}
function ls() {
  var _ref42 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    e = _ref42.api,
    t = _ref42.redirect;
  if (!t || !us({
    redirect: t
  })) return;
  var n = function (e, t) {
    return "/" !== e.charAt(0) && (e = "/" + e), t ? e.indexOf("?") > -1 ? e + "&uniIdRedirectUrl=".concat(encodeURIComponent(t)) : e + "?uniIdRedirectUrl=".concat(encodeURIComponent(t)) : e;
  }(ts, t);
  os ? "navigateTo" !== e && "redirectTo" !== e || (e = "switchTab") : "switchTab" === e && (e = "navigateTo");
  var s = {
    navigateTo: uni.navigateTo,
    redirectTo: uni.redirectTo,
    switchTab: uni.switchTab,
    reLaunch: uni.reLaunch
  };
  setTimeout(function () {
    s[e]({
      url: n
    });
  });
}
function hs() {
  var _ref43 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    e = _ref43.url;
  var t = {
      abortLoginPageJump: !1,
      autoToLoginPage: !1
    },
    n = function () {
      var _re3 = re(),
        e = _re3.token,
        t = _re3.tokenExpired;
      var n;
      if (e) {
        if (t < Date.now()) {
          var _e25 = "uni-id-token-expired";
          n = {
            errCode: _e25,
            errMsg: Hn[_e25]
          };
        }
      } else {
        var _e26 = "uni-id-check-token-failed";
        n = {
          errCode: _e26,
          errMsg: Hn[_e26]
        };
      }
      return n;
    }();
  if (cs(e) && n) {
    n.uniIdRedirectUrl = e;
    if (G($).length > 0) return setTimeout(function () {
      Q($, n);
    }, 0), t.abortLoginPageJump = !0, t;
    t.autoToLoginPage = !0;
  }
  return t;
}
function ds() {
  !function () {
    var e = Qn(),
      _hs = hs({
        url: e
      }),
      t = _hs.abortLoginPageJump,
      n = _hs.autoToLoginPage;
    t || n && ls({
      api: "redirectTo",
      redirect: e
    });
  }();
  var e = ["navigateTo", "redirectTo", "reLaunch", "switchTab"];
  var _loop3 = function _loop3(_t16) {
    var n = e[_t16];
    uni.addInterceptor(n, {
      invoke: function invoke(e) {
        var _hs2 = hs({
            url: e.url
          }),
          t = _hs2.abortLoginPageJump,
          s = _hs2.autoToLoginPage;
        return t ? e : s ? (ls({
          api: n,
          redirect: as(e.url)
        }), !1) : e;
      }
    });
  };
  for (var _t16 = 0; _t16 < e.length; _t16++) {
    _loop3(_t16);
  }
}
function ps() {
  this.onResponse(function (e) {
    var t = e.type,
      n = e.content;
    var s = !1;
    switch (t) {
      case "cloudobject":
        s = function (e) {
          if ("object" != (0, _typeof2.default)(e)) return !1;
          var _ref44 = e || {},
            t = _ref44.errCode;
          return t in Hn;
        }(n);
        break;
      case "clientdb":
        s = function (e) {
          if ("object" != (0, _typeof2.default)(e)) return !1;
          var _ref45 = e || {},
            t = _ref45.errCode;
          return t in Jn;
        }(n);
    }
    s && function () {
      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var t = G($);
      ee().then(function () {
        var n = Qn();
        if (n && us({
          redirect: n
        })) return t.length > 0 ? Q($, Object.assign({
          uniIdRedirectUrl: n
        }, e)) : void (ts && ls({
          api: "navigateTo",
          redirect: n
        }));
      });
    }(n);
  });
}
function fs(e) {
  !function (e) {
    e.onResponse = function (e) {
      V(B, e);
    }, e.offResponse = function (e) {
      Y(B, e);
    };
  }(e), function (e) {
    e.onNeedLogin = function (e) {
      V($, e);
    }, e.offNeedLogin = function (e) {
      Y($, e);
    }, es && (U("_globalUniCloudStatus").needLoginInit || (U("_globalUniCloudStatus").needLoginInit = !0, ee().then(function () {
      ds.call(e);
    }), ss && ps.call(e)));
  }(e), function (e) {
    e.onRefreshToken = function (e) {
      V(W, e);
    }, e.offRefreshToken = function (e) {
      Y(W, e);
    };
  }(e);
}
var gs;
var ms = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  ys = /^(?:[A-Za-z\d+/]{4})*?(?:[A-Za-z\d+/]{2}(?:==)?|[A-Za-z\d+/]{3}=?)?$/;
function _s() {
  var e = re().token || "",
    t = e.split(".");
  if (!e || 3 !== t.length) return {
    uid: null,
    role: [],
    permission: [],
    tokenExpired: 0
  };
  var n;
  try {
    n = JSON.parse((s = t[1], decodeURIComponent(gs(s).split("").map(function (e) {
      return "%" + ("00" + e.charCodeAt(0).toString(16)).slice(-2);
    }).join(""))));
  } catch (e) {
    throw new Error("获取当前用户信息出错，详细错误信息为：" + e.message);
  }
  var s;
  return n.tokenExpired = 1e3 * n.exp, delete n.exp, delete n.iat, n;
}
gs = "function" != typeof atob ? function (e) {
  if (e = String(e).replace(/[\t\n\f\r ]+/g, ""), !ys.test(e)) throw new Error("Failed to execute 'atob' on 'Window': The string to be decoded is not correctly encoded.");
  var t;
  e += "==".slice(2 - (3 & e.length));
  for (var n, s, r = "", i = 0; i < e.length;) {
    t = ms.indexOf(e.charAt(i++)) << 18 | ms.indexOf(e.charAt(i++)) << 12 | (n = ms.indexOf(e.charAt(i++))) << 6 | (s = ms.indexOf(e.charAt(i++))), r += 64 === n ? String.fromCharCode(t >> 16 & 255) : 64 === s ? String.fromCharCode(t >> 16 & 255, t >> 8 & 255) : String.fromCharCode(t >> 16 & 255, t >> 8 & 255, 255 & t);
  }
  return r;
} : atob;
var ws = s(function (e, t) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = "chooseAndUploadFile:ok",
      s = "chooseAndUploadFile:fail";
    function r(e, t) {
      return e.tempFiles.forEach(function (e, n) {
        e.name || (e.name = e.path.substring(e.path.lastIndexOf("/") + 1)), t && (e.fileType = t), e.cloudPath = Date.now() + "_" + n + e.name.substring(e.name.lastIndexOf("."));
      }), e.tempFilePaths || (e.tempFilePaths = e.tempFiles.map(function (e) {
        return e.path;
      })), e;
    }
    function i(e, t, _ref46) {
      var s = _ref46.onChooseFile,
        r = _ref46.onUploadProgress;
      return t.then(function (e) {
        if (s) {
          var _t17 = s(e);
          if (void 0 !== _t17) return Promise.resolve(_t17).then(function (t) {
            return void 0 === t ? e : t;
          });
        }
        return e;
      }).then(function (t) {
        return !1 === t ? {
          errMsg: n,
          tempFilePaths: [],
          tempFiles: []
        } : function (e, t) {
          var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;
          var r = arguments.length > 3 ? arguments[3] : undefined;
          (t = Object.assign({}, t)).errMsg = n;
          var i = t.tempFiles,
            o = i.length;
          var a = 0;
          return new Promise(function (n) {
            for (; a < s;) {
              c();
            }
            function c() {
              var s = a++;
              if (s >= o) return void (!i.find(function (e) {
                return !e.url && !e.errMsg;
              }) && n(t));
              var u = i[s];
              e.uploadFile({
                filePath: u.path,
                cloudPath: u.cloudPath,
                fileType: u.fileType,
                onUploadProgress: function onUploadProgress(e) {
                  e.index = s, e.tempFile = u, e.tempFilePath = u.path, r && r(e);
                }
              }).then(function (e) {
                u.url = e.fileID, s < o && c();
              }).catch(function (e) {
                u.errMsg = e.errMsg || e.message, s < o && c();
              });
            }
          });
        }(e, t, 5, r);
      });
    }
    t.initChooseAndUploadFile = function (e) {
      return function () {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          type: "all"
        };
        return "image" === t.type ? i(e, function (e) {
          var t = e.count,
            n = e.sizeType,
            _e$sourceType = e.sourceType,
            i = _e$sourceType === void 0 ? ["album", "camera"] : _e$sourceType,
            o = e.extension;
          return new Promise(function (e, a) {
            uni.chooseImage({
              count: t,
              sizeType: n,
              sourceType: i,
              extension: o,
              success: function success(t) {
                e(r(t, "image"));
              },
              fail: function fail(e) {
                a({
                  errMsg: e.errMsg.replace("chooseImage:fail", s)
                });
              }
            });
          });
        }(t), t) : "video" === t.type ? i(e, function (e) {
          var t = e.camera,
            n = e.compressed,
            i = e.maxDuration,
            _e$sourceType2 = e.sourceType,
            o = _e$sourceType2 === void 0 ? ["album", "camera"] : _e$sourceType2,
            a = e.extension;
          return new Promise(function (e, c) {
            uni.chooseVideo({
              camera: t,
              compressed: n,
              maxDuration: i,
              sourceType: o,
              extension: a,
              success: function success(t) {
                var n = t.tempFilePath,
                  s = t.duration,
                  i = t.size,
                  o = t.height,
                  a = t.width;
                e(r({
                  errMsg: "chooseVideo:ok",
                  tempFilePaths: [n],
                  tempFiles: [{
                    name: t.tempFile && t.tempFile.name || "",
                    path: n,
                    size: i,
                    type: t.tempFile && t.tempFile.type || "",
                    width: a,
                    height: o,
                    duration: s,
                    fileType: "video",
                    cloudPath: ""
                  }]
                }, "video"));
              },
              fail: function fail(e) {
                c({
                  errMsg: e.errMsg.replace("chooseVideo:fail", s)
                });
              }
            });
          });
        }(t), t) : i(e, function (e) {
          var t = e.count,
            n = e.extension;
          return new Promise(function (e, i) {
            var o = uni.chooseFile;
            if ("undefined" != typeof wx && "function" == typeof wx.chooseMessageFile && (o = wx.chooseMessageFile), "function" != typeof o) return i({
              errMsg: s + " 请指定 type 类型，该平台仅支持选择 image 或 video。"
            });
            o({
              type: "all",
              count: t,
              extension: n,
              success: function success(t) {
                e(r(t));
              },
              fail: function fail(e) {
                i({
                  errMsg: e.errMsg.replace("chooseFile:fail", s)
                });
              }
            });
          });
        }(t), t);
      };
    };
  }),
  vs = n(ws);
var bs = "manual";
function Ss(e) {
  return {
    props: {
      localdata: {
        type: Array,
        default: function _default() {
          return [];
        }
      },
      options: {
        type: [Object, Array],
        default: function _default() {
          return {};
        }
      },
      spaceInfo: {
        type: Object,
        default: function _default() {
          return {};
        }
      },
      collection: {
        type: [String, Array],
        default: ""
      },
      action: {
        type: String,
        default: ""
      },
      field: {
        type: String,
        default: ""
      },
      orderby: {
        type: String,
        default: ""
      },
      where: {
        type: [String, Object],
        default: ""
      },
      pageData: {
        type: String,
        default: "add"
      },
      pageCurrent: {
        type: Number,
        default: 1
      },
      pageSize: {
        type: Number,
        default: 20
      },
      getcount: {
        type: [Boolean, String],
        default: !1
      },
      gettree: {
        type: [Boolean, String],
        default: !1
      },
      gettreepath: {
        type: [Boolean, String],
        default: !1
      },
      startwith: {
        type: String,
        default: ""
      },
      limitlevel: {
        type: Number,
        default: 10
      },
      groupby: {
        type: String,
        default: ""
      },
      groupField: {
        type: String,
        default: ""
      },
      distinct: {
        type: [Boolean, String],
        default: !1
      },
      foreignKey: {
        type: String,
        default: ""
      },
      loadtime: {
        type: String,
        default: "auto"
      },
      manual: {
        type: Boolean,
        default: !1
      }
    },
    data: function data() {
      return {
        mixinDatacomLoading: !1,
        mixinDatacomHasMore: !1,
        mixinDatacomResData: [],
        mixinDatacomErrorMessage: "",
        mixinDatacomPage: {}
      };
    },
    created: function created() {
      var _this20 = this;
      this.mixinDatacomPage = {
        current: this.pageCurrent,
        size: this.pageSize,
        count: 0
      }, this.$watch(function () {
        var e = [];
        return ["pageCurrent", "pageSize", "localdata", "collection", "action", "field", "orderby", "where", "getont", "getcount", "gettree", "groupby", "groupField", "distinct"].forEach(function (t) {
          e.push(_this20[t]);
        }), e;
      }, function (e, t) {
        if (_this20.loadtime === bs) return;
        var n = !1;
        var s = [];
        for (var _r7 = 2; _r7 < e.length; _r7++) {
          e[_r7] !== t[_r7] && (s.push(e[_r7]), n = !0);
        }
        e[0] !== t[0] && (_this20.mixinDatacomPage.current = _this20.pageCurrent), _this20.mixinDatacomPage.size = _this20.pageSize, _this20.onMixinDatacomPropsChange(n, s);
      });
    },
    methods: {
      onMixinDatacomPropsChange: function onMixinDatacomPropsChange(e, t) {},
      mixinDatacomEasyGet: function mixinDatacomEasyGet() {
        var _this21 = this;
        var _ref47 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref47$getone = _ref47.getone,
          e = _ref47$getone === void 0 ? !1 : _ref47$getone,
          t = _ref47.success,
          n = _ref47.fail;
        this.mixinDatacomLoading || (this.mixinDatacomLoading = !0, this.mixinDatacomErrorMessage = "", this.mixinDatacomGet().then(function (n) {
          _this21.mixinDatacomLoading = !1;
          var _n$result = n.result,
            s = _n$result.data,
            r = _n$result.count;
          _this21.getcount && (_this21.mixinDatacomPage.count = r), _this21.mixinDatacomHasMore = s.length < _this21.pageSize;
          var i = e ? s.length ? s[0] : void 0 : s;
          _this21.mixinDatacomResData = i, t && t(i);
        }).catch(function (e) {
          _this21.mixinDatacomLoading = !1, _this21.mixinDatacomErrorMessage = e, n && n(e);
        }));
      },
      mixinDatacomGet: function mixinDatacomGet() {
        var _n12;
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var n = e.database(this.spaceInfo);
        var s = t.action || this.action;
        s && (n = n.action(s));
        var r = t.collection || this.collection;
        n = Array.isArray(r) ? (_n12 = n).collection.apply(_n12, (0, _toConsumableArray2.default)(r)) : n.collection(r);
        var i = t.where || this.where;
        i && Object.keys(i).length && (n = n.where(i));
        var o = t.field || this.field;
        o && (n = n.field(o));
        var a = t.foreignKey || this.foreignKey;
        a && (n = n.foreignKey(a));
        var c = t.groupby || this.groupby;
        c && (n = n.groupBy(c));
        var u = t.groupField || this.groupField;
        u && (n = n.groupField(u));
        !0 === (void 0 !== t.distinct ? t.distinct : this.distinct) && (n = n.distinct());
        var l = t.orderby || this.orderby;
        l && (n = n.orderBy(l));
        var h = void 0 !== t.pageCurrent ? t.pageCurrent : this.mixinDatacomPage.current,
          d = void 0 !== t.pageSize ? t.pageSize : this.mixinDatacomPage.size,
          p = void 0 !== t.getcount ? t.getcount : this.getcount,
          f = void 0 !== t.gettree ? t.gettree : this.gettree,
          g = void 0 !== t.gettreepath ? t.gettreepath : this.gettreepath,
          m = {
            getCount: p
          },
          y = {
            limitLevel: void 0 !== t.limitlevel ? t.limitlevel : this.limitlevel,
            startWith: void 0 !== t.startwith ? t.startwith : this.startwith
          };
        return f && (m.getTree = y), g && (m.getTreePath = y), n = n.skip(d * (h - 1)).limit(d).get(m), n;
      }
    }
  };
}
function ks(e) {
  return function (t) {
    var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    n = function (e) {
      var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return e.customUI = t.customUI || e.customUI, e.parseSystemError = t.parseSystemError || e.parseSystemError, Object.assign(e.loadingOptions, t.loadingOptions), Object.assign(e.errorOptions, t.errorOptions), "object" == (0, _typeof2.default)(t.secretMethods) && (e.secretMethods = t.secretMethods), e;
    }({
      customUI: !1,
      loadingOptions: {
        title: "加载中...",
        mask: !0
      },
      errorOptions: {
        type: "modal",
        retry: !1
      }
    }, n);
    var _n13 = n,
      s = _n13.customUI,
      r = _n13.loadingOptions,
      i = _n13.errorOptions,
      o = _n13.parseSystemError,
      a = !s;
    return new Proxy({}, {
      get: function get(s, c) {
        return function () {
          var _ref48 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            e = _ref48.fn,
            t = _ref48.interceptorName,
            n = _ref48.getCallbackArgs;
          return /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee50() {
            var _len2,
              s,
              _key2,
              r,
              i,
              o,
              _args = arguments;
            return _regenerator.default.wrap(function _callee50$(_context50) {
              while (1) {
                switch (_context50.prev = _context50.next) {
                  case 0:
                    for (_len2 = _args.length, s = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      s[_key2] = _args[_key2];
                    }
                    r = n ? n({
                      params: s
                    }) : {};
                    _context50.prev = 2;
                    _context50.next = 5;
                    return q(K(t, "invoke"), _objectSpread({}, r));
                  case 5:
                    _context50.next = 7;
                    return e.apply(void 0, s);
                  case 7:
                    i = _context50.sent;
                    _context50.next = 10;
                    return q(K(t, "success"), _objectSpread(_objectSpread({}, r), {}, {
                      result: i
                    }));
                  case 10:
                    return _context50.abrupt("return", i);
                  case 13:
                    _context50.prev = 13;
                    _context50.t0 = _context50["catch"](2);
                    o = _context50.t0;
                    _context50.next = 18;
                    return q(K(t, "fail"), _objectSpread(_objectSpread({}, r), {}, {
                      error: o
                    }));
                  case 18:
                    throw o;
                  case 19:
                    _context50.prev = 19;
                    _context50.next = 22;
                    return q(K(t, "complete"), o ? _objectSpread(_objectSpread({}, r), {}, {
                      error: o
                    }) : _objectSpread(_objectSpread({}, r), {}, {
                      result: i
                    }));
                  case 22:
                    return _context50.finish(19);
                  case 23:
                  case "end":
                    return _context50.stop();
                }
              }
            }, _callee50, null, [[2, 13, 19, 23]]);
          }));
        }({
          fn: function () {
            var _s14 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee52() {
              var h,
                _len3,
                u,
                _key3,
                d,
                p,
                _ref50,
                f,
                g,
                m,
                y,
                _e27,
                _yield,
                _t18,
                _n14,
                _args4 = arguments;
              return _regenerator.default.wrap(function _callee52$(_context52) {
                while (1) {
                  switch (_context52.prev = _context52.next) {
                    case 0:
                      a && uni.showLoading({
                        title: r.title,
                        mask: r.mask
                      });
                      for (_len3 = _args4.length, u = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        u[_key3] = _args4[_key3];
                      }
                      d = {
                        name: t,
                        type: l,
                        data: {
                          method: c,
                          params: u
                        }
                      };
                      "object" == (0, _typeof2.default)(n.secretMethods) && function (e, t) {
                        var n = t.data.method,
                          s = e.secretMethods || {},
                          r = s[n] || s["*"];
                        r && (t.secretType = r);
                      }(n, d);
                      p = !1;
                      _context52.prev = 5;
                      _context52.next = 8;
                      return e.callFunction(d);
                    case 8:
                      h = _context52.sent;
                      _context52.next = 14;
                      break;
                    case 11:
                      _context52.prev = 11;
                      _context52.t0 = _context52["catch"](5);
                      p = !0, h = {
                        result: new ne(_context52.t0)
                      };
                    case 14:
                      _ref50 = h.result || {}, f = _ref50.errSubject, g = _ref50.errCode, m = _ref50.errMsg, y = _ref50.newToken;
                      if (!(a && uni.hideLoading(), y && y.token && y.tokenExpired && (ie(y), Q(W, _objectSpread({}, y))), g)) {
                        _context52.next = 39;
                        break;
                      }
                      _e27 = m;
                      if (!(p && o)) {
                        _context52.next = 24;
                        break;
                      }
                      _context52.next = 20;
                      return o({
                        objectName: t,
                        methodName: c,
                        params: u,
                        errSubject: f,
                        errCode: g,
                        errMsg: m
                      });
                    case 20:
                      _context52.t1 = _context52.sent.errMsg;
                      if (_context52.t1) {
                        _context52.next = 23;
                        break;
                      }
                      _context52.t1 = m;
                    case 23:
                      _e27 = _context52.t1;
                    case 24:
                      if (!a) {
                        _context52.next = 37;
                        break;
                      }
                      if (!("toast" === i.type)) {
                        _context52.next = 29;
                        break;
                      }
                      uni.showToast({
                        title: _e27,
                        icon: "none"
                      });
                      _context52.next = 37;
                      break;
                    case 29:
                      if (!("modal" !== i.type)) {
                        _context52.next = 31;
                        break;
                      }
                      throw new Error("Invalid errorOptions.type: ".concat(i.type));
                    case 31:
                      _context52.next = 33;
                      return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee51() {
                        var _ref52,
                          e,
                          t,
                          n,
                          s,
                          r,
                          _args2 = arguments;
                        return _regenerator.default.wrap(function _callee51$(_context51) {
                          while (1) {
                            switch (_context51.prev = _context51.next) {
                              case 0:
                                _ref52 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, e = _ref52.title, t = _ref52.content, n = _ref52.showCancel, s = _ref52.cancelText, r = _ref52.confirmText;
                                return _context51.abrupt("return", new Promise(function (i, o) {
                                  uni.showModal({
                                    title: e,
                                    content: t,
                                    showCancel: n,
                                    cancelText: s,
                                    confirmText: r,
                                    success: function success(e) {
                                      i(e);
                                    },
                                    fail: function fail() {
                                      i({
                                        confirm: !1,
                                        cancel: !0
                                      });
                                    }
                                  });
                                }));
                              case 2:
                              case "end":
                                return _context51.stop();
                            }
                          }
                        }, _callee51);
                      }))({
                        title: "提示",
                        content: _e27,
                        showCancel: i.retry,
                        cancelText: "取消",
                        confirmText: i.retry ? "重试" : "确定"
                      });
                    case 33:
                      _yield = _context52.sent;
                      _t18 = _yield.confirm;
                      if (!(i.retry && _t18)) {
                        _context52.next = 37;
                        break;
                      }
                      return _context52.abrupt("return", s.apply(void 0, u));
                    case 37:
                      _n14 = new ne({
                        subject: f,
                        code: g,
                        message: m,
                        requestId: h.requestId
                      });
                      throw _n14.detail = h.result, Q(B, {
                        type: H,
                        content: _n14
                      }), _n14;
                    case 39:
                      return _context52.abrupt("return", (Q(B, {
                        type: H,
                        content: h.result
                      }), h.result));
                    case 40:
                    case "end":
                      return _context52.stop();
                  }
                }
              }, _callee52, null, [[5, 11]]);
            }));
            function s() {
              return _s14.apply(this, arguments);
            }
            return s;
          }(),
          interceptorName: "callObject",
          getCallbackArgs: function getCallbackArgs() {
            var _ref53 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              e = _ref53.params;
            return {
              objectName: t,
              methodName: c,
              params: e
            };
          }
        });
      }
    });
  };
}
function Is(e) {
  return U("_globalUniCloudSecureNetworkCache__{spaceId}".replace("{spaceId}", e.config.spaceId));
}
function Ts() {
  return _Ts.apply(this, arguments);
}
function _Ts() {
  _Ts = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee54() {
    var _ref60,
      e,
      _ref60$callLoginByWei,
      t,
      n,
      s,
      r,
      _args6 = arguments;
    return _regenerator.default.wrap(function _callee54$(_context54) {
      while (1) {
        switch (_context54.prev = _context54.next) {
          case 0:
            _ref60 = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {}, e = _ref60.openid, _ref60$callLoginByWei = _ref60.callLoginByWeixin, t = _ref60$callLoginByWei === void 0 ? !1 : _ref60$callLoginByWei;
            n = Is(this);
            if (!("mp-weixin" !== A)) {
              _context54.next = 4;
              break;
            }
            throw new Error("[SecureNetwork] API `initSecureNetworkByWeixin` is not supported on platform `".concat(A, "`"));
          case 4:
            if (!(e && t)) {
              _context54.next = 6;
              break;
            }
            throw new Error("[SecureNetwork] openid and callLoginByWeixin cannot be passed at the same time");
          case 6:
            if (!e) {
              _context54.next = 8;
              break;
            }
            return _context54.abrupt("return", (n.mpWeixinOpenid = e, {}));
          case 8:
            _context54.next = 10;
            return new Promise(function (e, t) {
              uni.login({
                success: function success(t) {
                  e(t.code);
                },
                fail: function fail(e) {
                  t(new Error(e.errMsg));
                }
              });
            });
          case 10:
            s = _context54.sent;
            r = this.importObject("uni-id-co", {
              customUI: !0
            });
            _context54.next = 14;
            return r.secureNetworkHandshakeByWeixin({
              code: s,
              callLoginByWeixin: t
            });
          case 14:
            n.mpWeixinCode = s;
            return _context54.abrupt("return", {
              code: s
            });
          case 16:
          case "end":
            return _context54.stop();
        }
      }
    }, _callee54, this);
  }));
  return _Ts.apply(this, arguments);
}
function Cs(_x37) {
  return _Cs.apply(this, arguments);
}
function _Cs() {
  _Cs = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee55(e) {
    var t;
    return _regenerator.default.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            t = Is(this);
            return _context55.abrupt("return", (t.initPromise || (t.initPromise = Ts.call(this, e)), t.initPromise));
          case 2:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55, this);
  }));
  return _Cs.apply(this, arguments);
}
function As(e) {
  return function () {
    var _ref54 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      t = _ref54.openid,
      _ref54$callLoginByWei = _ref54.callLoginByWeixin,
      n = _ref54$callLoginByWei === void 0 ? !1 : _ref54$callLoginByWei;
    return Cs.call(e, {
      openid: t,
      callLoginByWeixin: n
    });
  };
}
function Ps(_x38, _x39) {
  return _Ps.apply(this, arguments);
}
function _Ps() {
  _Ps = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee56(e, t) {
    var n, _e31, s;
    return _regenerator.default.wrap(function _callee56$(_context56) {
      while (1) {
        switch (_context56.prev = _context56.next) {
          case 0:
            n = "http://".concat(e, ":").concat(t, "/system/ping");
            _context56.prev = 1;
            _context56.next = 4;
            return s = {
              url: n,
              timeout: 500
            }, new Promise(function (e, t) {
              se.request(_objectSpread(_objectSpread({}, s), {}, {
                success: function success(t) {
                  e(t);
                },
                fail: function fail(e) {
                  t(e);
                }
              }));
            });
          case 4:
            _e31 = _context56.sent;
            return _context56.abrupt("return", !(!_e31.data || 0 !== _e31.data.code));
          case 8:
            _context56.prev = 8;
            _context56.t0 = _context56["catch"](1);
            return _context56.abrupt("return", !1);
          case 11:
          case "end":
            return _context56.stop();
        }
      }
    }, _callee56, null, [[1, 8]]);
  }));
  return _Ps.apply(this, arguments);
}
function Es(_x40) {
  return _Es.apply(this, arguments);
}
function _Es() {
  _Es = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee58(e) {
    var _ce2, _e32, _t20, t, _t$debugInfo, n, s, _yield2, r, i, o;
    return _regenerator.default.wrap(function _callee58$(_context58) {
      while (1) {
        switch (_context58.prev = _context58.next) {
          case 0:
            if (k) {
              _context58.next = 2;
              break;
            }
            return _context58.abrupt("return", Promise.resolve());
          case 2:
            if ("app" === A) {
              _ce2 = ce(), _e32 = _ce2.osName, _t20 = _ce2.osVersion;
              "ios" === _e32 && function (e) {
                if (!e || "string" != typeof e) return 0;
                var t = e.match(/^(\d+)./);
                return t && t[1] ? parseInt(t[1]) : 0;
              }(_t20) >= 14 && console.warn("iOS 14及以上版本连接uniCloud本地调试服务需要允许客户端查找并连接到本地网络上的设备（仅开发模式生效，发行模式会连接uniCloud云端服务）");
            }
            t = e.__dev__;
            if (t.debugInfo) {
              _context58.next = 6;
              break;
            }
            return _context58.abrupt("return");
          case 6:
            _t$debugInfo = t.debugInfo;
            n = _t$debugInfo.address;
            s = _t$debugInfo.servePort;
            _context58.next = 11;
            return function () {
              var _ref61 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee57(e, t) {
                var n, _s15, _r8;
                return _regenerator.default.wrap(function _callee57$(_context57) {
                  while (1) {
                    switch (_context57.prev = _context57.next) {
                      case 0:
                        _s15 = 0;
                      case 1:
                        if (!(_s15 < e.length)) {
                          _context57.next = 11;
                          break;
                        }
                        _r8 = e[_s15];
                        _context57.next = 5;
                        return Ps(_r8, t);
                      case 5:
                        if (!_context57.sent) {
                          _context57.next = 8;
                          break;
                        }
                        n = _r8;
                        return _context57.abrupt("break", 11);
                      case 8:
                        _s15++;
                        _context57.next = 1;
                        break;
                      case 11:
                        return _context57.abrupt("return", {
                          address: n,
                          port: t
                        });
                      case 12:
                      case "end":
                        return _context57.stop();
                    }
                  }
                }, _callee57);
              }));
              return function (_x41, _x42) {
                return _ref61.apply(this, arguments);
              };
            }()(n, s);
          case 11:
            _yield2 = _context58.sent;
            r = _yield2.address;
            if (!r) {
              _context58.next = 15;
              break;
            }
            return _context58.abrupt("return", (t.localAddress = r, void (t.localPort = s)));
          case 15:
            i = console["app" === A ? "error" : "warn"];
            o = "";
            if (!("remote" === t.debugInfo.initialLaunchType ? (t.debugInfo.forceRemote = !0, o = "当前客户端和HBuilderX不在同一局域网下（或其他网络原因无法连接HBuilderX），uniCloud本地调试服务不对当前客户端生效。\n- 如果不使用uniCloud本地调试服务，请直接忽略此信息。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。") : o = "无法连接uniCloud本地调试服务，请检查当前客户端是否与主机在同一局域网下。\n- 如需使用uniCloud本地调试服务，请将客户端与主机连接到同一局域网下并重新运行到客户端。", o += "\n- 如果在HBuilderX开启的状态下切换过网络环境，请重启HBuilderX后再试\n- 检查系统防火墙是否拦截了HBuilderX自带的nodejs\n- 检查是否错误的使用拦截器修改uni.request方法的参数", "web" === A && (o += "\n- 部分浏览器开启节流模式之后访问本地地址受限，请检查是否启用了节流模式"), 0 === A.indexOf("mp-") && (o += "\n- 小程序中如何使用uniCloud，请参考：https://uniapp.dcloud.net.cn/uniCloud/publish.html#useinmp"), !t.debugInfo.forceRemote)) {
              _context58.next = 19;
              break;
            }
            throw new Error(o);
          case 19:
            i(o);
          case 20:
          case "end":
            return _context58.stop();
        }
      }
    }, _callee58);
  }));
  return _Es.apply(this, arguments);
}
function Os(e) {
  e._initPromiseHub || (e._initPromiseHub = new b({
    createPromise: function createPromise() {
      var t = Promise.resolve();
      var n;
      n = 1, t = new Promise(function (e) {
        setTimeout(function () {
          e();
        }, n);
      });
      var s = e.auth();
      return t.then(function () {
        return s.getLoginState();
      }).then(function (e) {
        return e ? Promise.resolve() : s.signInAnonymously();
      });
    }
  }));
}
var xs = {
  tcb: bt,
  tencent: bt,
  aliyun: ge,
  private: kt
};
var Rs = new ( /*#__PURE__*/function () {
  function _class6() {
    (0, _classCallCheck2.default)(this, _class6);
  }
  (0, _createClass2.default)(_class6, [{
    key: "init",
    value: function init(e) {
      var t = {};
      var n = xs[e.provider];
      if (!n) throw new Error("未提供正确的provider参数");
      t = n.init(e), k && function (e) {
        if (!k) return;
        var t = {};
        e.__dev__ = t, t.debugLog = k && ("web" === A && navigator.userAgent.indexOf("HBuilderX") > 0 || "app" === A);
        var n = P;
        n && !n.code && (t.debugInfo = n);
        var s = new b({
          createPromise: function createPromise() {
            return Es(e);
          }
        });
        t.initLocalNetwork = function () {
          return s.exec();
        };
      }(t), Os(t), xn(t), function (e) {
        var t = e.uploadFile;
        e.uploadFile = function (e) {
          return t.call(this, e);
        };
      }(t), function (e) {
        e.database = function (t) {
          if (t && Object.keys(t).length > 0) return e.init(t).database();
          if (this._database) return this._database;
          var n = Bn($n, {
            uniClient: e
          });
          return this._database = n, n;
        }, e.databaseForJQL = function (t) {
          if (t && Object.keys(t).length > 0) return e.init(t).databaseForJQL();
          if (this._databaseForJQL) return this._databaseForJQL;
          var n = Bn($n, {
            uniClient: e,
            isJQL: !0
          });
          return this._databaseForJQL = n, n;
        };
      }(t), function (e) {
        e.getCurrentUserInfo = _s, e.chooseAndUploadFile = vs.initChooseAndUploadFile(e), Object.assign(e, {
          get mixinDatacom() {
            return Ss(e);
          }
        }), e.importObject = ks(e), e.initSecureNetworkByWeixin = As(e);
      }(t);
      return ["callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "chooseAndUploadFile"].forEach(function (e) {
        if (!t[e]) return;
        var n = t[e];
        t[e] = function () {
          return n.apply(t, Array.from(arguments));
        }, t[e] = function (e, t) {
          return function (n) {
            var _this22 = this;
            var s = !1;
            if ("callFunction" === t) {
              var _e28 = n && n.type || u;
              s = _e28 !== u;
            }
            var r = "callFunction" === t && !s,
              i = this._initPromiseHub.exec();
            n = n || {};
            var _te2 = te(n),
              o = _te2.success,
              a = _te2.fail,
              c = _te2.complete,
              l = i.then(function () {
                return s ? Promise.resolve() : q(K(t, "invoke"), n);
              }).then(function () {
                return e.call(_this22, n);
              }).then(function (e) {
                return s ? Promise.resolve(e) : q(K(t, "success"), e).then(function () {
                  return q(K(t, "complete"), e);
                }).then(function () {
                  return r && Q(B, {
                    type: J,
                    content: e
                  }), Promise.resolve(e);
                });
              }, function (e) {
                return s ? Promise.reject(e) : q(K(t, "fail"), e).then(function () {
                  return q(K(t, "complete"), e);
                }).then(function () {
                  return Q(B, {
                    type: J,
                    content: e
                  }), Promise.reject(e);
                });
              });
            if (!(o || a || c)) return l;
            l.then(function (e) {
              o && o(e), c && c(e), r && Q(B, {
                type: J,
                content: e
              });
            }, function (e) {
              a && a(e), c && c(e), r && Q(B, {
                type: J,
                content: e
              });
            });
          };
        }(t[e], e).bind(t);
      }), t.init = this.init, t;
    }
  }]);
  return _class6;
}())();
(function () {
  var e = E;
  var t = {};
  if (e && 1 === e.length) t = e[0], Rs = Rs.init(t), Rs._isDefault = !0;else {
    var _t19 = ["auth", "callFunction", "uploadFile", "deleteFile", "getTempFileURL", "downloadFile", "database", "getCurrentUSerInfo", "importObject"];
    var _n15;
    _n15 = e && e.length > 0 ? "应用有多个服务空间，请通过uniCloud.init方法指定要使用的服务空间" : O ? "应用未关联服务空间，请在uniCloud目录右键关联服务空间" : "uni-app cli项目内使用uniCloud需要使用HBuilderX的运行菜单运行项目，且需要在uniCloud目录关联服务空间", _t19.forEach(function (e) {
      Rs[e] = function () {
        return console.error(_n15), Promise.reject(new ne({
          code: "SYS_ERR",
          message: _n15
        }));
      };
    });
  }
  Object.assign(Rs, {
    get mixinDatacom() {
      return Ss(Rs);
    }
  }), fs(Rs), Rs.addInterceptor = D, Rs.removeInterceptor = F, Rs.interceptObject = M, k && "web" === A && (window.uniCloud = Rs);
})();
var Us = Rs;
exports.default = Us;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 3), __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/wx.js */ 1)["default"]))

/***/ }),

/***/ 537:
/*!*********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inherits.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ 16);
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}
module.exports = _inherits, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 538:
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ 13)["default"];
var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized.js */ 539);
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return assertThisInitialized(self);
}
module.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 539:
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 540:
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _getPrototypeOf(o);
}
module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 541:
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/wrapNativeSuper.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(/*! ./getPrototypeOf.js */ 540);
var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf.js */ 16);
var isNativeFunction = __webpack_require__(/*! ./isNativeFunction.js */ 542);
var construct = __webpack_require__(/*! ./construct.js */ 15);
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;
  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !isNativeFunction(Class)) return Class;
    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);
      _cache.set(Class, Wrapper);
    }
    function Wrapper() {
      return construct(Class, arguments, getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return setPrototypeOf(Wrapper, Class);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  return _wrapNativeSuper(Class);
}
module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 542:
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/isNativeFunction.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 543:
/*!***********************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/pages.json?{"type":"origin-pages-json"} ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  "pages": [{
    "path": "pages/main",
    "style": {
      "navigationBarTitleText": "",
      "enablePullDownRefresh": false
    }
  }],
  "subPackages": [{
    "root": "pagesA",
    "pages": [{
      "path": "cash/addbank",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "cash/wallet",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "cash/realname",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "cash/commissiondetails",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "demand-details/demand-details",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "anti-counterfeiting/anti-counterfeiting",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "select-city/select-city",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "location/location",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "search/search",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "search-suggest/search-suggest",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "focus-list/focus-list",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "fans-list/fans-list",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "mydemand/mydemand",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "myaccept/myaccept",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "agreement/agreement",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "myinfo/myinfo",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "Introduction/Introduction",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "mylabel/mylabel",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "user/user",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "cropper-default/cropper-default",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "web-view/web-view",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "web-view/hybrid",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "completed/completed",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "evaluate/evaluate",
      "style": {
        "navigationBarTitleText": "评价",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "evaluate/evaluate-details",
      "style": {
        "navigationBarTitleText": "查看评价",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "evaluate/list",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "login/login",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "intro/intro",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "service/service",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "setup/setup",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "feedback/feedback",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "about/about",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "about/flair",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "about/viewpic",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }]
  }, {
    "root": "pagesB",
    "pages": [{
      "path": "chat/chat",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "notice/notice",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }, {
      "path": "webview/webview",
      "style": {
        "navigationBarTitleText": "",
        "enablePullDownRefresh": false
      }
    }]
  }],
  "easycom": {
    "autoscan": true
  },
  "globalStyle": {
    "navigationStyle": "custom",
    "navigationBarTextStyle": "black",
    "navigationBarTitleText": "职苗",
    "navigationBarBackgroundColor": "#F8F8F8",
    "backgroundColor": "#F8F8F8"
  }
};
exports.default = _default;

/***/ }),

/***/ 544:
/*!**********************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/pages.json?{"type":"stat"} ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  "appid": "__UNI__3E0DB5F"
};
exports.default = _default;

/***/ }),

/***/ 545:
/*!****************************************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/uni-file-picker/components/uni-file-picker/choose-and-upload-file.js ***!
  \****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni, wx, uniCloud) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chooseAndUploadFile = chooseAndUploadFile;
exports.uploadCloudFiles = uploadCloudFiles;
var ERR_MSG_OK = 'chooseAndUploadFile:ok';
var ERR_MSG_FAIL = 'chooseAndUploadFile:fail';
function chooseImage(opts) {
  var count = opts.count,
    _opts$sizeType = opts.sizeType,
    sizeType = _opts$sizeType === void 0 ? ['original', 'compressed'] : _opts$sizeType,
    _opts$sourceType = opts.sourceType,
    sourceType = _opts$sourceType === void 0 ? ['album', 'camera'] : _opts$sourceType,
    extension = opts.extension;
  return new Promise(function (resolve, reject) {
    uni.chooseImage({
      count: count,
      sizeType: sizeType,
      sourceType: sourceType,
      extension: extension,
      success: function success(res) {
        resolve(normalizeChooseAndUploadFileRes(res, 'image'));
      },
      fail: function fail(res) {
        reject({
          errMsg: res.errMsg.replace('chooseImage:fail', ERR_MSG_FAIL)
        });
      }
    });
  });
}
function chooseVideo(opts) {
  var camera = opts.camera,
    compressed = opts.compressed,
    maxDuration = opts.maxDuration,
    _opts$sourceType2 = opts.sourceType,
    sourceType = _opts$sourceType2 === void 0 ? ['album', 'camera'] : _opts$sourceType2,
    extension = opts.extension;
  return new Promise(function (resolve, reject) {
    uni.chooseVideo({
      camera: camera,
      compressed: compressed,
      maxDuration: maxDuration,
      sourceType: sourceType,
      extension: extension,
      success: function success(res) {
        var tempFilePath = res.tempFilePath,
          duration = res.duration,
          size = res.size,
          height = res.height,
          width = res.width;
        resolve(normalizeChooseAndUploadFileRes({
          errMsg: 'chooseVideo:ok',
          tempFilePaths: [tempFilePath],
          tempFiles: [{
            name: res.tempFile && res.tempFile.name || '',
            path: tempFilePath,
            size: size,
            type: res.tempFile && res.tempFile.type || '',
            width: width,
            height: height,
            duration: duration,
            fileType: 'video',
            cloudPath: ''
          }]
        }, 'video'));
      },
      fail: function fail(res) {
        reject({
          errMsg: res.errMsg.replace('chooseVideo:fail', ERR_MSG_FAIL)
        });
      }
    });
  });
}
function chooseAll(opts) {
  var count = opts.count,
    extension = opts.extension;
  return new Promise(function (resolve, reject) {
    var chooseFile = uni.chooseFile;
    if (typeof wx !== 'undefined' && typeof wx.chooseMessageFile === 'function') {
      chooseFile = wx.chooseMessageFile;
    }
    if (typeof chooseFile !== 'function') {
      return reject({
        errMsg: ERR_MSG_FAIL + ' 请指定 type 类型，该平台仅支持选择 image 或 video。'
      });
    }
    chooseFile({
      type: 'all',
      count: count,
      extension: extension,
      success: function success(res) {
        resolve(normalizeChooseAndUploadFileRes(res));
      },
      fail: function fail(res) {
        reject({
          errMsg: res.errMsg.replace('chooseFile:fail', ERR_MSG_FAIL)
        });
      }
    });
  });
}
function normalizeChooseAndUploadFileRes(res, fileType) {
  res.tempFiles.forEach(function (item, index) {
    if (!item.name) {
      item.name = item.path.substring(item.path.lastIndexOf('/') + 1);
    }
    if (fileType) {
      item.fileType = fileType;
    }
    item.cloudPath = Date.now() + '_' + index + item.name.substring(item.name.lastIndexOf('.'));
  });
  if (!res.tempFilePaths) {
    res.tempFilePaths = res.tempFiles.map(function (file) {
      return file.path;
    });
  }
  return res;
}
function uploadCloudFiles(files) {
  var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  var _onUploadProgress = arguments.length > 2 ? arguments[2] : undefined;
  files = JSON.parse(JSON.stringify(files));
  var len = files.length;
  var count = 0;
  var self = this;
  return new Promise(function (resolve) {
    while (count < max) {
      next();
    }
    function next() {
      var cur = count++;
      if (cur >= len) {
        !files.find(function (item) {
          return !item.url && !item.errMsg;
        }) && resolve(files);
        return;
      }
      var fileItem = files[cur];
      var index = self.files.findIndex(function (v) {
        return v.uuid === fileItem.uuid;
      });
      fileItem.url = '';
      delete fileItem.errMsg;
      uniCloud.uploadFile({
        filePath: fileItem.path,
        cloudPath: fileItem.cloudPath,
        fileType: fileItem.fileType,
        onUploadProgress: function onUploadProgress(res) {
          res.index = index;
          _onUploadProgress && _onUploadProgress(res);
        }
      }).then(function (res) {
        fileItem.url = res.fileID;
        fileItem.index = index;
        if (cur < len) {
          next();
        }
      }).catch(function (res) {
        fileItem.errMsg = res.errMsg || res.message;
        fileItem.index = index;
        if (cur < len) {
          next();
        }
      });
    }
  });
}
function uploadFiles(choosePromise, _ref) {
  var onChooseFile = _ref.onChooseFile,
    onUploadProgress = _ref.onUploadProgress;
  return choosePromise.then(function (res) {
    if (onChooseFile) {
      var customChooseRes = onChooseFile(res);
      if (typeof customChooseRes !== 'undefined') {
        return Promise.resolve(customChooseRes).then(function (chooseRes) {
          return typeof chooseRes === 'undefined' ? res : chooseRes;
        });
      }
    }
    return res;
  }).then(function (res) {
    if (res === false) {
      return {
        errMsg: ERR_MSG_OK,
        tempFilePaths: [],
        tempFiles: []
      };
    }
    return res;
  });
}
function chooseAndUploadFile() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    type: 'all'
  };
  if (opts.type === 'image') {
    return uploadFiles(chooseImage(opts), opts);
  } else if (opts.type === 'video') {
    return uploadFiles(chooseVideo(opts), opts);
  }
  return uploadFiles(chooseAll(opts), opts);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/wx.js */ 1)["default"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/uni-cloud/dist/index.js */ 536)["default"]))

/***/ }),

/***/ 546:
/*!***********************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/uni-file-picker/components/uni-file-picker/utils.js ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.get_files_and_is_max = exports.get_file_info = exports.get_file_ext = exports.get_file_data = exports.get_extname = void 0;
var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ 30));
var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ 32));
/**
 * 获取文件名和后缀
 * @param {String} name
 */
var get_file_ext = function get_file_ext(name) {
  var last_len = name.lastIndexOf('.');
  var len = name.length;
  return {
    name: name.substring(0, last_len),
    ext: name.substring(last_len + 1, len)
  };
};

/**
 * 获取扩展名
 * @param {Array} fileExtname
 */
exports.get_file_ext = get_file_ext;
var get_extname = function get_extname(fileExtname) {
  if (!Array.isArray(fileExtname)) {
    var extname = fileExtname.replace(/(\[|\])/g, '');
    return extname.split(',');
  } else {
    return fileExtname;
  }
  return [];
};

/**
 * 获取文件和检测是否可选
 */
exports.get_extname = get_extname;
var get_files_and_is_max = function get_files_and_is_max(res, _extname) {
  var filePaths = [];
  var files = [];
  if (!_extname || _extname.length === 0) {
    return {
      filePaths: filePaths,
      files: files
    };
  }
  res.tempFiles.forEach(function (v) {
    var fileFullName = get_file_ext(v.name);
    var extname = fileFullName.ext.toLowerCase();
    if (_extname.indexOf(extname) !== -1) {
      files.push(v);
      filePaths.push(v.path);
    }
  });
  if (files.length !== res.tempFiles.length) {
    uni.showToast({
      title: "\u5F53\u524D\u9009\u62E9\u4E86".concat(res.tempFiles.length, "\u4E2A\u6587\u4EF6 \uFF0C").concat(res.tempFiles.length - files.length, " \u4E2A\u6587\u4EF6\u683C\u5F0F\u4E0D\u6B63\u786E"),
      icon: 'none',
      duration: 5000
    });
  }
  return {
    filePaths: filePaths,
    files: files
  };
};

/**
 * 获取图片信息
 * @param {Object} filepath
 */
exports.get_files_and_is_max = get_files_and_is_max;
var get_file_info = function get_file_info(filepath) {
  return new Promise(function (resolve, reject) {
    uni.getImageInfo({
      src: filepath,
      success: function success(res) {
        resolve(res);
      },
      fail: function fail(err) {
        reject(err);
      }
    });
  });
};
/**
 * 获取封装数据
 */
exports.get_file_info = get_file_info;
var get_file_data = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(files) {
    var type,
      fileFullName,
      extname,
      filedata,
      imageinfo,
      _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            type = _args.length > 1 && _args[1] !== undefined ? _args[1] : 'image';
            // 最终需要上传数据库的数据
            fileFullName = get_file_ext(files.name);
            extname = fileFullName.ext.toLowerCase();
            filedata = {
              name: files.name,
              uuid: files.uuid,
              extname: extname || '',
              cloudPath: files.cloudPath,
              fileType: files.fileType,
              url: files.path || files.path,
              size: files.size,
              //单位是字节
              image: {},
              path: files.path,
              video: {}
            };
            if (!(type === 'image')) {
              _context.next = 14;
              break;
            }
            _context.next = 7;
            return get_file_info(files.path);
          case 7:
            imageinfo = _context.sent;
            delete filedata.video;
            filedata.image.width = imageinfo.width;
            filedata.image.height = imageinfo.height;
            filedata.image.location = imageinfo.path;
            _context.next = 15;
            break;
          case 14:
            delete filedata.image;
          case 15:
            return _context.abrupt("return", filedata);
          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function get_file_data(_x) {
    return _ref.apply(this, arguments);
  };
}();
exports.get_file_data = get_file_data;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 6:
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 602:
/*!*******************************************************************************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/uni_modules/uni-transition/components/uni-transition/createAnimation.js ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(uni) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ 4);
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnimation = createAnimation;
var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ 11));
var _classCallCheck2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ 23));
var _createClass2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/createClass */ 24));
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
// const defaultOption = {
// 	duration: 300,
// 	timingFunction: 'linear',
// 	delay: 0,
// 	transformOrigin: '50% 50% 0'
// }
var MPAnimation = /*#__PURE__*/function () {
  function MPAnimation(options, _this) {
    (0, _classCallCheck2.default)(this, MPAnimation);
    this.options = options;
    this.animation = uni.createAnimation(options);
    this.currentStepAnimates = {};
    this.next = 0;
    this.$ = _this;
  }
  (0, _createClass2.default)(MPAnimation, [{
    key: "_nvuePushAnimates",
    value: function _nvuePushAnimates(type, args) {
      var aniObj = this.currentStepAnimates[this.next];
      var styles = {};
      if (!aniObj) {
        styles = {
          styles: {},
          config: {}
        };
      } else {
        styles = aniObj;
      }
      if (animateTypes1.includes(type)) {
        if (!styles.styles.transform) {
          styles.styles.transform = '';
        }
        var unit = '';
        if (type === 'rotate') {
          unit = 'deg';
        }
        styles.styles.transform += "".concat(type, "(").concat(args + unit, ") ");
      } else {
        styles.styles[type] = "".concat(args);
      }
      this.currentStepAnimates[this.next] = styles;
    }
  }, {
    key: "_animateRun",
    value: function _animateRun() {
      var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var ref = this.$.$refs['ani'].ref;
      if (!ref) return;
      return new Promise(function (resolve, reject) {
        nvueAnimation.transition(ref, _objectSpread({
          styles: styles
        }, config), function (res) {
          resolve();
        });
      });
    }
  }, {
    key: "_nvueNextAnimate",
    value: function _nvueNextAnimate(animates) {
      var _this2 = this;
      var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var fn = arguments.length > 2 ? arguments[2] : undefined;
      var obj = animates[step];
      if (obj) {
        var styles = obj.styles,
          config = obj.config;
        this._animateRun(styles, config).then(function () {
          step += 1;
          _this2._nvueNextAnimate(animates, step, fn);
        });
      } else {
        this.currentStepAnimates = {};
        typeof fn === 'function' && fn();
        this.isEnd = true;
      }
    }
  }, {
    key: "step",
    value: function step() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.animation.step(config);
      return this;
    }
  }, {
    key: "run",
    value: function run(fn) {
      this.$.animationData = this.animation.export();
      this.$.timer = setTimeout(function () {
        typeof fn === 'function' && fn();
      }, this.$.durationTime);
    }
  }]);
  return MPAnimation;
}();
var animateTypes1 = ['matrix', 'matrix3d', 'rotate', 'rotate3d', 'rotateX', 'rotateY', 'rotateZ', 'scale', 'scale3d', 'scaleX', 'scaleY', 'scaleZ', 'skew', 'skewX', 'skewY', 'translate', 'translate3d', 'translateX', 'translateY', 'translateZ'];
var animateTypes2 = ['opacity', 'backgroundColor'];
var animateTypes3 = ['width', 'height', 'left', 'right', 'top', 'bottom'];
animateTypes1.concat(animateTypes2, animateTypes3).forEach(function (type) {
  MPAnimation.prototype[type] = function () {
    var _this$animation;
    (_this$animation = this.animation)[type].apply(_this$animation, arguments);
    return this;
  };
});
function createAnimation(option, _this) {
  if (!_this) return;
  clearTimeout(_this.timer);
  return new MPAnimation(option, _this);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-mp-weixin/dist/index.js */ 2)["default"]))

/***/ }),

/***/ 7:
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) {
        ;
      }
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 8:
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ 9);
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ 86:
/*!***********************************************************!*\
  !*** /Users/huhao/Desktop/www/wx_zhimiao/utils/common.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function formatNumber(price) {
  var num = Number(price);
  if (num == 0) {
    return num.toFixed(2);
  } else if (price > 0 && num < 10000) {
    return num.toFixed(2);
  } else {
    return (num / 10000).toFixed(2) + '万';
  }
}
function transTime(times, format) {
  var date = new Date(times * 1000);
  var year = date.getFullYear();
  var month = date.getMonth() + 1;
  if (month < 10) month = '0' + month;
  var day = date.getDate();
  if (day < 10) day = '0' + day;
  var hour = date.getHours();
  if (hour < 10) hour = '0' + hour;
  var minute = date.getMinutes();
  if (minute < 10) minute = '0' + minute;
  var sencond = date.getSeconds();
  if (sencond < 10) sencond = '0' + sencond;
  if (format == 'mm-dd hh:mm:ss') {
    return "".concat(month, "-").concat(day, " ").concat(hour, ":").concat(minute, ":").concat(sencond);
  } else if (format == 'yy-mm-dd hh:mm:ss') {
    return "".concat(year, "-").concat(month, "-").concat(day, " ").concat(hour, ":").concat(minute, ":").concat(sencond);
  } else if (format == 'hh:mm:ss') {
    return "".concat(hour, ":").concat(minute, ":").concat(sencond);
  } else if (format == 'hh:mm') {
    return "".concat(hour, ":").concat(minute);
  } else {
    return {
      year: year,
      month: month,
      day: day,
      hour: hour,
      minute: minute,
      sencond: sencond
    };
  }
}

//去空格
function trim(value) {
  return value.replace(/(^\s*)|(\s*$)/g, "");
}

//根据经纬度计算距离
function distance(lat1, lng1, location) {
  if (!lat1 || !lng1) return 0;
  if (!location) return 0;
  var lat2 = location.lat;
  var lng2 = location.lng;
  var rad1 = lat1 * Math.PI / 180.0;
  var rad2 = lat2 * Math.PI / 180.0;
  var a = rad1 - rad2;
  var b = lng1 * Math.PI / 180.0 - lng2 * Math.PI / 180.0;
  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(rad1) * Math.cos(rad2) * Math.pow(Math.sin(b / 2), 2)));
  s = s * 6378.137;
  s = Math.round(s * 10000) / 10000;
  s = s.toString();
  s = s.substring(0, s.indexOf('.') + 2);
  return s;
}
module.exports = {
  formatNumber: formatNumber,
  transTime: transTime,
  trim: trim,
  distance: distance
};

/***/ }),

/***/ 9:
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ })

}]);
//# sourceMappingURL=../../.sourcemap/mp-weixin/common/vendor.js.map